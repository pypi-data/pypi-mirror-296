# Generated by ariadne-codegen
# Source: python/atoti-client/graphql/operations.gql

from typing import Any, Dict

from .base_client import BaseClient
from .find_cube import FindCube
from .find_hierarchy import FindHierarchy
from .find_hierarchy_across_dimensions import FindHierarchyAcrossDimensions
from .find_level import FindLevel
from .find_level_across_dimensions import FindLevelAcrossDimensions
from .find_level_across_hierarchies import FindLevelAcrossHierarchies
from .find_table import FindTable
from .get_cube_fact_table import GetCubeFactTable
from .get_cubes import GetCubes
from .get_database_schema import GetDatabaseSchema
from .get_dimension_default_hierarchy import GetDimensionDefaultHierarchy
from .get_hierarchies import GetHierarchies
from .get_hierarchy_are_members_indexed_by_name import (
    GetHierarchyAreMembersIndexedByName,
)
from .get_hierarchy_is_slicing import GetHierarchyIsSlicing
from .get_hierarchy_is_virtual import GetHierarchyIsVirtual
from .get_hierarchy_is_visible import GetHierarchyIsVisible
from .get_hierarchy_levels import GetHierarchyLevels
from .get_levels import GetLevels
from .get_table_columns import GetTableColumns
from .get_table_primary_index import GetTablePrimaryIndex
from .get_tables import GetTables
from .input_types import UpdateHierarchyInput
from .update_hierarchy import UpdateHierarchy


def gql(q: str) -> str:
    return q


class GraphqlClient(BaseClient):
    def find_cube(self, cube_name: str, **kwargs: Any) -> FindCube:
        query = gql(
            """
            query FindCube($cubeName: String!) {
              cube(name: $cubeName) {
                name
              }
            }
            """
        )
        variables: Dict[str, object] = {"cubeName": cube_name}
        response = self.execute(
            query=query, operation_name="FindCube", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return FindCube.model_validate(data)

    def find_hierarchy(
        self, cube_name: str, dimension_name: str, hierarchy_name: str, **kwargs: Any
    ) -> FindHierarchy:
        query = gql(
            """
            query FindHierarchy($cubeName: String!, $dimensionName: String!, $hierarchyName: String!) {
              cube(name: $cubeName) {
                dimension(name: $dimensionName) {
                  hierarchy(name: $hierarchyName) {
                    name
                  }
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query, operation_name="FindHierarchy", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return FindHierarchy.model_validate(data)

    def find_hierarchy_across_dimensions(
        self, cube_name: str, hierarchy_name: str, **kwargs: Any
    ) -> FindHierarchyAcrossDimensions:
        query = gql(
            """
            query FindHierarchyAcrossDimensions($cubeName: String!, $hierarchyName: String!) {
              cube(name: $cubeName) {
                dimensions {
                  hierarchy(name: $hierarchyName) {
                    name
                  }
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query,
            operation_name="FindHierarchyAcrossDimensions",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return FindHierarchyAcrossDimensions.model_validate(data)

    def find_level(
        self,
        cube_name: str,
        dimension_name: str,
        hierarchy_name: str,
        level_name: str,
        **kwargs: Any
    ) -> FindLevel:
        query = gql(
            """
            query FindLevel($cubeName: String!, $dimensionName: String!, $hierarchyName: String!, $levelName: String!) {
              cube(name: $cubeName) {
                dimension(name: $dimensionName) {
                  hierarchy(name: $hierarchyName) {
                    level(name: $levelName) {
                      name
                      type
                    }
                    name
                  }
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
            "levelName": level_name,
        }
        response = self.execute(
            query=query, operation_name="FindLevel", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return FindLevel.model_validate(data)

    def find_level_across_dimensions(
        self, cube_name: str, hierarchy_name: str, level_name: str, **kwargs: Any
    ) -> FindLevelAcrossDimensions:
        query = gql(
            """
            query FindLevelAcrossDimensions($cubeName: String!, $hierarchyName: String!, $levelName: String!) {
              cube(name: $cubeName) {
                dimensions {
                  hierarchy(name: $hierarchyName) {
                    level(name: $levelName) {
                      name
                      type
                    }
                    name
                  }
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "hierarchyName": hierarchy_name,
            "levelName": level_name,
        }
        response = self.execute(
            query=query,
            operation_name="FindLevelAcrossDimensions",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return FindLevelAcrossDimensions.model_validate(data)

    def find_level_across_hierarchies(
        self, cube_name: str, level_name: str, **kwargs: Any
    ) -> FindLevelAcrossHierarchies:
        query = gql(
            """
            query FindLevelAcrossHierarchies($cubeName: String!, $levelName: String!) {
              cube(name: $cubeName) {
                dimensions {
                  hierarchies {
                    level(name: $levelName) {
                      name
                      type
                    }
                    name
                  }
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"cubeName": cube_name, "levelName": level_name}
        response = self.execute(
            query=query,
            operation_name="FindLevelAcrossHierarchies",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return FindLevelAcrossHierarchies.model_validate(data)

    def find_table(self, table_name: str, **kwargs: Any) -> FindTable:
        query = gql(
            """
            query FindTable($tableName: String!) {
              table(name: $tableName) {
                name
              }
            }
            """
        )
        variables: Dict[str, object] = {"tableName": table_name}
        response = self.execute(
            query=query, operation_name="FindTable", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return FindTable.model_validate(data)

    def get_cube_fact_table(self, cube_name: str, **kwargs: Any) -> GetCubeFactTable:
        query = gql(
            """
            query GetCubeFactTable($cubeName: String!) {
              cube(name: $cubeName) {
                factTable {
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"cubeName": cube_name}
        response = self.execute(
            query=query,
            operation_name="GetCubeFactTable",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetCubeFactTable.model_validate(data)

    def get_cubes(self, **kwargs: Any) -> GetCubes:
        query = gql(
            """
            query GetCubes {
              cubes {
                name
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query, operation_name="GetCubes", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetCubes.model_validate(data)

    def get_database_schema(self, **kwargs: Any) -> GetDatabaseSchema:
        query = gql(
            """
            query GetDatabaseSchema {
              tables {
                columns {
                  dataType
                  defaultValue
                  name
                }
                joins {
                  isPartial
                  mappingItems {
                    source {
                      name
                    }
                    target {
                      name
                    }
                  }
                  target {
                    name
                  }
                  targetOptionality
                }
                name
                primaryIndex {
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query,
            operation_name="GetDatabaseSchema",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetDatabaseSchema.model_validate(data)

    def get_dimension_default_hierarchy(
        self, cube_name: str, dimension_name: str, **kwargs: Any
    ) -> GetDimensionDefaultHierarchy:
        query = gql(
            """
            query GetDimensionDefaultHierarchy($cubeName: String!, $dimensionName: String!) {
              cube(name: $cubeName) {
                dimension(name: $dimensionName) {
                  defaultHierarchy {
                    name
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dimensionName": dimension_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetDimensionDefaultHierarchy",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetDimensionDefaultHierarchy.model_validate(data)

    def get_hierarchies(self, cube_name: str, **kwargs: Any) -> GetHierarchies:
        query = gql(
            """
            query GetHierarchies($cubeName: String!) {
              cube(name: $cubeName) {
                dimensions {
                  hierarchies {
                    name
                  }
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"cubeName": cube_name}
        response = self.execute(
            query=query, operation_name="GetHierarchies", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetHierarchies.model_validate(data)

    def get_hierarchy_are_members_indexed_by_name(
        self, cube_name: str, dimension_name: str, hierarchy_name: str, **kwargs: Any
    ) -> GetHierarchyAreMembersIndexedByName:
        query = gql(
            """
            query GetHierarchyAreMembersIndexedByName($cubeName: String!, $dimensionName: String!, $hierarchyName: String!) {
              cube(name: $cubeName) {
                dimension(name: $dimensionName) {
                  hierarchy(name: $hierarchyName) {
                    areMembersIndexedByName
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetHierarchyAreMembersIndexedByName",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetHierarchyAreMembersIndexedByName.model_validate(data)

    def get_hierarchy_is_slicing(
        self, cube_name: str, dimension_name: str, hierarchy_name: str, **kwargs: Any
    ) -> GetHierarchyIsSlicing:
        query = gql(
            """
            query GetHierarchyIsSlicing($cubeName: String!, $dimensionName: String!, $hierarchyName: String!) {
              cube(name: $cubeName) {
                dimension(name: $dimensionName) {
                  hierarchy(name: $hierarchyName) {
                    isSlicing
                  }
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetHierarchyIsSlicing",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetHierarchyIsSlicing.model_validate(data)

    def get_hierarchy_is_virtual(
        self, cube_name: str, dimension_name: str, hierarchy_name: str, **kwargs: Any
    ) -> GetHierarchyIsVirtual:
        query = gql(
            """
            query GetHierarchyIsVirtual($cubeName: String!, $dimensionName: String!, $hierarchyName: String!) {
              cube(name: $cubeName) {
                dimension(name: $dimensionName) {
                  hierarchy(name: $hierarchyName) {
                    isVirtual
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetHierarchyIsVirtual",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetHierarchyIsVirtual.model_validate(data)

    def get_hierarchy_is_visible(
        self, cube_name: str, dimension_name: str, hierarchy_name: str, **kwargs: Any
    ) -> GetHierarchyIsVisible:
        query = gql(
            """
            query GetHierarchyIsVisible($cubeName: String!, $dimensionName: String!, $hierarchyName: String!) {
              cube(name: $cubeName) {
                dimension(name: $dimensionName) {
                  hierarchy(name: $hierarchyName) {
                    isVisible
                  }
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetHierarchyIsVisible",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetHierarchyIsVisible.model_validate(data)

    def get_hierarchy_levels(
        self, cube_name: str, dimension_name: str, hierarchy_name: str, **kwargs: Any
    ) -> GetHierarchyLevels:
        query = gql(
            """
            query GetHierarchyLevels($cubeName: String!, $dimensionName: String!, $hierarchyName: String!) {
              cube(name: $cubeName) {
                dimension(name: $dimensionName) {
                  hierarchy(name: $hierarchyName) {
                    levels {
                      name
                      type
                    }
                    name
                  }
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {
            "cubeName": cube_name,
            "dimensionName": dimension_name,
            "hierarchyName": hierarchy_name,
        }
        response = self.execute(
            query=query,
            operation_name="GetHierarchyLevels",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetHierarchyLevels.model_validate(data)

    def get_levels(self, cube_name: str, **kwargs: Any) -> GetLevels:
        query = gql(
            """
            query GetLevels($cubeName: String!) {
              cube(name: $cubeName) {
                dimensions {
                  hierarchies {
                    levels {
                      name
                      type
                    }
                    name
                  }
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"cubeName": cube_name}
        response = self.execute(
            query=query, operation_name="GetLevels", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetLevels.model_validate(data)

    def get_table_columns(self, table_name: str, **kwargs: Any) -> GetTableColumns:
        query = gql(
            """
            query GetTableColumns($tableName: String!) {
              table(name: $tableName) {
                columns {
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"tableName": table_name}
        response = self.execute(
            query=query, operation_name="GetTableColumns", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetTableColumns.model_validate(data)

    def get_table_primary_index(
        self, table_name: str, **kwargs: Any
    ) -> GetTablePrimaryIndex:
        query = gql(
            """
            query GetTablePrimaryIndex($tableName: String!) {
              table(name: $tableName) {
                primaryIndex {
                  name
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"tableName": table_name}
        response = self.execute(
            query=query,
            operation_name="GetTablePrimaryIndex",
            variables=variables,
            **kwargs
        )
        data = self.get_data(response)
        return GetTablePrimaryIndex.model_validate(data)

    def get_tables(self, **kwargs: Any) -> GetTables:
        query = gql(
            """
            query GetTables {
              tables {
                name
              }
            }
            """
        )
        variables: Dict[str, object] = {}
        response = self.execute(
            query=query, operation_name="GetTables", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return GetTables.model_validate(data)

    def update_hierarchy(
        self, input: UpdateHierarchyInput, **kwargs: Any
    ) -> UpdateHierarchy:
        query = gql(
            """
            mutation UpdateHierarchy($input: UpdateHierarchyInput!) {
              updateHierarchy(input: $input) {
                hierarchy {
                  areMembersIndexedByName
                }
              }
            }
            """
        )
        variables: Dict[str, object] = {"input": input}
        response = self.execute(
            query=query, operation_name="UpdateHierarchy", variables=variables, **kwargs
        )
        data = self.get_data(response)
        return UpdateHierarchy.model_validate(data)
