-- core.nbl
using io
using math
using time
def stdvr(OUTPUT_FILE, STEPS,PSI, DISTANCES, DISTANCES_SQUARE,ANIMATION,GRAPHSIZE)
    t0 = micro()
    PROBABILITY_VECTOR = vec_conj( PSI )
    if ANIMATION == 1    
        f = open( "NEBLINA_TEMP_PROB" + tostr(STEPS, 5) + ".dat", "w" )
        print( f, PROBABILITY_VECTOR )
    end
    tmp = vec_prod( DISTANCES_SQUARE, PROBABILITY_VECTOR )
    s1  = vec_sum( tmp )    
    tmp = vec_prod( DISTANCES, PROBABILITY_VECTOR )
    mean = vec_sum( tmp )
    stddev = sqrt(abs(s1-mean*mean))
    println( OUTPUT_FILE, STEPS  + "         " + mean + "          " + s1 + "          " + stddev )
    t1 = micro()
--    println( t1 - t0 )
end
def main()
fmtdouble( 16 )

   STEPS = toint( args[2] )
   STATESIZE = toint( args[3] )
   GRAPHSIZE= toint( args[4] )
   DISTANCE_VECTOR_SIZE = toint( args[5] )
   SAVE_STATES_MULTIPLE_OF_N=toint( args[6] )
   ANIMATION = toint( args[7] )
   



   file_Ue = open( "HIPERWALK_TEMP_STAGGERED_EVEN_OPERATOR_1D.dat", "r" )
   Ue = sparse complex[STATESIZE,STATESIZE]
   read( file_Ue, Ue )
   file_Uo = open( "HIPERWALK_TEMP_STAGGERED_ODD_OPERATOR_1D.dat", "r" )
   Uo = sparse complex[STATESIZE,STATESIZE]
   read( file_Uo, Uo )
   file_psi = open( "HIPERWALK_TEMP_PSI.dat", "r" )
   PSI = complex[STATESIZE]
   read( file_psi, PSI )
   file_D = open("HIPERWALK_TEMP_RANGE_1D.dat", "r" ) 
   DISTANCES_VECTOR = float[STATESIZE]
   read( file_D, DISTANCES_VECTOR )
   DISTANCES_SQUARE = vec_prod( DISTANCES_VECTOR,DISTANCES_VECTOR)
   stdv_file = open("statistics.dat", "w" ) 
   println( stdv_file, "#STEP     Mean          2nd Moment    Standard deviation" )
   stdvr(stdv_file, 0, PSI,  DISTANCES_VECTOR  , DISTANCES_SQUARE, ANIMATION,STATESIZE)
   for t = 1 : STEPS
           PSI = mat_mulvec( Ue, PSI )
           PSI = mat_mulvec( Uo, PSI )
           if SAVE_STATES_MULTIPLE_OF_N > 0 
               a=t % SAVE_STATES_MULTIPLE_OF_N 
               if a == 0 
                   f = open( "wavefunction-" + tostr(t) + ".dat", "w" )
                   print( f, PSI )
                   stdvr(stdv_file, t, PSI,  DISTANCES_VECTOR  , DISTANCES_SQUARE, ANIMATION,STATESIZE)
               end
           else
	           stdvr(stdv_file, t, PSI,  DISTANCES_VECTOR  , DISTANCES_SQUARE, ANIMATION,STATESIZE)
           end

   end  

   PROBABILITY_VECTOR = vec_conj( PSI )
   println( "[NEBLINA] Statistics file: .............. statistics.dat" )
   final_state_neblina = open("NEBLINA_TEMP_final_state.dat", "w")
   println( final_state_neblina, PSI )
   final_distribution_neblina = open("NEBLINA_TEMP_final_distribution.dat", "w")
   println( final_distribution_neblina, PROBABILITY_VECTOR )
   println( "[NEBLINA] Wave Function final : .............. final_state.dat" )
   println("[NEBLINA] Done!")
 end
