# -*- coding: utf-8 -*-
"""
Created on Sat Jan 31 02:44:40 2015

@author: Aaron Leao
         aaron@lncc.br
"""
import subprocess
import os
import sys
import ioFunctions as io
import config as cfg
import numpy as np
import walks


def create_CUSTOM_test_vector():
    returnVector=np.array([
(0.0000000000000000),
(1.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000)
])
    returnVector.shape=(10,1)
    return returnVector

def create_DTQW1D_test_vector():
    returnVector=np.array([
(0.0009765624967226),
(0.0000000000000000),
(0.0644531247836911),
(0.0000000000000000),
(0.2626953116183776),
(0.0000000000000000),
(0.0624999997902460),
(0.0000000000000000),
(0.0742187497509171),
(0.0000000000000000),
(0.0703124997640267),
(0.0000000000000000),
(0.0742187497509171),
(0.0000000000000000),
(0.0624999997902460),
(0.0000000000000000),
(0.2626953116183776),
(0.0000000000000000),
(0.0644531247836911),
(0.0000000000000000),
(0.0009765624967226)
])
    returnVector.shape=(21,1)
    return returnVector



def create_DTQW2D_test_vector():
    returnVector=np.array([
(0.0000009536743164),
(0.0000000000000000),
(0.0000629425048828),
(0.0000000000000000),
(0.0002565383911133),
(0.0000000000000000),
(0.0000610351562500),
(0.0000000000000000),
(0.0000724792480469),
(0.0000000000000000),
(0.0000686645507812),
(0.0000000000000000),
(0.0000724792480469),
(0.0000000000000000),
(0.0000610351562500),
(0.0000000000000000),
(0.0002565383911133),
(0.0000000000000000),
(0.0000629425048828),
(0.0000000000000000),
(0.0000009536743164),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000629425048828),
(0.0000000000000000),
(0.0041542053222656),
(0.0000000000000000),
(0.0169315338134766),
(0.0000000000000000),
(0.0040283203125000),
(0.0000000000000000),
(0.0047836303710938),
(0.0000000000000000),
(0.0045318603515625),
(0.0000000000000000),
(0.0047836303710938),
(0.0000000000000000),
(0.0040283203125000),
(0.0000000000000000),
(0.0169315338134766),
(0.0000000000000000),
(0.0041542053222656),
(0.0000000000000000),
(0.0000629425048828),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0002565383911133),
(0.0000000000000000),
(0.0169315338134766),
(0.0000000000000000),
(0.0690088272094727),
(0.0000000000000000),
(0.0164184570312500),
(0.0000000000000000),
(0.0194969177246094),
(0.0000000000000000),
(0.0184707641601562),
(0.0000000000000000),
(0.0194969177246094),
(0.0000000000000000),
(0.0164184570312500),
(0.0000000000000000),
(0.0690088272094727),
(0.0000000000000000),
(0.0169315338134766),
(0.0000000000000000),
(0.0002565383911133),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000610351562500),
(0.0000000000000000),
(0.0040283203125000),
(0.0000000000000000),
(0.0164184570312500),
(0.0000000000000000),
(0.0039062500000000),
(0.0000000000000000),
(0.0046386718750000),
(0.0000000000000000),
(0.0043945312500000),
(0.0000000000000000),
(0.0046386718750000),
(0.0000000000000000),
(0.0039062500000000),
(0.0000000000000000),
(0.0164184570312500),
(0.0000000000000000),
(0.0040283203125000),
(0.0000000000000000),
(0.0000610351562500),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000724792480469),
(0.0000000000000000),
(0.0047836303710938),
(0.0000000000000000),
(0.0194969177246094),
(0.0000000000000000),
(0.0046386718750000),
(0.0000000000000000),
(0.0055084228515625),
(0.0000000000000000),
(0.0052185058593750),
(0.0000000000000000),
(0.0055084228515625),
(0.0000000000000000),
(0.0046386718750000),
(0.0000000000000000),
(0.0194969177246094),
(0.0000000000000000),
(0.0047836303710938),
(0.0000000000000000),
(0.0000724792480469),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000686645507812),
(0.0000000000000000),
(0.0045318603515625),
(0.0000000000000000),
(0.0184707641601562),
(0.0000000000000000),
(0.0043945312500000),
(0.0000000000000000),
(0.0052185058593750),
(0.0000000000000000),
(0.0049438476562500),
(0.0000000000000000),
(0.0052185058593750),
(0.0000000000000000),
(0.0043945312500000),
(0.0000000000000000),
(0.0184707641601562),
(0.0000000000000000),
(0.0045318603515625),
(0.0000000000000000),
(0.0000686645507812),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000724792480469),
(0.0000000000000000),
(0.0047836303710938),
(0.0000000000000000),
(0.0194969177246094),
(0.0000000000000000),
(0.0046386718750000),
(0.0000000000000000),
(0.0055084228515625),
(0.0000000000000000),
(0.0052185058593750),
(0.0000000000000000),
(0.0055084228515625),
(0.0000000000000000),
(0.0046386718750000),
(0.0000000000000000),
(0.0194969177246094),
(0.0000000000000000),
(0.0047836303710938),
(0.0000000000000000),
(0.0000724792480469),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000610351562500),
(0.0000000000000000),
(0.0040283203125000),
(0.0000000000000000),
(0.0164184570312500),
(0.0000000000000000),
(0.0039062500000000),
(0.0000000000000000),
(0.0046386718750000),
(0.0000000000000000),
(0.0043945312500000),
(0.0000000000000000),
(0.0046386718750000),
(0.0000000000000000),
(0.0039062500000000),
(0.0000000000000000),
(0.0164184570312500),
(0.0000000000000000),
(0.0040283203125000),
(0.0000000000000000),
(0.0000610351562500),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0002565383911133),
(0.0000000000000000),
(0.0169315338134766),
(0.0000000000000000),
(0.0690088272094727),
(0.0000000000000000),
(0.0164184570312500),
(0.0000000000000000),
(0.0194969177246094),
(0.0000000000000000),
(0.0184707641601562),
(0.0000000000000000),
(0.0194969177246094),
(0.0000000000000000),
(0.0164184570312500),
(0.0000000000000000),
(0.0690088272094727),
(0.0000000000000000),
(0.0169315338134766),
(0.0000000000000000),
(0.0002565383911133),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000629425048828),
(0.0000000000000000),
(0.0041542053222656),
(0.0000000000000000),
(0.0169315338134766),
(0.0000000000000000),
(0.0040283203125000),
(0.0000000000000000),
(0.0047836303710938),
(0.0000000000000000),
(0.0045318603515625),
(0.0000000000000000),
(0.0047836303710938),
(0.0000000000000000),
(0.0040283203125000),
(0.0000000000000000),
(0.0169315338134766),
(0.0000000000000000),
(0.0041542053222656),
(0.0000000000000000),
(0.0000629425048828),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000000000000000),
(0.0000009536743164),
(0.0000000000000000),
(0.0000629425048828),
(0.0000000000000000),
(0.0002565383911133),
(0.0000000000000000),
(0.0000610351562500),
(0.0000000000000000),
(0.0000724792480469),
(0.0000000000000000),
(0.0000686645507812),
(0.0000000000000000),
(0.0000724792480469),
(0.0000000000000000),
(0.0000610351562500),
(0.0000000000000000),
(0.0002565383911133),
(0.0000000000000000),
(0.0000629425048828),
(0.0000000000000000),
(0.0000009536743164),
])
    returnVector.shape=(441,1)
    return returnVector    



def create_STAGGERED1D_test_vector():
    returnVector=np.array([ 
(0.0000000000000000),
(0.0000549936666276),
(0.0000183312222089),
(0.0059576472154581),
(0.0012037502578666),
(0.0660229519292342),
(0.0039697280056109),
(0.0460011836530507),
(0.0085172289756772),
(0.0833513883181551),
(0.0548977104819627),
(0.0826634015845109),
(0.0015413314071136),
(0.0074797421425034),
(0.0135106891020742),
(0.0572762934461527),
(0.0074373632365878),
(0.0075515247639897),
(0.0174388400552259),
(0.0248006544194311),
(0.0103052444385276),
(0.0103052444385276),
(0.0248006544194311),
(0.0174388400552259),
(0.0075515247639897),
(0.0074373632365878),
(0.0572762934461527),
(0.0135106891020742),
(0.0074797421425034),
(0.0015413314071136),
(0.0826634015845109),
(0.0548977104819627),
(0.0833513883181550),
(0.0085172289756773),
(0.0460011836530507),
(0.0039697280056109),
(0.0660229519292342),
(0.0012037502578666),
(0.0059576472154581),
(0.0000183312222089),
(0.0000549936666276),
(0.0000000000000000)
])
    returnVector.shape=(42,1)
    return returnVector

def create_STAGGERED2D_test_vector():
    returnVector=np.array([ 
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000152587890113),
( 0.0000152587890113),
( 0.0005645751934178),
( 0.0005645751934178),
( 0.0039825439319468),
( 0.0039825439319468),
( 0.0095367431320566),
( 0.0095367431320566),
( 0.0095367431320566),
( 0.0095367431320566),
( 0.0039825439319468),
( 0.0039825439319468),
( 0.0005645751934178),
( 0.0005645751934178),
( 0.0000152587890113),
( 0.0000152587890113),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000152587890113),
( 0.0000152587890113),
( 0.0002593994131919),
( 0.0002593994131919),
( 0.0006256103494629),
( 0.0006256103494629),
( 0.0003814697252823),
( 0.0003814697252823),
( 0.0003814697252823),
( 0.0003814697252823),
( 0.0006256103494629),
( 0.0006256103494629),
( 0.0002593994131919),
( 0.0002593994131919),
( 0.0000152587890113),
( 0.0000152587890113),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0005645751934178),
( 0.0002593994131919),
( 0.0053863525209856),
( 0.0017852783143210),
( 0.0041046142440372),
( 0.0003814697252823),
( 0.0020904540945468),
( 0.0048370361165791),
( 0.0097198486001921),
( 0.0069732665781598),
( 0.0013580322220049),
( 0.0001983642571468),
( 0.0008087158175984),
( 0.0034332275275404),
( 0.0002593994131919),
( 0.0005645751934178),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0005645751934178),
( 0.0002593994131919),
( 0.0017852783143210),
( 0.0006256103494629),
( 0.0003814697252823),
( 0.0000762939450565),
( 0.0022125244066371),
( 0.0005645751934177),
( 0.0000762939450565),
( 0.0007476806615532),
( 0.0005645751934177),
( 0.0013580322220049),
( 0.0001373291011016),
( 0.0008087158175984),
( 0.0002593994131919),
( 0.0005645751934178),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0039825439319468),
( 0.0006256103494629),
( 0.0041046142440372),
( 0.0003814697252823),
( 0.0040435790879920),
( 0.0033721923714952),
( 0.0025787353429081),
( 0.0015411376901403),
( 0.0030059814352242),
( 0.0011138915978242),
( 0.0009307861296887),
( 0.0055084228330759),
( 0.0013580322220049),
( 0.0001983642571468),
( 0.0006256103494629),
( 0.0039825439319468),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0039825439319468),
( 0.0006256103494629),
( 0.0003814697252823),
( 0.0000762939450565),
( 0.0033721923714952),
( 0.0022125244066371),
( 0.0014801025340952),
( 0.0019073486264113),
( 0.0019073486264113),
( 0.0014801025340952),
( 0.0012359619099145),
( 0.0009307861296887),
( 0.0005645751934178),
( 0.0013580322220049),
( 0.0006256103494629),
( 0.0039825439319468),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0095367431320566),
( 0.0003814697252823),
( 0.0020904540945468),
( 0.0022125244066371),
( 0.0025787353429081),
( 0.0014801025340952),
( 0.0095367431320566),
( 0.0172271727937470),
( 0.0064849853297985),
( 0.0007476806615532),
( 0.0014801025340952),
( 0.0011138915978242),
( 0.0007476806615532),
( 0.0069732665781598),
( 0.0003814697252823),
( 0.0095367431320566),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0095367431320566),
( 0.0003814697252823),
( 0.0048370361165791),
( 0.0005645751934177),
( 0.0015411376901403),
( 0.0019073486264113),
( 0.0172271727937470),
( 0.1479644770424844),
( 0.0337066649259408),
( 0.0064849853297985),
( 0.0019073486264113),
( 0.0030059814352242),
( 0.0000762939450565),
( 0.0097198486001921),
( 0.0003814697252823),
( 0.0095367431320566),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0095367431320566),
( 0.0003814697252823),
( 0.0097198486001921),
( 0.0000762939450565),
( 0.0030059814352242),
( 0.0019073486264113),
( 0.0064849853297985),
( 0.0337066649259408),
( 0.1479644770424844),
( 0.0172271727937470),
( 0.0019073486264113),
( 0.0015411376901403),
( 0.0005645751934178),
( 0.0048370361165791),
( 0.0003814697252823),
( 0.0095367431320566),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0095367431320566),
( 0.0003814697252823),
( 0.0069732665781598),
( 0.0007476806615532),
( 0.0011138915978242),
( 0.0014801025340952),
( 0.0007476806615532),
( 0.0064849853297985),
( 0.0172271727937470),
( 0.0095367431320566),
( 0.0014801025340952),
( 0.0025787353429081),
( 0.0022125244066371),
( 0.0020904540945468),
( 0.0003814697252823),
( 0.0095367431320566),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0039825439319468),
( 0.0006256103494629),
( 0.0013580322220049),
( 0.0005645751934177),
( 0.0009307861296887),
( 0.0012359619099145),
( 0.0014801025340952),
( 0.0019073486264113),
( 0.0019073486264113),
( 0.0014801025340952),
( 0.0022125244066371),
( 0.0033721923714952),
( 0.0000762939450565),
( 0.0003814697252823),
( 0.0006256103494629),
( 0.0039825439319468),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0039825439319468),
( 0.0006256103494629),
( 0.0001983642571468),
( 0.0013580322220049),
( 0.0055084228330759),
( 0.0009307861296887),
( 0.0011138915978242),
( 0.0030059814352242),
( 0.0015411376901403),
( 0.0025787353429081),
( 0.0033721923714952),
( 0.0040435790879920),
( 0.0003814697252823),
( 0.0041046142440372),
( 0.0006256103494629),
( 0.0039825439319468),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0005645751934178),
( 0.0002593994131919),
( 0.0008087158175984),
( 0.0001373291011016),
( 0.0013580322220049),
( 0.0005645751934178),
( 0.0007476806615532),
( 0.0000762939450565),
( 0.0005645751934177),
( 0.0022125244066371),
( 0.0000762939450565),
( 0.0003814697252823),
( 0.0006256103494629),
( 0.0017852783143210),
( 0.0002593994131919),
( 0.0005645751934178),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0005645751934178),
( 0.0002593994131919),
( 0.0034332275275404),
( 0.0008087158175984),
( 0.0001983642571468),
( 0.0013580322220049),
( 0.0069732665781598),
( 0.0097198486001921),
( 0.0048370361165791),
( 0.0020904540945468),
( 0.0003814697252823),
( 0.0041046142440372),
( 0.0017852783143210),
( 0.0053863525209856),
( 0.0002593994131919),
( 0.0005645751934178),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000152587890113),
( 0.0000152587890113),
( 0.0002593994131919),
( 0.0002593994131919),
( 0.0006256103494629),
( 0.0006256103494629),
( 0.0003814697252823),
( 0.0003814697252823),
( 0.0003814697252823),
( 0.0003814697252823),
( 0.0006256103494629),
( 0.0006256103494629),
( 0.0002593994131919),
( 0.0002593994131919),
( 0.0000152587890113),
( 0.0000152587890113),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000152587890113),
( 0.0000152587890113),
( 0.0005645751934178),
( 0.0005645751934178),
( 0.0039825439319468),
( 0.0039825439319468),
( 0.0095367431320566),
( 0.0095367431320566),
( 0.0095367431320566),
( 0.0095367431320566),
( 0.0039825439319468),
( 0.0039825439319468),
( 0.0005645751934178),
( 0.0005645751934178),
( 0.0000152587890113),
( 0.0000152587890113),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000),
( 0.0000000000000000)
])
    returnVector.shape=(324,1)
    return returnVector



def writeInputs_TEST():
    f=open("coined1D_test.in","w")
    f.write("WALK DTQW\n")
    f.write("DIRECTORY DIR_DTQW1D\n")
    f.write("STEPS 10\n")
    f.write("GRAPH LINE\n")
    f.write("BEGINCOIN\n")
    f.write("HADAMARD 2\n")
    f.write("ENDCOIN\n")
    f.write("BEGINSTATE\n")
    f.write("0.70710678 0 0 0\n")
    f.write("0 -0.70710678 1 0\n")
    f.write("ENDSTATE\n")
    f.write("HARDWAREID 0\n")
    f.write("PLOTS TRUE\n")
    f.write("ANIMATION TRUE\n")
    f.write("ALLSTATES 10\n")
    f.close()
    
    f=open("coined2D_test.in","w")
    f.write("WALK DTQW\n")
    f.write("DIRECTORY DIR_DTQW2D\n")
    f.write("STEPS 10\n")
    f.write("GRAPH LATTICE\n")
    f.write("BEGINCOIN\n")
    f.write("HADAMARD 4\n")
    f.write("ENDCOIN\n")
    f.write("BEGINSTATE\n")
    f.write("0.5 0 0 0 0\n")
    f.write("0 0.5 1 0 0\n")
    f.write("0 0.5 2 0 0\n")
    f.write("-0.5 0 3 0 0\n")
    f.write("ENDSTATE\n")
    f.write("HARDWAREID 0\n")
    f.write("PLOTS TRUE\n")
    f.write("ALLSTATES 2\n")
    f.close()


    f=open("staggered1D_test.in","w")
    f.write("WALK STAGGERED\n")
    f.write("DIRECTORY DIR_STAGGERED1D\n")
    f.write("STEPS 10\n")
    f.write("GRAPH LINE\n")
    f.write("POLYGONS 2\n")
    f.write("DISPLACEMENT 1\n")
    f.write("BEGINSTATE\n")
    f.write("0.70710678 0 0\n")
    f.write("0 0.70710678 1\n")
    f.write("ENDSTATE\n")
    f.write("BEGINTESSELLATION\n")
    f.write("0.92387953249166432 0 0.3826834324124625 0\n")
    f.write("0.50000000000147327 0 0.86602540378358805 0\n")
    f.write("ENDTESSELLATION\n")
    f.write("HARDWAREID 0\n")
    f.write("PLOTS FALSE\n")
    f.close()


    f=open("staggered2D_test.in","w")
    f.write("WALK STAGGERED\n")
    f.write("DIRECTORY DIR_STAGGERED2D\n")
    f.write("STEPS 4\n")
    f.write("GRAPH LATTICE\n")
    f.write("POLYGONS 2 2\n")
    f.write("DISPLACEMENT 1 1\n")
    f.write("BEGINSTATE\n")
    f.write("0.70710678 0 0 0\n")
    f.write("0 0.70710678 1 1\n")
    f.write("ENDSTATE\n")
    f.write("BEGINTESSELLATION\n")
    f.write("0.5 0 0.5 0 0.5 0 0.5 0\n")
    f.write("0.5 0 0.5 0 0.5 0 0.5 0\n")
    f.write("ENDTESSELLATION\n")
    f.write("HARDWAREID 0\n")
    f.write("PLOTS FALSE\n")
    f.close()


    f=open("u0.dat","w")
    f.write("1 1 1 0\n2 2 1 0\n3 3 1 0\n4 4 1 0\n5 5 1 0\n6 6 1 0\n7 7 1 0\n8 8 1 0\n9 9 1 0\n10 10 1 0\n")
    f.close()

    f=open("u1.dat","w")
    f.write("1 2 1 0\n2 3 1 0\n3 4 1 0\n4 5 1 0\n5 6 1 0\n6 7 1 0\n7 8 1 0\n8 9 1 0\n9 10 1 0\n10 1 1 0\n")
    f.close()
    
    f=open("psi0.dat","w")
    f.write("1 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n0 0\n")
    f.close()

    f=open("custom_test.in","w")
    f.write("WALK CUSTOM\n")
    f.write("STEPS 9\n")
    f.write("DIRECTORY DIR_CUSTOM\n")
    f.write("INITIALSTATE psi0.dat\n")
    f.write("UNITARY u0.dat u1.dat\n")
    f.write("HARDWAREID 0\n")
    f.write("ALLSTATES 1\n")
    f.close()
    
def run():
    print("[Hiperwalk] Test mode!")

    cfg.TEST_MODE=1
    devnull = open(os.devnull, 'w')

    orig_out = sys.stdout

    
    io.test_mode()    
    writeInputs_TEST()
    returnValue=1
    sys.stdout =devnull 
    returnValue=subprocess.call(["neblina", "-l"],stdout=devnull,stderr=devnull)
    sys.stdout = orig_out
    if not returnValue:
        print("[Hiperwalk] Neblina installed.")
    else:
        print("[Hiperwalk] Neblina failed to execute.")
        exit(-1)
        
        
        
    cfg.reset()
    inputFile=str(os.path.abspath("coined1D_test.in"))
    sys.stdout =devnull
    returnValue=walks.walk(inputFile)        
    sys.stdout = orig_out
    if returnValue:
        print("[Hiperwalk] DTQW on the line OK.")
    else:
        print("[Hiperwalk] DTQW on the line failed.")




    cfg.reset()
    inputFile=str(os.path.abspath("coined2D_test.in"))
    sys.stdout = devnull
    returnValue=walks.walk(inputFile)        
    sys.stdout = orig_out
    if returnValue:
        print("[Hiperwalk] DTQW on the lattice OK.")
    else:
        print("[Hiperwalk] DTQW on the lattice failed.")




    cfg.reset()
    inputFile=str(os.path.abspath("staggered1D_test.in"))
    sys.stdout = devnull
    returnValue=walks.walk(inputFile)        
    sys.stdout = orig_out
    if returnValue:
        print("[Hiperwalk] STAGGERED on the line OK.")
    else:
        print("[Hiperwalk] STAGGERED on the line failed.")
        
    cfg.reset()
    inputFile=str(os.path.abspath("staggered2D_test.in"))
    sys.stdout = devnull
    returnValue=walks.walk(inputFile)        
    sys.stdout = orig_out
    if returnValue:
        print("[Hiperwalk] STAGGERED on the lattice OK.")
    else:
        print("[Hiperwalk] STAGGERED on the lattice failed.")


    
    cfg.reset()    
    inputFile=str(os.path.abspath("custom_test.in"))
    sys.stdout = devnull
    returnValue=walks.walk(inputFile)   
    sys.stdout = orig_out
    if returnValue:
        print("[Hiperwalk] CUSTOM WALK OK.")
    else:
        print("[Hiperwalk] CUSTOM WALK failed.")    
    
    
    io.remnove_test_mode_folder()
#    print("[Hiperwalk] Files stored at %s/HIPERWALK_TEST_DIRECTORY"%(os.environ['HOME']))