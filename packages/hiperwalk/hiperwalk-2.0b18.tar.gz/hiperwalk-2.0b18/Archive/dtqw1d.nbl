-- core.nbl
using io
using math
using time
def stdvr(OUTPUT_FILE, STEPS,PSI, DISTANCES, DISTANCES_SQUARE,ANIMATION,GRAPHSIZE,OFFSET)


    t0 = micro()
    p = vec_conj( PSI )

    PROBABILITY_VECTOR  = vec_add_off( p,OFFSET )    

    if ANIMATION == 1    
        f = open( "NEBLINA_TEMP_PROB" + tostr(STEPS, 5) + ".dat", "w" )
        print( f, PROBABILITY_VECTOR )
    end

    tmp = vec_prod( DISTANCES_SQUARE, PROBABILITY_VECTOR )

    s1  = vec_sum( tmp )    
    tmp = vec_prod( DISTANCES, PROBABILITY_VECTOR )
    mean = vec_sum( tmp )
    stddev = sqrt(abs(s1-mean*mean))
    println( OUTPUT_FILE, STEPS  + "               " + mean + "               " + s1 + "               " + stddev )
    t1 = micro()
--    println( t1 - t0 )
end
def main()
fmtdouble( 16 )


   STEPS = toint( args[2] )
   
   STATESIZE = toint( args[3] )
   GRAPHSIZE= toint( args[4] )
   DISTANCE_VECTOR_SIZE = toint( args[5] )
   SAVE_STATES_MULTIPLE_OF_N=toint( args[6] )
   ANIMATION = toint( args[7] )
   OFFSET=toint( args[8] )

   

   file_CtI = open( "HIPERWALK_TEMP_COIN_TENSOR_IDENTITY_1D.dat", "r" )
   CtI = sparse complex[STATESIZE,STATESIZE]
   read( file_CtI, CtI )

   file_S = open( "HIPERWALK_TEMP_SHIFT_OPERATOR_1D.dat", "r" )
   S = sparse complex[STATESIZE,STATESIZE]
   read( file_S, S )

   file_psi = open( "HIPERWALK_TEMP_PSI.dat", "r" )
   PSI = complex[STATESIZE]
   read( file_psi, PSI )

   file_D = open("HIPERWALK_TEMP_RANGE_1D.dat", "r" ) 
   DISTANCES_VECTOR = float[DISTANCE_VECTOR_SIZE ]
   read( file_D, DISTANCES_VECTOR )

   DISTANCES_SQUARE = vec_prod( DISTANCES_VECTOR,DISTANCES_VECTOR)

   stdv_file = open("statistics.dat", "w" ) 
   println( stdv_file, "#STEP               Mean                                      2nd Moment                                  Standard deviation" )
   stdvr(stdv_file, 0, PSI,  DISTANCES_VECTOR  , DISTANCES_SQUARE, ANIMATION,GRAPHSIZE,OFFSET)
   for t = 1 : STEPS
           PSI = mat_mulvec( CtI, PSI )
           PSI = mat_mulvec( S, PSI )
           if SAVE_STATES_MULTIPLE_OF_N > 0 
               a=t % SAVE_STATES_MULTIPLE_OF_N 
               if a == 0 
                   f = open( "wavefunction-" + tostr(t) + ".dat", "w" )
                   print( f, PSI )
                   stdvr(stdv_file, t, PSI,  DISTANCES_VECTOR  , DISTANCES_SQUARE, ANIMATION,GRAPHSIZE,OFFSET)
               end
	   else
                   stdvr(stdv_file, t, PSI,  DISTANCES_VECTOR  , DISTANCES_SQUARE, ANIMATION,GRAPHSIZE,OFFSET)
	   end
   end  
  PROBABILITY_VECTOR = vec_conj( PSI )
   <<< PSI, PROBABILITY_VECTOR 
   final_prob = vec_add_off( PROBABILITY_VECTOR , OFFSET )
   println( "[NEBLINA] Statistics file: .............. statistics.dat" )
   final_state_neblina = open("NEBLINA_TEMP_final_state.dat", "w")
   println( final_state_neblina, PSI )
   final_distribution_neblina = open("NEBLINA_TEMP_final_distribution.dat", "w")
   println( final_distribution_neblina, final_prob )
   println( "[NEBLINA] Wave Function final : .............. final_state.dat" )
   println( "[NEBLINA] Done!")
end
