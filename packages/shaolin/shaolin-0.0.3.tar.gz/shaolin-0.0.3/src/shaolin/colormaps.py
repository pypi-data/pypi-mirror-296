import colorcet
from matplotlib import cm
import panel as pn
import param


mpl_colormap_names = [
    "Accent",
    "Accent_r",
    "Blues",
    "Blues_r",
    "BrBG",
    "BrBG_r",
    "BuGn",
    "BuGn_r",
    "BuPu",
    "BuPu_r",
    "CMRmap",
    "CMRmap_r",
    "Dark2",
    "Dark2_r",
    "GnBu",
    "GnBu_r",
    "Grays",
    "Greens",
    "Greens_r",
    "Greys",
    "Greys_r",
    "OrRd",
    "OrRd_r",
    "Oranges",
    "Oranges_r",
    "PRGn",
    "PRGn_r",
    "Paired",
    "Paired_r",
    "Pastel1",
    "Pastel1_r",
    "Pastel2",
    "Pastel2_r",
    "PiYG",
    "PiYG_r",
    "PuBu",
    "PuBuGn",
    "PuBuGn_r",
    "PuBu_r",
    "PuOr",
    "PuOr_r",
    "PuRd",
    "PuRd_r",
    "Purples",
    "Purples_r",
    "RdBu",
    "RdBu_r",
    "RdGy",
    "RdGy_r",
    "RdPu",
    "RdPu_r",
    "RdYlBu",
    "RdYlBu_r",
    "RdYlGn",
    "RdYlGn_r",
    "Reds",
    "Reds_r",
    "Set1",
    "Set1_r",
    "Set2",
    "Set2_r",
    "Set3",
    "Set3_r",
    "Spectral",
    "Spectral_r",
    "Wistia",
    "Wistia_r",
    "YlGn",
    "YlGnBu",
    "YlGnBu_r",
    "YlGn_r",
    "YlOrBr",
    "YlOrBr_r",
    "YlOrRd",
    "YlOrRd_r",
    "afmhot",
    "afmhot_r",
    "autumn",
    "autumn_r",
    "binary",
    "binary_r",
    "bone",
    "bone_r",
    "brg",
    "brg_r",
    "bwr",
    "bwr_r",
    "cividis",
    "cividis_r",
    "cool",
    "cool_r",
    "coolwarm",
    "coolwarm_r",
    "copper",
    "copper_r",
    "cubehelix",
    "cubehelix_r",
    "flag",
    "flag_r",
    "gist_earth",
    "gist_earth_r",
    "gist_gray",
    "gist_gray_r",
    "gist_grey",
    "gist_heat",
    "gist_heat_r",
    "gist_ncar",
    "gist_ncar_r",
    "gist_rainbow",
    "gist_rainbow_r",
    "gist_stern",
    "gist_stern_r",
    "gist_yarg",
    "gist_yarg_r",
    "gist_yerg",
    "gnuplot",
    "gnuplot2",
    "gnuplot2_r",
    "gnuplot_r",
    "gray",
    "gray_r",
    "grey",
    "hot",
    "hot_r",
    "hsv",
    "hsv_r",
    "inferno",
    "inferno_r",
    "jet",
    "jet_r",
    "magma",
    "magma_r",
    "nipy_spectral",
    "nipy_spectral_r",
    "ocean",
    "ocean_r",
    "pink",
    "pink_r",
    "plasma",
    "plasma_r",
    "prism",
    "prism_r",
    "rainbow",
    "rainbow_r",
    "seismic",
    "seismic_r",
    "spring",
    "spring_r",
    "summer",
    "summer_r",
    "tab10",
    "tab10_r",
    "tab20",
    "tab20_r",
    "tab20b",
    "tab20b_r",
    "tab20c",
    "tab20c_r",
    "terrain",
    "terrain_r",
    "turbo",
    "turbo_r",
    "twilight",
    "twilight_r",
    "twilight_shifted",
    "twilight_shifted_r",
    "viridis",
    "viridis_r",
    "winter",
    "winter_r",
]

mpl_cmaps = {k: getattr(cm, k) for k in mpl_colormap_names}
all_cmaps = {**mpl_cmaps, **colorcet.palette}
all_cmaps = {k: all_cmaps[k] for k in sorted(all_cmaps.keys())}


class ColorMap(param.Parameterized):
    """ColorMap widget."""

    all_cmaps = all_cmaps
    value = param.ClassSelector(class_=object)

    def __init__(self, default="viridis", name="Colormap Name", max_len_name: int = 30):
        super().__init__()
        self.default = default
        self.autocomplete = pn.widgets.AutocompleteInput(
            name=name,
            options=list(self.all_cmaps.keys()),
            case_sensitive=False,
            search_strategy="includes",
            placeholder="Search colormap",
            width=150,
        )
        self.max_len_name = max_len_name
        options = {k[: self.max_len_name]: v for k, v in self.all_cmaps.items()}
        self.cmap_widget = pn.widgets.ColorMap(
            name="Colormap",
            value=self.all_cmaps.get(default),
            options=options,
            ncols=1,
            swatch_width=100,
            margin=(5, 0, 100, 0),
        )

    @param.depends("autocomplete.value")
    def update_cmap_widget(self):
        if self.autocomplete.value:
            # self.cmap_widget.value = self.autocomplete.value[:self.max_len_name]
            self.cmap_widget.value = self.all_cmaps[self.autocomplete.value]

    @param.depends("cmap_widget.value")
    def update_value(self):
        self.value = self.cmap_widget.value

    def view(self):
        return pn.Row(
            self.cmap_widget,
            self.autocomplete,
            self.update_cmap_widget,
            self.update_value,
            scroll=True,
            min_width=400,
        )
