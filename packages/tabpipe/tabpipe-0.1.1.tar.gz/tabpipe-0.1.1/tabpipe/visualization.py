from graphlib import TopologicalSorter
from typing import List, Optional

from graphviz import Digraph
from IPython.display import Image

from tabpipe.exceptions import NotFittedError
from tabpipe.feature import Feature
from tabpipe.pipeline import Pipeline
from tabpipe.transformations import PassThrough


def visualize_pipeline(pipeline: Pipeline, filename: Optional[str] = None) -> Image:
    """Visualize a pipeline.

    Args:
        pipeline: The pipeline to visualize.
        filename: The filename to save the visualization to. If None, the visualization
            will be displayed.
    """
    if not pipeline.is_fit:
        raise NotFittedError(pipeline)

    input_cluster = 'cluster_input'
    output_cluster = 'cluster_output'

    dot = Digraph(node_attr={'shape': 'record'})
    with dot.subgraph(name=input_cluster) as sub:
        sub.attr(label='Input')

    with dot.subgraph(name=output_cluster) as sub:
        sub.attr(label='Output')
        sub.attr(style='filled', color='lightgrey')

    for transformation_name in TopologicalSorter(pipeline.dag).static_order():
        transformation = pipeline.transformations[transformation_name]

        input_features: List[str] = transformation.input
        output_features: List[Feature] = transformation.output

        dot.node(
            f"transformation-{transformation_name}",
            shape='diamond',
            label=transformation_name,
        )

        for i in input_features:
            t = pipeline.transformations.get(
                pipeline._source_transformation.get(i, ""), None
            )
            # Not generated by any transformation
            if t is None or isinstance(t, PassThrough):
                with dot.subgraph(name=input_cluster) as sub:
                    sub.node(f"in-feature-{i}", label=i)

            dot.edge(f"in-feature-{i}", f"transformation-{transformation_name}")

        for o in output_features:
            with dot.subgraph(name=output_cluster) as sub:
                sub.node(f"out-feature-{o.name}", label=o.name)
            dot.edge(f"transformation-{transformation_name}", f"out-feature-{o.name}")

    if filename is not None:
        dot.render(filename, format='png', cleanup=True)
        return Image(f'{filename}.png')
    else:
        return Image(dot.pipe(format='png'))
