# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['ProjectArgs', 'Project']

@pulumi.input_type
class ProjectArgs:
    def __init__(__self__, *,
                 applications: Optional[pulumi.Input['ProjectApplicationsArgs']] = None,
                 attributes: Optional[pulumi.Input['ProjectAttributesArgs']] = None,
                 authentication: Optional[pulumi.Input['ProjectAuthenticationArgs']] = None,
                 authorization: Optional[pulumi.Input['ProjectAuthorizationArgs']] = None,
                 connectors: Optional[pulumi.Input['ProjectConnectorsArgs']] = None,
                 flows: Optional[pulumi.Input[Mapping[str, pulumi.Input['ProjectFlowsArgs']]]] = None,
                 jwt_templates: Optional[pulumi.Input['ProjectJwtTemplatesArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_settings: Optional[pulumi.Input['ProjectProjectSettingsArgs']] = None,
                 styles: Optional[pulumi.Input['ProjectStylesArgs']] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a Project resource.
        """
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if connectors is not None:
            pulumi.set(__self__, "connectors", connectors)
        if flows is not None:
            pulumi.set(__self__, "flows", flows)
        if jwt_templates is not None:
            pulumi.set(__self__, "jwt_templates", jwt_templates)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_settings is not None:
            pulumi.set(__self__, "project_settings", project_settings)
        if styles is not None:
            pulumi.set(__self__, "styles", styles)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input['ProjectApplicationsArgs']]:
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input['ProjectApplicationsArgs']]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input['ProjectAttributesArgs']]:
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input['ProjectAttributesArgs']]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['ProjectAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['ProjectAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input['ProjectAuthorizationArgs']]:
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input['ProjectAuthorizationArgs']]):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter
    def connectors(self) -> Optional[pulumi.Input['ProjectConnectorsArgs']]:
        return pulumi.get(self, "connectors")

    @connectors.setter
    def connectors(self, value: Optional[pulumi.Input['ProjectConnectorsArgs']]):
        pulumi.set(self, "connectors", value)

    @property
    @pulumi.getter
    def flows(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ProjectFlowsArgs']]]]:
        return pulumi.get(self, "flows")

    @flows.setter
    def flows(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ProjectFlowsArgs']]]]):
        pulumi.set(self, "flows", value)

    @property
    @pulumi.getter(name="jwtTemplates")
    def jwt_templates(self) -> Optional[pulumi.Input['ProjectJwtTemplatesArgs']]:
        return pulumi.get(self, "jwt_templates")

    @jwt_templates.setter
    def jwt_templates(self, value: Optional[pulumi.Input['ProjectJwtTemplatesArgs']]):
        pulumi.set(self, "jwt_templates", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectSettings")
    def project_settings(self) -> Optional[pulumi.Input['ProjectProjectSettingsArgs']]:
        return pulumi.get(self, "project_settings")

    @project_settings.setter
    def project_settings(self, value: Optional[pulumi.Input['ProjectProjectSettingsArgs']]):
        pulumi.set(self, "project_settings", value)

    @property
    @pulumi.getter
    def styles(self) -> Optional[pulumi.Input['ProjectStylesArgs']]:
        return pulumi.get(self, "styles")

    @styles.setter
    def styles(self, value: Optional[pulumi.Input['ProjectStylesArgs']]):
        pulumi.set(self, "styles", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


@pulumi.input_type
class _ProjectState:
    def __init__(__self__, *,
                 applications: Optional[pulumi.Input['ProjectApplicationsArgs']] = None,
                 attributes: Optional[pulumi.Input['ProjectAttributesArgs']] = None,
                 authentication: Optional[pulumi.Input['ProjectAuthenticationArgs']] = None,
                 authorization: Optional[pulumi.Input['ProjectAuthorizationArgs']] = None,
                 connectors: Optional[pulumi.Input['ProjectConnectorsArgs']] = None,
                 flows: Optional[pulumi.Input[Mapping[str, pulumi.Input['ProjectFlowsArgs']]]] = None,
                 jwt_templates: Optional[pulumi.Input['ProjectJwtTemplatesArgs']] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_settings: Optional[pulumi.Input['ProjectProjectSettingsArgs']] = None,
                 styles: Optional[pulumi.Input['ProjectStylesArgs']] = None,
                 tag: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering Project resources.
        """
        if applications is not None:
            pulumi.set(__self__, "applications", applications)
        if attributes is not None:
            pulumi.set(__self__, "attributes", attributes)
        if authentication is not None:
            pulumi.set(__self__, "authentication", authentication)
        if authorization is not None:
            pulumi.set(__self__, "authorization", authorization)
        if connectors is not None:
            pulumi.set(__self__, "connectors", connectors)
        if flows is not None:
            pulumi.set(__self__, "flows", flows)
        if jwt_templates is not None:
            pulumi.set(__self__, "jwt_templates", jwt_templates)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if project_settings is not None:
            pulumi.set(__self__, "project_settings", project_settings)
        if styles is not None:
            pulumi.set(__self__, "styles", styles)
        if tag is not None:
            pulumi.set(__self__, "tag", tag)

    @property
    @pulumi.getter
    def applications(self) -> Optional[pulumi.Input['ProjectApplicationsArgs']]:
        return pulumi.get(self, "applications")

    @applications.setter
    def applications(self, value: Optional[pulumi.Input['ProjectApplicationsArgs']]):
        pulumi.set(self, "applications", value)

    @property
    @pulumi.getter
    def attributes(self) -> Optional[pulumi.Input['ProjectAttributesArgs']]:
        return pulumi.get(self, "attributes")

    @attributes.setter
    def attributes(self, value: Optional[pulumi.Input['ProjectAttributesArgs']]):
        pulumi.set(self, "attributes", value)

    @property
    @pulumi.getter
    def authentication(self) -> Optional[pulumi.Input['ProjectAuthenticationArgs']]:
        return pulumi.get(self, "authentication")

    @authentication.setter
    def authentication(self, value: Optional[pulumi.Input['ProjectAuthenticationArgs']]):
        pulumi.set(self, "authentication", value)

    @property
    @pulumi.getter
    def authorization(self) -> Optional[pulumi.Input['ProjectAuthorizationArgs']]:
        return pulumi.get(self, "authorization")

    @authorization.setter
    def authorization(self, value: Optional[pulumi.Input['ProjectAuthorizationArgs']]):
        pulumi.set(self, "authorization", value)

    @property
    @pulumi.getter
    def connectors(self) -> Optional[pulumi.Input['ProjectConnectorsArgs']]:
        return pulumi.get(self, "connectors")

    @connectors.setter
    def connectors(self, value: Optional[pulumi.Input['ProjectConnectorsArgs']]):
        pulumi.set(self, "connectors", value)

    @property
    @pulumi.getter
    def flows(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input['ProjectFlowsArgs']]]]:
        return pulumi.get(self, "flows")

    @flows.setter
    def flows(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input['ProjectFlowsArgs']]]]):
        pulumi.set(self, "flows", value)

    @property
    @pulumi.getter(name="jwtTemplates")
    def jwt_templates(self) -> Optional[pulumi.Input['ProjectJwtTemplatesArgs']]:
        return pulumi.get(self, "jwt_templates")

    @jwt_templates.setter
    def jwt_templates(self, value: Optional[pulumi.Input['ProjectJwtTemplatesArgs']]):
        pulumi.set(self, "jwt_templates", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="projectSettings")
    def project_settings(self) -> Optional[pulumi.Input['ProjectProjectSettingsArgs']]:
        return pulumi.get(self, "project_settings")

    @project_settings.setter
    def project_settings(self, value: Optional[pulumi.Input['ProjectProjectSettingsArgs']]):
        pulumi.set(self, "project_settings", value)

    @property
    @pulumi.getter
    def styles(self) -> Optional[pulumi.Input['ProjectStylesArgs']]:
        return pulumi.get(self, "styles")

    @styles.setter
    def styles(self, value: Optional[pulumi.Input['ProjectStylesArgs']]):
        pulumi.set(self, "styles", value)

    @property
    @pulumi.getter
    def tag(self) -> Optional[pulumi.Input[str]]:
        return pulumi.get(self, "tag")

    @tag.setter
    def tag(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "tag", value)


class Project(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applications: Optional[pulumi.Input[Union['ProjectApplicationsArgs', 'ProjectApplicationsArgsDict']]] = None,
                 attributes: Optional[pulumi.Input[Union['ProjectAttributesArgs', 'ProjectAttributesArgsDict']]] = None,
                 authentication: Optional[pulumi.Input[Union['ProjectAuthenticationArgs', 'ProjectAuthenticationArgsDict']]] = None,
                 authorization: Optional[pulumi.Input[Union['ProjectAuthorizationArgs', 'ProjectAuthorizationArgsDict']]] = None,
                 connectors: Optional[pulumi.Input[Union['ProjectConnectorsArgs', 'ProjectConnectorsArgsDict']]] = None,
                 flows: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['ProjectFlowsArgs', 'ProjectFlowsArgsDict']]]]] = None,
                 jwt_templates: Optional[pulumi.Input[Union['ProjectJwtTemplatesArgs', 'ProjectJwtTemplatesArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_settings: Optional[pulumi.Input[Union['ProjectProjectSettingsArgs', 'ProjectProjectSettingsArgsDict']]] = None,
                 styles: Optional[pulumi.Input[Union['ProjectStylesArgs', 'ProjectStylesArgsDict']]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Create a Project resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[ProjectArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Create a Project resource with the given unique name, props, and options.
        :param str resource_name: The name of the resource.
        :param ProjectArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(ProjectArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 applications: Optional[pulumi.Input[Union['ProjectApplicationsArgs', 'ProjectApplicationsArgsDict']]] = None,
                 attributes: Optional[pulumi.Input[Union['ProjectAttributesArgs', 'ProjectAttributesArgsDict']]] = None,
                 authentication: Optional[pulumi.Input[Union['ProjectAuthenticationArgs', 'ProjectAuthenticationArgsDict']]] = None,
                 authorization: Optional[pulumi.Input[Union['ProjectAuthorizationArgs', 'ProjectAuthorizationArgsDict']]] = None,
                 connectors: Optional[pulumi.Input[Union['ProjectConnectorsArgs', 'ProjectConnectorsArgsDict']]] = None,
                 flows: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['ProjectFlowsArgs', 'ProjectFlowsArgsDict']]]]] = None,
                 jwt_templates: Optional[pulumi.Input[Union['ProjectJwtTemplatesArgs', 'ProjectJwtTemplatesArgsDict']]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 project_settings: Optional[pulumi.Input[Union['ProjectProjectSettingsArgs', 'ProjectProjectSettingsArgsDict']]] = None,
                 styles: Optional[pulumi.Input[Union['ProjectStylesArgs', 'ProjectStylesArgsDict']]] = None,
                 tag: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = ProjectArgs.__new__(ProjectArgs)

            __props__.__dict__["applications"] = applications
            __props__.__dict__["attributes"] = attributes
            __props__.__dict__["authentication"] = authentication
            __props__.__dict__["authorization"] = authorization
            __props__.__dict__["connectors"] = connectors
            __props__.__dict__["flows"] = flows
            __props__.__dict__["jwt_templates"] = jwt_templates
            __props__.__dict__["name"] = name
            __props__.__dict__["project_settings"] = project_settings
            __props__.__dict__["styles"] = styles
            __props__.__dict__["tag"] = tag
        super(Project, __self__).__init__(
            'descope:index/project:Project',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            applications: Optional[pulumi.Input[Union['ProjectApplicationsArgs', 'ProjectApplicationsArgsDict']]] = None,
            attributes: Optional[pulumi.Input[Union['ProjectAttributesArgs', 'ProjectAttributesArgsDict']]] = None,
            authentication: Optional[pulumi.Input[Union['ProjectAuthenticationArgs', 'ProjectAuthenticationArgsDict']]] = None,
            authorization: Optional[pulumi.Input[Union['ProjectAuthorizationArgs', 'ProjectAuthorizationArgsDict']]] = None,
            connectors: Optional[pulumi.Input[Union['ProjectConnectorsArgs', 'ProjectConnectorsArgsDict']]] = None,
            flows: Optional[pulumi.Input[Mapping[str, pulumi.Input[Union['ProjectFlowsArgs', 'ProjectFlowsArgsDict']]]]] = None,
            jwt_templates: Optional[pulumi.Input[Union['ProjectJwtTemplatesArgs', 'ProjectJwtTemplatesArgsDict']]] = None,
            name: Optional[pulumi.Input[str]] = None,
            project_settings: Optional[pulumi.Input[Union['ProjectProjectSettingsArgs', 'ProjectProjectSettingsArgsDict']]] = None,
            styles: Optional[pulumi.Input[Union['ProjectStylesArgs', 'ProjectStylesArgsDict']]] = None,
            tag: Optional[pulumi.Input[str]] = None) -> 'Project':
        """
        Get an existing Project resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _ProjectState.__new__(_ProjectState)

        __props__.__dict__["applications"] = applications
        __props__.__dict__["attributes"] = attributes
        __props__.__dict__["authentication"] = authentication
        __props__.__dict__["authorization"] = authorization
        __props__.__dict__["connectors"] = connectors
        __props__.__dict__["flows"] = flows
        __props__.__dict__["jwt_templates"] = jwt_templates
        __props__.__dict__["name"] = name
        __props__.__dict__["project_settings"] = project_settings
        __props__.__dict__["styles"] = styles
        __props__.__dict__["tag"] = tag
        return Project(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def applications(self) -> pulumi.Output['outputs.ProjectApplications']:
        return pulumi.get(self, "applications")

    @property
    @pulumi.getter
    def attributes(self) -> pulumi.Output['outputs.ProjectAttributes']:
        return pulumi.get(self, "attributes")

    @property
    @pulumi.getter
    def authentication(self) -> pulumi.Output['outputs.ProjectAuthentication']:
        return pulumi.get(self, "authentication")

    @property
    @pulumi.getter
    def authorization(self) -> pulumi.Output['outputs.ProjectAuthorization']:
        return pulumi.get(self, "authorization")

    @property
    @pulumi.getter
    def connectors(self) -> pulumi.Output['outputs.ProjectConnectors']:
        return pulumi.get(self, "connectors")

    @property
    @pulumi.getter
    def flows(self) -> pulumi.Output[Mapping[str, 'outputs.ProjectFlows']]:
        return pulumi.get(self, "flows")

    @property
    @pulumi.getter(name="jwtTemplates")
    def jwt_templates(self) -> pulumi.Output['outputs.ProjectJwtTemplates']:
        return pulumi.get(self, "jwt_templates")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectSettings")
    def project_settings(self) -> pulumi.Output['outputs.ProjectProjectSettings']:
        return pulumi.get(self, "project_settings")

    @property
    @pulumi.getter
    def styles(self) -> pulumi.Output['outputs.ProjectStyles']:
        return pulumi.get(self, "styles")

    @property
    @pulumi.getter
    def tag(self) -> pulumi.Output[str]:
        return pulumi.get(self, "tag")

