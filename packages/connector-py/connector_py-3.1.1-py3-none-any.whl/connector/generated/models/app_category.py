# coding: utf-8

"""
    Lumos Connectors

    The Lumos Connector API is a self-describing API which allows third-party systems to easily integrate with Lumos. It provides endpoints to retrieve information about each connector, their capabilities.  # How to use this API? To get started with the Lumos Connector API, you'll 1. want to call the `POST /list-connector-app-ids` endpoint, which gives you a list of available connector app IDs, each ID corresponds to a specific integration. 2. Once you have the relevant connector app ID, use the `POST /{connector-app-id}/info` endpoint to find out what capabilities the integration supports. This will also tell you what input parameters are needed and what output you can expect for each of the API endpoints for a specific integration.  This will be integration specific. By using this info, you can correctly format your requests and handle the responses when managing resources.

    The version of the OpenAPI document: 0.0.0
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import json
from enum import Enum
from typing_extensions import Self


class AppCategory(str, Enum):
    """
    AppCategory
    """

    """
    allowed enum values
    """
    HR_AND_LEARNING = 'HR_AND_LEARNING'
    OFFICE_AND_LEGAL = 'OFFICE_AND_LEGAL'
    SALES_AND_SUPPORT = 'SALES_AND_SUPPORT'
    COMMERCE_AND_MARKETPLACES = 'COMMERCE_AND_MARKETPLACES'
    IT_AND_SECURITY = 'IT_AND_SECURITY'
    COMMUNICATION = 'COMMUNICATION'
    DESIGN_AND_CREATIVITY = 'DESIGN_AND_CREATIVITY'
    OTHER = 'OTHER'
    MARKETING_AND_ANALYTICS = 'MARKETING_AND_ANALYTICS'
    DEVELOPERS = 'DEVELOPERS'
    ACCOUNTING_AND_FINANCE = 'ACCOUNTING_AND_FINANCE'
    COLLABORATION = 'COLLABORATION'
    CONTENT_AND_SOCIAL_MEDIA = 'CONTENT_AND_SOCIAL_MEDIA'
    INTERNAL = 'INTERNAL'

    @classmethod
    def from_json(cls, json_str: str) -> Self:
        """Create an instance of AppCategory from a JSON string"""
        return cls(json.loads(json_str))


