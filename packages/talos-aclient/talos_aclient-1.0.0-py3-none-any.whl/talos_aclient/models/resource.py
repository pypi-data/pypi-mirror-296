# coding: utf-8

"""
    Talos

    FastAPI Best Architecture

    The version of the OpenAPI document: 0.0.1
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from pydantic import BaseModel, ConfigDict, StrictInt, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from talos_aclient.models.resource_content import ResourceContent
from typing import Optional, Set
from typing_extensions import Self

class Resource(BaseModel):
    """
    Resource
    """ # noqa: E501
    id: StrictStr
    size: Optional[StrictInt] = 0
    metadata: Optional[Dict[str, Any]] = None
    page_contents: Optional[List[ResourceContent]] = None
    progress: Optional[StrictInt] = None
    status: Optional[StrictInt] = None
    total: Optional[StrictInt] = 0
    storage_url: Optional[StrictStr] = None
    extension: Optional[StrictStr] = ''
    document_meta: Optional[Dict[str, Any]] = None
    error_message: Optional[StrictStr] = ''
    segment_count: Optional[StrictInt] = 0
    __properties: ClassVar[List[str]] = ["id", "size", "metadata", "page_contents", "progress", "status", "total", "storage_url", "extension", "document_meta", "error_message", "segment_count"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of Resource from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of each item in page_contents (list)
        _items = []
        if self.page_contents:
            for _item_page_contents in self.page_contents:
                if _item_page_contents:
                    _items.append(_item_page_contents.to_dict())
            _dict['page_contents'] = _items
        # set to None if metadata (nullable) is None
        # and model_fields_set contains the field
        if self.metadata is None and "metadata" in self.model_fields_set:
            _dict['metadata'] = None

        # set to None if page_contents (nullable) is None
        # and model_fields_set contains the field
        if self.page_contents is None and "page_contents" in self.model_fields_set:
            _dict['page_contents'] = None

        # set to None if progress (nullable) is None
        # and model_fields_set contains the field
        if self.progress is None and "progress" in self.model_fields_set:
            _dict['progress'] = None

        # set to None if status (nullable) is None
        # and model_fields_set contains the field
        if self.status is None and "status" in self.model_fields_set:
            _dict['status'] = None

        # set to None if storage_url (nullable) is None
        # and model_fields_set contains the field
        if self.storage_url is None and "storage_url" in self.model_fields_set:
            _dict['storage_url'] = None

        # set to None if document_meta (nullable) is None
        # and model_fields_set contains the field
        if self.document_meta is None and "document_meta" in self.model_fields_set:
            _dict['document_meta'] = None

        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of Resource from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "id": obj.get("id"),
            "size": obj.get("size") if obj.get("size") is not None else 0,
            "metadata": obj.get("metadata"),
            "page_contents": [ResourceContent.from_dict(_item) for _item in obj["page_contents"]] if obj.get("page_contents") is not None else None,
            "progress": obj.get("progress"),
            "status": obj.get("status"),
            "total": obj.get("total") if obj.get("total") is not None else 0,
            "storage_url": obj.get("storage_url"),
            "extension": obj.get("extension") if obj.get("extension") is not None else '',
            "document_meta": obj.get("document_meta"),
            "error_message": obj.get("error_message") if obj.get("error_message") is not None else '',
            "segment_count": obj.get("segment_count") if obj.get("segment_count") is not None else 0
        })
        return _obj


