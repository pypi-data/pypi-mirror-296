# coding: utf-8

"""
    Loci Notes Server

     The [Loci Notes](https://loci-notes.gitlab.io/) server API.  The Loci Notes server is a FastAPI server that provides a RESTful API for interacting with the Loci Notes system. The server is designed to be used by the Loci Notes web UI, VS Code extension, Loci Notes CLI, and any other clients that may be developed in the future.

    The version of the OpenAPI document: 0.20240917.041813
    Contact: thetwitchy@thetwitchy.com
    Generated by OpenAPI Generator (https://openapi-generator.tech)

    Do not edit the class manually.
"""  # noqa: E501


from __future__ import annotations
import pprint
import re  # noqa: F401
import json

from datetime import datetime
from pydantic import BaseModel, ConfigDict, StrictStr
from typing import Any, ClassVar, Dict, List, Optional
from loci_client.models.artifact_id import ArtifactId
from loci_client.models.artifact_note_type_enum import ArtifactNoteTypeEnum
from loci_client.models.author_id import AuthorId
from loci_client.models.id import Id
from loci_client.models.submission_tool import SubmissionTool
from typing import Optional, Set
from typing_extensions import Self

class ArtifactNote(BaseModel):
    """
    ArtifactNote
    """ # noqa: E501
    type: ArtifactNoteTypeEnum
    submission_tool: Optional[SubmissionTool] = None
    contents: StrictStr
    id: Optional[Id] = None
    artifact_id: Optional[ArtifactId] = None
    author_id: Optional[AuthorId] = None
    created_at: Optional[datetime] = None
    updated_at: Optional[datetime] = None
    __properties: ClassVar[List[str]] = ["type", "submission_tool", "contents", "id", "artifact_id", "author_id", "created_at", "updated_at"]

    model_config = ConfigDict(
        populate_by_name=True,
        validate_assignment=True,
        protected_namespaces=(),
    )


    def to_str(self) -> str:
        """Returns the string representation of the model using alias"""
        return pprint.pformat(self.model_dump(by_alias=True))

    def to_json(self) -> str:
        """Returns the JSON representation of the model using alias"""
        # TODO: pydantic v2: use .model_dump_json(by_alias=True, exclude_unset=True) instead
        return json.dumps(self.to_dict())

    @classmethod
    def from_json(cls, json_str: str) -> Optional[Self]:
        """Create an instance of ArtifactNote from a JSON string"""
        return cls.from_dict(json.loads(json_str))

    def to_dict(self) -> Dict[str, Any]:
        """Return the dictionary representation of the model using alias.

        This has the following differences from calling pydantic's
        `self.model_dump(by_alias=True)`:

        * `None` is only added to the output dict for nullable fields that
          were set at model initialization. Other fields with value `None`
          are ignored.
        """
        excluded_fields: Set[str] = set([
        ])

        _dict = self.model_dump(
            by_alias=True,
            exclude=excluded_fields,
            exclude_none=True,
        )
        # override the default output from pydantic by calling `to_dict()` of submission_tool
        if self.submission_tool:
            _dict['submission_tool'] = self.submission_tool.to_dict()
        # override the default output from pydantic by calling `to_dict()` of id
        if self.id:
            _dict['id'] = self.id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of artifact_id
        if self.artifact_id:
            _dict['artifact_id'] = self.artifact_id.to_dict()
        # override the default output from pydantic by calling `to_dict()` of author_id
        if self.author_id:
            _dict['author_id'] = self.author_id.to_dict()
        return _dict

    @classmethod
    def from_dict(cls, obj: Optional[Dict[str, Any]]) -> Optional[Self]:
        """Create an instance of ArtifactNote from a dict"""
        if obj is None:
            return None

        if not isinstance(obj, dict):
            return cls.model_validate(obj)

        _obj = cls.model_validate({
            "type": obj.get("type"),
            "submission_tool": SubmissionTool.from_dict(obj["submission_tool"]) if obj.get("submission_tool") is not None else None,
            "contents": obj.get("contents"),
            "id": Id.from_dict(obj["id"]) if obj.get("id") is not None else None,
            "artifact_id": ArtifactId.from_dict(obj["artifact_id"]) if obj.get("artifact_id") is not None else None,
            "author_id": AuthorId.from_dict(obj["author_id"]) if obj.get("author_id") is not None else None,
            "created_at": obj.get("created_at"),
            "updated_at": obj.get("updated_at")
        })
        return _obj


