# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
from .api_type import ApiType
from ...core.serialization import FieldMetadata
import typing
from .route import Route
from .security_scheme_name import SecuritySchemeName
from .security_scheme import SecurityScheme
from .security_requirement import SecurityRequirement
from ..graphql.graph_ql_query import GraphQlQuery
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class RoutesReport(UniversalBaseModel):
    target: str
    app_type: typing_extensions.Annotated[ApiType, FieldMetadata(alias="appType")]
    base_endpoint_url: typing_extensions.Annotated[str, FieldMetadata(alias="baseEndpointUrl")]
    version: typing.Optional[str] = None
    schema_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="schemaUrl")] = None
    routes: typing.Optional[typing.List[Route]] = None
    security_schemes: typing_extensions.Annotated[
        typing.Optional[typing.Dict[SecuritySchemeName, SecurityScheme]], FieldMetadata(alias="securitySchemes")
    ] = None
    security: typing.Optional[typing.List[SecurityRequirement]] = None
    queries: typing.Optional[typing.List[GraphQlQuery]] = None
    raw: str
    errors: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
