# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing
import typing_extensions
from ...core.serialization import FieldMetadata
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class HttpHeaders(UniversalBaseModel):
    location: typing.Optional[str] = None
    server: typing.Optional[str] = None
    x_powered_by: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="xPoweredBy")] = None
    x_frame_options: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="xFrameOptions")] = None
    x_cluster_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="xClusterName")] = None
    cross_origin_resource_policy: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="crossOriginResourcePolicy")
    ] = None
    access_control_allow_origin: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="accessControlAllowOrigin")
    ] = None
    x_asp_net_version: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="xAspNetVersion")] = None
    allowed_http_methods: typing_extensions.Annotated[
        typing.Optional[str], FieldMetadata(alias="allowedHttpMethods")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
