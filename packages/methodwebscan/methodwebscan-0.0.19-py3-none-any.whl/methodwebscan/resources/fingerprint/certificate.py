# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from ...core.serialization import FieldMetadata
import datetime as dt
from .signature_algorithm import SignatureAlgorithm
from .public_key_algorithm import PublicKeyAlgorithm
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class Certificate(UniversalBaseModel):
    subject_common_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="subjectCommonName")] = (
        None
    )
    issuer_common_name: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="issuerCommonName")] = (
        None
    )
    valid_from: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="validFrom")] = None
    valid_to: typing_extensions.Annotated[typing.Optional[dt.datetime], FieldMetadata(alias="validTo")] = None
    version: typing.Optional[int] = None
    serial_number: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="serialNumber")] = None
    certificate: typing.Optional[str] = None
    signature: typing.Optional[str] = None
    signature_algorithm: typing_extensions.Annotated[
        typing.Optional[SignatureAlgorithm], FieldMetadata(alias="signatureAlgorithm")
    ] = None
    public_key_algorithm: typing_extensions.Annotated[
        typing.Optional[PublicKeyAlgorithm], FieldMetadata(alias="publicKeyAlgorithm")
    ] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
