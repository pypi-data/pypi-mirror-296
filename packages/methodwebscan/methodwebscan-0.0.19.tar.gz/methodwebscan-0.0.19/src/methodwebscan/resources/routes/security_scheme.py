# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
from .security_scheme_type import SecuritySchemeType
import typing
from .security_scheme_name import SecuritySchemeName
import typing_extensions
from ...core.serialization import FieldMetadata
from .o_auth_flows import OAuthFlows
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class SecurityScheme(UniversalBaseModel):
    type: SecuritySchemeType
    description: typing.Optional[str] = None
    name: typing.Optional[SecuritySchemeName] = None
    in_: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="in")] = None
    scheme: typing.Optional[str] = None
    bearer_format: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="bearerFormat")] = None
    flow: typing.Optional[str] = None
    authorization_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="authorizationUrl")] = None
    token_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="tokenUrl")] = None
    scopes: typing.Optional[typing.Dict[str, str]] = None
    flows: typing.Optional[OAuthFlows] = None
    open_id_connect_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="openIdConnectUrl")] = (
        None
    )

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
