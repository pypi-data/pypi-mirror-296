# This file was auto-generated by Fern from our API Definition.

from ...core.pydantic_utilities import UniversalBaseModel
import typing_extensions
import typing
from .http_headers import HttpHeaders
from ...core.serialization import FieldMetadata
from .tls_info import TlsInfo
from ...core.pydantic_utilities import IS_PYDANTIC_V2
import pydantic


class FingerprintReport(UniversalBaseModel):
    target: str
    http_headers: typing_extensions.Annotated[typing.Optional[HttpHeaders], FieldMetadata(alias="httpHeaders")] = None
    tls_info: typing_extensions.Annotated[typing.Optional[TlsInfo], FieldMetadata(alias="tlsInfo")] = None
    redirect_url: typing_extensions.Annotated[typing.Optional[str], FieldMetadata(alias="redirectUrl")] = None
    redirect_http_headers: typing_extensions.Annotated[
        typing.Optional[HttpHeaders], FieldMetadata(alias="redirectHttpHeaders")
    ] = None
    redirect_tls_info: typing_extensions.Annotated[typing.Optional[TlsInfo], FieldMetadata(alias="redirectTlsInfo")] = (
        None
    )
    errors: typing.Optional[typing.List[str]] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow")  # type: ignore # Pydantic v2
    else:

        class Config:
            extra = pydantic.Extra.allow
