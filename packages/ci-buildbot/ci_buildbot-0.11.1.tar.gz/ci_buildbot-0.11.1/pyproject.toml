[project]
name = "ci-buildbot"
version = "0.11.1"
description = "Slack client for reporting on CodePipeline runs"
readme = "README.md"
authors = [
    {name = "Caltech IMSS ADS", email = "imss-ads-staff@caltech.edu"},
]
maintainers = [
    {name = "Christopher Malek", email = "cmalek@caltech.edu"},
    {name = "Glenn Bach", email = "glenn@caltech.edu"},
]
keywords = ["aws", "ecs", "docker", "devops"]
dependencies = [
    "slackclient >= 2.9.4",
    "docker >= 7.1.0",
    "gitpython >= 3.1.43",
    "giturlparse >= 0.11.1",
    "click >= 8.0",
    "jinja2 >= 2.11.1",
    "pydantic >= 2.9.1",
    "pydantic-settings >= 2.5.2",
    "pytz == 2024.1",
    "sh == 1.13.1",
    "toml == 0.10.2",
]
requires-python = ">=3.9"
classifiers = [
    "Development Status :: 5 - Production/Stable",
    "Environment :: Console",
    "Intended Audience :: Developers",
    "Intended Audience :: System Administrators",
    "Operating System :: OS Independent",
    "Programming Language :: Python",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Software Development :: Build Tools",
]

[project.urls]
Repository = "https://github.com/caltechads/ci-buildbot"
Issues = "https://github.com/caltechads/ci-buildbot/issues"

[project.scripts]
buildbot = "ci_buildbot.cli:main"

[build-system]
requires = [
    "setuptools >= 48",
    "wheel >= 0.29.0",
]
build-backend = "setuptools.build_meta"

[tool]

[tool.setuptools.packages.find]
where = ["."]
include = ["ci_buildbot*"]
namespaces = false

[tool.pylint]
[tool.pylint.FORMAT]
max-line-length = 120

[tool.pylint."MESSAGES CONTROL"]
disable = ["missing-docstring,", "protected-access,", "unused-argument,", "invalid-name,", "too-few-public-methods,", "attribute-defined-outside-init,", "too-many-lines,", "no-member,", "unnecessary-pass,", "unnecessary-ellipsis"]

[tool.mypy]
python_executable = "~/.pyenv/shims/python"
exclude = "(?x)(^build)"

[[tool.mypy.overrides]]
module = "sphinx_rtd_theme.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "setuptools.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "docker.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "git.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "giturlparse.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "jinja2.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "click.*"
ignore_missing_imports = true

[[tool.mypy.overrides]]
module = "slack.*"
ignore_missing_imports = true

[tool.ruff]
# Same as Black.
line-length = 88
indent-width = 4
target-version = "py39"

[tool.ruff.lint]
select = ["ALL"]
ignore = [
    #### modules
    "ANN", # flake8-annotations
    "COM", # flake8-commas
    "C90", # mccabe complexity
    "DJ",  # django
    "EXE", # flake8-executable
    "T10", # debugger
    "TID", # flake8-tidy-imports

    #### specific rules
    "D100",   # ignore missing docs
    "D101",
    "D102",
    "D103",
    "D104",
    "D105",
    "D106",
    "D107",
    "D200",
    "D205",
    "D212",
    "D400",
    "D401",
    "D415",
    "E402",   # false positives for local imports
    "S603",   # ignore subprocess calls that do not check return code
    "S607",   # ignore subprocess programs that are not absolute paths
    "TRY003", # external messages in exceptions are too verbose
    "T201",   # ignore print statements
    "TD002",
    "TD003",
    "FIX002", # too verbose descriptions of todos
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"