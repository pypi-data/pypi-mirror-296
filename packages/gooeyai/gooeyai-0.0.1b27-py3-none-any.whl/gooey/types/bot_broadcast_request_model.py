# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import pydantic
import typing
from .reply_button import ReplyButton
from .bot_broadcast_filters import BotBroadcastFilters
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class BotBroadcastRequestModel(UniversalBaseModel):
    text: str = pydantic.Field()
    """
    Message to broadcast to all users
    """

    audio: typing.Optional[str] = pydantic.Field(default=None)
    """
    Audio URL to send to all users
    """

    video: typing.Optional[str] = pydantic.Field(default=None)
    """
    Video URL to send to all users
    """

    documents: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    Video URL to send to all users
    """

    buttons: typing.Optional[typing.List[ReplyButton]] = pydantic.Field(default=None)
    """
    Buttons to send to all users
    """

    filters: typing.Optional[BotBroadcastFilters] = pydantic.Field(default=None)
    """
    Filters to select users to broadcast to. If not provided, will broadcast to all users of this bot.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
