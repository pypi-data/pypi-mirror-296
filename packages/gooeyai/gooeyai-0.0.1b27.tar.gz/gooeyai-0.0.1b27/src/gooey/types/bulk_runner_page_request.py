# This file was auto-generated by Fern from our API Definition.

from ..core.pydantic_utilities import UniversalBaseModel
import typing
from .recipe_function import RecipeFunction
import pydantic
from .run_settings import RunSettings
from ..core.pydantic_utilities import IS_PYDANTIC_V2


class BulkRunnerPageRequest(UniversalBaseModel):
    functions: typing.Optional[typing.List[RecipeFunction]] = None
    variables: typing.Optional[typing.Dict[str, typing.Optional[typing.Any]]] = pydantic.Field(default=None)
    """
    Variables to be used as Jinja prompt templates and in functions as arguments
    """

    documents: typing.List[str] = pydantic.Field()
    """
    Upload or link to a CSV or google sheet that contains your sample input data.
    For example, for Copilot, this would sample questions or for Art QR Code, would would be pairs of image descriptions and URLs.
    Remember to includes header names in your CSV too.
    """

    run_urls: typing.List[str] = pydantic.Field()
    """
    Provide one or more Gooey.AI workflow runs.
    You can add multiple runs from the same recipe (e.g. two versions of your copilot) and we'll run the inputs over both of them.
    """

    input_columns: typing.Dict[str, str] = pydantic.Field()
    """
    For each input field in the Gooey.AI workflow, specify the column in your input data that corresponds to it.
    """

    output_columns: typing.Dict[str, str] = pydantic.Field()
    """
    For each output field in the Gooey.AI workflow, specify the column name that you'd like to use for it in the output data.
    """

    eval_urls: typing.Optional[typing.List[str]] = pydantic.Field(default=None)
    """
    _(optional)_ Add one or more Gooey.AI Evaluator Workflows to evaluate the results of your runs.
    """

    settings: typing.Optional[RunSettings] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
