{"title":"dml.CamlDML","markdown":{"headingText":"dml.CamlDML","headingAttr":{"id":"caml.core.dml.CamlDML","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n`core.dml.CamlDML(self, df, uuid, y, t, X=None, model_y=HistGradientBoostingRegressor(max_depth=3, max_iter=500), model_t=HistGradientBoostingClassifier(max_depth=3, max_iter=500), discrete_treatment=True, discrete_outcome=False, spark=None)`\n\nThe CamlDML class represents a Double Machine Learning (DML) implementation for estimating...\naverage treatment effects (ATE), conditional average treatment effects (CATE), group average treatment effects (GATE),\netc.\n\nThis class... TODO\n\n## Parameters\n\n| Name                 | Type                                                                   | Description                                                                                                 | Default                                                     |\n|----------------------|------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------|-------------------------------------------------------------|\n| `df`                 | pandas.DataFrame \\| polars.DataFrame \\| pyspark.sql.DataFrame \\| Table | The input DataFrame representing the data for the EchoCATE instance.                                        | _required_                                                  |\n| `uuid`               | str                                                                    | The str representing the column name for the universal identifier code (eg, ehhn)                           | _required_                                                  |\n| `y`                  | str                                                                    | The str representing the column name for the outcome variable.                                              | _required_                                                  |\n| `t`                  | str                                                                    | The str representing the column name(s) for the treatment variable(s).                                      | _required_                                                  |\n| `X`                  | str \\| List\\[str\\] \\| None                                             | The str (if unity) or list of feature names representing the custom feature set. Defaults to None.          | `None`                                                      |\n| `model_y`            | RegressorMixin \\| ClassifierMixin                                      | The nuissance model to be used for predicting the outcome. Defaults to HistGradientBoostingRegressor.       | `HistGradientBoostingRegressor(max_depth=3, max_iter=500)`  |\n| `model_t`            | RegressorMixin \\| ClassifierMixin                                      | The nuissance model to be used for predicting the treatment. Defaults to HistGradientBoostingClassifier.    | `HistGradientBoostingClassifier(max_depth=3, max_iter=500)` |\n| `discrete_treatment` | bool                                                                   | A boolean indicating whether the treatment is discrete or continuous. Defaults to True.                     | `True`                                                      |\n| `spark`              | SparkSession \\| None                                                   | The SparkSession object used for connecting to Ibis when `df` is a pyspark.sql.DataFrame. Defaults to None. | `None`                                                      |\n\n## Attributes\n\n| Name               | Type                                                                   | Description                                                                               |\n|--------------------|------------------------------------------------------------------------|-------------------------------------------------------------------------------------------|\n| df                 | pandas.DataFrame \\| polars.DataFrame \\| pyspark.sql.DataFrame \\| Table | The input DataFrame representing the data for the EchoCATE instance.                      |\n| uuid               | str                                                                    | The str representing the column name for the universal identifier code (eg, ehhn)         |\n| y                  | str                                                                    | The str representing the column name for the outcome variable.                            |\n| t                  | str                                                                    | The str representing the column name(s) for the treatment variable(s).                    |\n| X                  | List\\[str\\] \\| str \\| None                                             | The str (if unity) or list/tuple of feature names representing the custom feature set.    |\n| model_y            | RegressorMixin \\| ClassifierMixin                                      | The nuissance model to be used for predicting the outcome.                                |\n| model_t            | RegressorMixin \\| ClassifierMixin                                      | The nuissance model to be used for predicting the treatment.                              |\n| discrete_treatment | bool                                                                   | A boolean indicating whether the treatment is discrete or continuous.                     |\n| spark              | SparkSession                                                           | The SparkSession object used for connecting to Ibis when `df` is a pyspark.sql.DataFrame. |\n| _ibis_connection   | ibis.client.Client                                                     | The Ibis client object representing the backend connection to Ibis.                       |\n| _ibis_df           | Table                                                                  | The Ibis table expression representing the DataFrame connected to Ibis.                   |\n| _table_name        | str                                                                    | The name of the temporary table/view created for the DataFrame in Ibis.                   |\n| _Y                 | Table                                                                  | The outcome variable data as ibis table.                                                  |\n| _T                 | Table                                                                  | The treatment variable data as ibis table.                                                |\n| _X                 | Table                                                                  | The feature set data as ibis table.                                                       |\n| _estimator         | CausalForestDML                                                        | The fitted EconML estimator object.                                                       |\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [fit](#caml.core.dml.CamlDML.fit) | Fits the econometric model to learn the CATE function. |\n| [optimize](#caml.core.dml.CamlDML.optimize) | Optimizes a households treatment based on CATE predictions. Only applicable when |\n| [predict](#caml.core.dml.CamlDML.predict) | Predicts the CATE given feature set. |\n| [rank](#caml.core.dml.CamlDML.rank) | Ranks households based on the those with the highest estimated CATE. |\n| [summarize](#caml.core.dml.CamlDML.summarize) | Provides population summary of treatment effects, including Average Treatment Effects (ATEs) |\n\n### fit { #caml.core.dml.CamlDML.fit }\n\n`core.dml.CamlDML.fit(estimator='CausalForestDML', return_estimator=False, **kwargs)`\n\nFits the econometric model to learn the CATE function.\n\nSets the _Y, _T, and _X internal attributes to the data of the outcome, treatment, and feature set,\nrespectively. Additionally, sets the _estimator internal attribute to the fitted EconML estimator object.\n\n#### Parameters\n\n| Name               | Type   | Description                                                                                                                  | Default             |\n|--------------------|--------|------------------------------------------------------------------------------------------------------------------------------|---------------------|\n| `estimator`        | str    | The estimator to use for fitting the CATE function. Defaults to 'CausalForestDML'. Currently, only this option is available. | `'CausalForestDML'` |\n| `return_estimator` | bool   | Set to True to recieve the estimator object back after fitting. Defaults to False.                                           | `False`             |\n| `**kwargs`         |        | Additional keyword arguments to pass to the EconML estimator.                                                                | `{}`                |\n\n#### Returns\n\n| Type                                      | Description                                                                       |\n|-------------------------------------------|-----------------------------------------------------------------------------------|\n| econml.dml.causal_forest.CausalForestDML: | The fitted EconML CausalForestDML estimator object if `return_estimator` is True. |\n\n### optimize { #caml.core.dml.CamlDML.optimize }\n\n`core.dml.CamlDML.optimize()`\n\nOptimizes a households treatment based on CATE predictions. Only applicable when\nvector of treatments includes more than 1 mutually exlusive treatment.\n\n#### Returns\n\n| Type   | Description   |\n|--------|---------------|\n| None   |               |\n\n### predict { #caml.core.dml.CamlDML.predict }\n\n`core.dml.CamlDML.predict(out_of_sample_df=None, ci=90, return_predictions=False, append_predictions=False)`\n\nPredicts the CATE given feature set.\n\n#### Returns\n\n| Type   | Description                                                                                                           |\n|--------|-----------------------------------------------------------------------------------------------------------------------|\n|        | A tuple containing the predicted CATE, standard errors, lower bound, and upper bound if `return_predictions` is True. |\n\n### rank { #caml.core.dml.CamlDML.rank }\n\n`core.dml.CamlDML.rank()`\n\nRanks households based on the those with the highest estimated CATE.\n\n#### Returns\n\n| Type   | Description   |\n|--------|---------------|\n| None   |               |\n\n### summarize { #caml.core.dml.CamlDML.summarize }\n\n`core.dml.CamlDML.summarize()`\n\nProvides population summary of treatment effects, including Average Treatment Effects (ATEs)\nand Conditional Average Treatement Effects (CATEs).\n\n#### Returns\n\n| Type                      | Description                        |\n|---------------------------|------------------------------------|\n| econml.utilities.Summary: | Population summary of the results. |","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles/styles.css"],"toc":true,"output-file":"dml.CamlDML.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","quartodoc":{"package":"caml","dir":"../03_Reference","title":"API Reference","sidebar":"../03_Reference/_sidebar.yml","sections":[{"title":"CaML Core","desc":"`from caml import *`","package":"caml","contents":["CamlCATE"]},{"title":"Synthetic Data Generation","desc":"`from caml.extensions.synthetic_data import *`","package":"caml.extensions.synthetic_data","contents":["make_partially_linear_dataset_simple","make_partially_linear_dataset_constant","make_fully_heterogeneous_dataset","make_dowhy_linear_dataset"]},{"title":"Plots","desc":"`from caml.extensions.plots import *`","package":"caml.extensions.plots","contents":["cate_histogram_plot","cate_line_plot","cate_true_vs_estimated_plot"]},{"title":"Developer Tools","contents":["utils.generate_random_string","logging.setup_logging"]}]},"theme":"cosmo"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}