{"title":"CamlCATE","markdown":{"headingText":"CamlCATE","headingAttr":{"id":"caml.CamlCATE","classes":[],"keyvalue":[]},"containsRefs":false,"markdown":"\n`CamlCATE(self, df, Y, T, X, *, uuid=None, discrete_treatment=True, discrete_outcome=False, seed=None, verbose=1)`\n\nThe CamlCATE class represents an opinionated implementation of Causal Machine Learning techniques for estimating\nhighly accurate conditional average treatment effects (CATEs).\n\nThis class is built on top of the EconML library and provides a high-level API for fitting, validating, and making inference with CATE models,\nwith best practices built directly into the API. The class is designed to be easy to use and understand, while still providing\nflexibility for advanced users. The class is designed to be used with `pandas`, `polars`, `pyspark`, or `ibis` backends to\nprovide a level of extensibility & interoperability across different data processing frameworks.\n\nThe primary workflow for the CamlCATE class is as follows:\n\n1. Initialize the class with the input DataFrame and the necessary columns.\n2. Utilize AutoML to find the optimal nuisance functions to be utilized in the EconML estimators.\n3. Fit the CATE models on the training set and evaluate based on the validation set, then select the top performer/ensemble.\n4. Validate the fitted CATE model on the test set to check for generalization performance.\n5. Fit the final estimator on the entire dataset, after validation and testing.\n6. Predict the CATE based on the fitted final estimator for either the internal dataframe or an out-of-sample dataframe.\n7. Rank orders households based on the predicted CATE values for either the internal dataframe or an out-of-sample dataframe.\n8. Summarize population summary statistics for the CATE predictions for either the internal dataframe or an out-of-sample dataframe.\n\n\nFor technical details on conditional average treatment effects, see:\n\n - CaML Documentation\n - [EconML documentation](https://econml.azurewebsites.net/)\n\n **Note**: All the standard assumptions of Causal Inference apply to this class (e.g., exogeneity/unconfoundedness, overlap, positivity, etc.).\n    The class does not check for these assumptions and assumes that the user has already thought through these assumptions before using the class.\n\n**Outcome & Treatment Data Type Support Matrix**\n\n| Outcome     | Treatment   | Support     | Missing    |\n| ----------- | ----------- | ----------- | ---------- |\n| Continuous  | Binary      | ✅Full      | None       |\n| Continuous  | Continuous  | 🟡Partial   | Validation |\n| Continuous  | Categorical | ✅Full      | None       |\n| Binary      | Binary      | ❌Not yet   |            |\n| Binary      | Continuous  | ❌Not yet   |            |\n| Binary      | Categorical | ❌Not yet   |            |\n| Categorical | Binary      | ❌Not yet   |            |\n| Categorical | Continuous  | ❌Not yet   |            |\n| Categorical | Categorical | ❌Not yet   |            |\n\nMulti-dimensional outcomes and treatments are not on the roadmap yet.\n\n## Parameters\n\n| Name                 | Type                                                                                   | Description                                                                                                                                   | Default    |\n|----------------------|----------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|------------|\n| `df`                 | pandas.DataFrame \\| polars.DataFrame \\| pyspark.sql.DataFrame \\| ibis.expr.types.Table | The input DataFrame representing the data for the CamlCATE instance.                                                                          | _required_ |\n| `Y`                  | str                                                                                    | The str representing the column name for the outcome variable.                                                                                | _required_ |\n| `T`                  | str                                                                                    | The str representing the column name(s) for the treatment variable(s).                                                                        | _required_ |\n| `X`                  | list\\[str\\] \\| str \\| None                                                             | The str (if unity) or list of feature names representing the confounder/control feature set to be utilized for estimating heterogeneity/CATE. | _required_ |\n| `uuid`               | str \\| None                                                                            | The str representing the column name for the universal identifier code (eg, ehhn). Default implies index for joins.                           | `None`     |\n| `discrete_treatment` | bool                                                                                   | A boolean indicating whether the treatment is discrete/categorical or continuous.                                                             | `True`     |\n| `discrete_outcome`   | bool                                                                                   | A boolean indicating whether the outcome is binary or continuous.                                                                             | `False`    |\n| `seed`               | int \\| None                                                                            | The seed to use for the random number generator.                                                                                              | `None`     |\n| `verbose`            | int                                                                                    | The verbosity level for logging. Default implies 1 (INFO). Set to 0 for no logging. Set to 2 for DEBUG.                                       | `1`        |\n\n## Attributes\n\n| Name                  | Type                                                                                   | Description                                                                                                                                         |\n|-----------------------|----------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------------|\n| df                    | pandas.DataFrame \\| polars.DataFrame \\| pyspark.sql.DataFrame \\| ibis.expr.types.Table | The input DataFrame representing the data for the CamlCATE instance.                                                                                |\n| Y                     | str                                                                                    | The str representing the column name for the outcome variable.                                                                                      |\n| T                     | str                                                                                    | The str representing the column name(s) for the treatment variable(s).                                                                              |\n| X                     | list\\[str\\] \\| str                                                                     | The str (if unity) or list/tuple of feature names representing the confounder/control feature set to be utilized for estimating heterogeneity/CATE. |\n| uuid                  | str                                                                                    | The str representing the column name for the universal identifier code (eg, ehhn)                                                                   |\n| discrete_treatment    | bool                                                                                   | A boolean indicating whether the treatment is discrete/categorical or continuous.                                                                   |\n| discrete_outcome      | bool                                                                                   | A boolean indicating whether the outcome is binary or continuous.                                                                                   |\n| validation_estimator  | econml._cate_estimator.BaseCateEstimator \\| econml.score.EnsembleCateEstimator         | The fitted EconML estimator object for validation.                                                                                                  |\n| final_estimator       | econml._cate_estimator.BaseCateEstimator \\| econml.score.EnsembleCateEstimator         | The fitted EconML estimator object on the entire dataset after validation.                                                                          |\n| dataframe             | pandas.DataFrame \\| polars.DataFrame \\| pyspark.sql.DataFrame \\| ibis.expr.types.Table | The input DataFrame with any modifications (e.g., predictions or rank orderings) made by the class returned to the original backend.                |\n| model_Y_X             | sklearn.base.BaseEstimator                                                             | The fitted nuisance function for the outcome variable.                                                                                              |\n| model_Y_X_T           | sklearn.base.BaseEstimator                                                             | The fitted nuisance function for the outcome variable with treatment variable.                                                                      |\n| model_T_X             | sklearn.base.BaseEstimator                                                             | The fitted nuisance function for the treatment variable.                                                                                            |\n| _ibis_connection      | ibis.client.Client                                                                     | The Ibis client object representing the backend connection to Ibis.                                                                                 |\n| _ibis_df              | ibis.expr.types.Table                                                                  | The Ibis table expression representing the DataFrame connected to Ibis.                                                                             |\n| _table_name           | str                                                                                    | The name of the temporary table/view created for the DataFrame in the backend.                                                                      |\n| _spark                | pyspark.sql.SparkSession                                                               | The Spark session object if the DataFrame is a Spark DataFrame.                                                                                     |\n| _Y                    | ibis.expr.types.Table                                                                  | The outcome variable data as ibis table.                                                                                                            |\n| _T                    | ibis.expr.types.Table                                                                  | The treatment variable data as ibis table.                                                                                                          |\n| _X                    | ibis.expr.types.Table                                                                  | The feature/confounder set data as ibis table.                                                                                                      |\n| _X_T                  | ibis.expr.types.Table                                                                  | The feature/confounder feature set and treatment variable data as ibis table.                                                                       |\n| _nuisances_fitted     | bool                                                                                   | A boolean indicating whether the nuisance functions have been fitted.                                                                               |\n| _validation_estimator | econml._cate_estimator.BaseCateEstimator \\| econml.score.EnsembleCateEstimator         | The fitted EconML estimator object for validation.                                                                                                  |\n| _final_estimator      | econml._cate_estimator.BaseCateEstimator \\| econml.score.EnsembleCateEstimator         | The fitted EconML estimator object for final predictions.                                                                                           |\n| _validator_results    | econml.validate.EvaluationResults                                                      | The results of the validation tests from DRTester.                                                                                                  |\n| _cate_models          | list\\[tuple\\[str, econml._cate_estimator.BaseCateEstimator\\]\\]                         | The list of CATE models to fit and ensemble.                                                                                                        |\n| _data_splits          | dict\\[str, np.ndarray\\]                                                                | The dictionary containing the training, validation, and test data splits.                                                                           |\n| _rscorer              | econml.score.RScorer                                                                   | The RScorer object for the validation estimator.                                                                                                    |\n\n## Examples\n\n```python\n>>> from caml.core.cate import CamlCATE\n>>> from caml.extensions.synthetic_data import make_fully_heterogeneous_dataset\n>>> df, true_cates, true_ate = make_fully_heterogeneous_dataset(n_obs=1000, n_confounders=10, theta=10, seed=1)\n>>> df['uuid'] = df.index\n>>>  caml_obj= CamlCATE(df=df, Y=\"y\", T=\"d\", X=[c for c in df.columns if \"X\" in c], uuid=\"uuid\", discrete_treatment=True, discrete_outcome=False, seed=1)\n>>>\n>>> # Standard pipeline\n>>> caml_obj.auto_nuisance_functions()\n>>> caml_obj.fit_validator()\n>>> caml_obj.validate(print_full_report=True)\n>>> caml_obj.fit_final()\n>>> caml_obj.predict(join_predictions=True)\n>>> caml_obj.rank_order(join_rank_order=True)\n>>> caml_obj.summarize()\n>>>\n>>> end_of_pipeline_results = caml_obj.dataframe\n>>> final_estimator = caml_obj.final_estimator # Can be saved for future inference.\n```\n\n## Methods\n\n| Name | Description |\n| --- | --- |\n| [auto_nuisance_functions](#caml.CamlCATE.auto_nuisance_functions) | Automatically finds the optimal nuisance functions for estimating EconML estimators. |\n| [fit_final](#caml.CamlCATE.fit_final) | Fits the final estimator on the entire dataset, after validation and testing. |\n| [fit_validator](#caml.CamlCATE.fit_validator) | Fits the CATE models on the training set and evaluates them & ensembles based on the validation set. |\n| [predict](#caml.CamlCATE.predict) | Predicts the CATE based on the fitted final estimator for either the internal dataframe or an out-of-sample dataframe. |\n| [rank_order](#caml.CamlCATE.rank_order) | Ranks orders households based on the predicted CATE values for either the internal dataframe or an out-of-sample dataframe. |\n| [summarize](#caml.CamlCATE.summarize) | Provides population summary statistics for the CATE predictions for either the internal dataframe or an out-of-sample dataframe. |\n| [validate](#caml.CamlCATE.validate) | Validates the fitted CATE models on the test set to check for generalization performance. Uses the DRTester class from EconML to obtain the Best |\n\n### auto_nuisance_functions { #caml.CamlCATE.auto_nuisance_functions }\n\n`CamlCATE.auto_nuisance_functions(flaml_Y_kwargs=None, flaml_T_kwargs=None, use_ray=False, use_spark=False)`\n\nAutomatically finds the optimal nuisance functions for estimating EconML estimators.\n\nSets the `model_Y_X`, `model_Y_X_T`, and `model_T_X` internal attributes to the fitted nuisance functions.\n\n#### Parameters\n\n| Name             | Type         | Description                                                                                                                 | Default   |\n|------------------|--------------|-----------------------------------------------------------------------------------------------------------------------------|-----------|\n| `flaml_Y_kwargs` | dict \\| None | The keyword arguments for the FLAML AutoML search for the outcome model. Default implies the base parameters in CamlBase.   | `None`    |\n| `flaml_T_kwargs` | dict \\| None | The keyword arguments for the FLAML AutoML search for the treatment model. Default implies the base parameters in CamlBase. | `None`    |\n| `use_ray`        | bool         | A boolean indicating whether to use Ray for parallel processing.                                                            | `False`   |\n| `use_spark`      | bool         | A boolean indicating whether to use Spark for parallel processing.                                                          | `False`   |\n\n#### Examples\n\n```python\n>>> flaml_Y_kwargs = {\n...     \"n_jobs\": -1,\n...     \"time_budget\": 300, # in seconds\n...     }\n>>> flaml_T_kwargs = {\n...     \"n_jobs\": -1,\n...     \"time_budget\": 300,\n...     }\n>>> caml_obj.auto_nuisance_functions(flaml_Y_kwargs=flaml_Y_kwargs, flaml_T_kwargs=flaml_T_kwargs)\n```\n\n### fit_final { #caml.CamlCATE.fit_final }\n\n`CamlCATE.fit_final()`\n\nFits the final estimator on the entire dataset, after validation and testing.\n\nSets the `_final_estimator` internal attribute to the fitted EconML estimator.\n\n#### Examples\n\n```python\n>>> caml_obj.fit_final() # Fits the final estimator on the entire dataset.\n```\n\n### fit_validator { #caml.CamlCATE.fit_validator }\n\n`CamlCATE.fit_validator(subset_cate_models=['LinearDML', 'NonParamDML', 'DML-Lasso3d', 'CausalForestDML', 'XLearner', 'DomainAdaptationLearner', 'SLearner', 'TLearner', 'DRLearner', 'LinearDRLearner', 'ForestDRLearner'], additional_cate_models=[], rscorer_kwargs={}, use_ray=False, ray_remote_func_options_kwargs={})`\n\nFits the CATE models on the training set and evaluates them & ensembles based on the validation set.\n\nSets the `_validation_estimator` and `_rscorer` internal attributes to the fitted EconML estimator and RScorer object.\n\n#### Parameters\n\n| Name                             | Type                                    | Description                                                                                            | Default                                                                                                                                                                            |\n|----------------------------------|-----------------------------------------|--------------------------------------------------------------------------------------------------------|------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `subset_cate_models`             | list\\[str\\]                             | The list of CATE models to fit and ensemble. Default implies all available models as defined by class. | `['LinearDML', 'NonParamDML', 'DML-Lasso3d', 'CausalForestDML', 'XLearner', 'DomainAdaptationLearner', 'SLearner', 'TLearner', 'DRLearner', 'LinearDRLearner', 'ForestDRLearner']` |\n| `additional_cate_models`         | list\\[tuple\\[str, BaseCateEstimator\\]\\] | The list of additional CATE models to fit and ensemble                                                 | `[]`                                                                                                                                                                               |\n| `rscorer_kwargs`                 | dict                                    | The keyword arguments for the econml.score.RScorer object.                                             | `{}`                                                                                                                                                                               |\n| `use_ray`                        | bool                                    | A boolean indicating whether to use Ray for parallel processing.                                       | `False`                                                                                                                                                                            |\n| `ray_remote_func_options_kwargs` | dict                                    | The keyword arguments for the Ray remote function options.                                             | `{}`                                                                                                                                                                               |\n\n#### Examples\n\n```python\n>>> rscorer_kwargs = {\n...     \"cv\": 3,\n...     \"mc_iters\": 3,\n...     }\n>>> subset_cate_models = [\"LinearDML\", \"NonParamDML\", \"DML-Lasso3d\", \"CausalForestDML\"]\n>>> additional_cate_models = [(\"XLearner\", XLearner(models=caml_obj._model_Y_X_T, cate_models=caml_obj._model_Y_X_T, propensity_model=caml._model_T_X))]\n>>> caml_obj.fit_validator(subset_cate_models=subset_cate_models, additional_cate_models=additional_cate_models, rscorer_kwargs=rscorer_kwargs)\n```\n\n### predict { #caml.CamlCATE.predict }\n\n`CamlCATE.predict(out_of_sample_df=None, out_of_sample_uuid=None, return_predictions=False, join_predictions=True, T0=0, T1=1)`\n\nPredicts the CATE based on the fitted final estimator for either the internal dataframe or an out-of-sample dataframe.\n\nFor binary treatments, the CATE is the estimated effect of the treatment and for a continuous treatment, the CATE is the estimated effect of a one-unit increase in the treatment.\nThis can be modified by setting the T0 and T1 parameters to the desired treatment levels.\n\n#### Parameters\n\n| Name                 | Type                                                                                           | Description                                                                                         | Default   |\n|----------------------|------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------|-----------|\n| `out_of_sample_df`   | pandas.DataFrame \\| polars.DataFrame \\| pyspark.sql.DataFrame \\| ibis.expr.types.Table \\| None | The out-of-sample DataFrame to make predictions on.                                                 | `None`    |\n| `out_of_sample_uuid` | str \\| None                                                                                    | The column name for the universal identifier code (eg, ehhn) in the out-of-sample DataFrame.        | `None`    |\n| `return_predictions` | bool                                                                                           | A boolean indicating whether to return the predicted CATE.                                          | `False`   |\n| `join_predictions`   | bool                                                                                           | A boolean indicating whether to join the predicted CATE to the original DataFrame within the class. | `True`    |\n| `T0`                 | int                                                                                            | Base treatment for each sample.                                                                     | `0`       |\n| `T1`                 | int                                                                                            | Target treatment for each sample.                                                                   | `1`       |\n\n#### Returns\n\n| Type                    | Description                                                     |\n|-------------------------|-----------------------------------------------------------------|\n| np.ndarray \\| DataFrame | The predicted CATE values if return_predictions is set to True. |\n\n#### Examples\n\n```python\n>>> caml.predict(join_predictions=True) # Joins the predicted CATE values to the original DataFrame.\n>>> caml.dataframe # Returns the DataFrame to original backend with the predicted CATE values joined.\n```\n\n### rank_order { #caml.CamlCATE.rank_order }\n\n`CamlCATE.rank_order(out_of_sample_df=None, return_rank_order=False, join_rank_order=True, treatment_category=1)`\n\nRanks orders households based on the predicted CATE values for either the internal dataframe or an out-of-sample dataframe.\n\n#### Parameters\n\n| Name                 | Type                                                                                           | Description                                                                                                                               | Default   |\n|----------------------|------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------------------------------------------|-----------|\n| `out_of_sample_df`   | pandas.DataFrame \\| polars.DataFrame \\| pyspark.sql.DataFrame \\| ibis.expr.types.Table \\| None | The out-of-sample DataFrame to rank order.                                                                                                | `None`    |\n| `return_rank_order`  | bool                                                                                           | A boolean indicating whether to return the rank ordering.                                                                                 | `False`   |\n| `join_rank_order`    | bool                                                                                           | A boolean indicating whether to join the rank ordering to the original DataFrame within the class.                                        | `True`    |\n| `treatment_category` | int                                                                                            | The treatment category, in the case of categorical treatments, to rank order the households based on. Default implies the first category. | `1`       |\n\n#### Returns\n\n| Type                    | Description                                                   |\n|-------------------------|---------------------------------------------------------------|\n| np.ndarray \\| DataFrame | The rank ordering values if return_rank_order is set to True. |\n\n#### Examples\n\n```python\n>>> caml.rank_order(join_rank_order=True) # Joins the rank ordering to the original DataFrame.\n>>> caml.dataframe # Returns the DataFrame to original backend with the rank ordering values joined.\n```\n\n### summarize { #caml.CamlCATE.summarize }\n\n`CamlCATE.summarize(out_of_sample_df=None, treatment_category=1)`\n\nProvides population summary statistics for the CATE predictions for either the internal dataframe or an out-of-sample dataframe.\n\n#### Parameters\n\n| Name                 | Type                                                                                           | Description                                                                                                                            | Default   |\n|----------------------|------------------------------------------------------------------------------------------------|----------------------------------------------------------------------------------------------------------------------------------------|-----------|\n| `out_of_sample_df`   | pandas.DataFrame \\| polars.DataFrame \\| pyspark.sql.DataFrame \\| ibis.expr.types.Table \\| None | The out-of-sample DataFrame to summarize.                                                                                              | `None`    |\n| `treatment_category` | int                                                                                            | The treatment level, in the case of categorical treatments, to summarize the CATE predictions for. Default implies the first category. | `1`       |\n\n#### Returns\n\n| Type                                                                                   | Description                                      |\n|----------------------------------------------------------------------------------------|--------------------------------------------------|\n| pandas.DataFrame \\| polars.DataFrame \\| pyspark.sql.DataFrame \\| ibis.expr.types.Table | The summary statistics for the CATE predictions. |\n\n#### Examples\n\n```python\n>>> caml.summarize() # Summarizes the CATE predictions for the internal DataFrame.\n```\n\n### validate { #caml.CamlCATE.validate }\n\n`CamlCATE.validate(estimator=None, print_full_report=True)`\n\nValidates the fitted CATE models on the test set to check for generalization performance. Uses the DRTester class from EconML to obtain the Best\nLinear Predictor (BLP), Calibration, AUTOC, and QINI. See [EconML documentation](https://econml.azurewebsites.net/_autosummary/econml.validate.DRTester.html) for more details.\nIn short, we are checking for the ability of the model to find statistically significant heterogeneity in a \"well-calibrated\" fashion.\n\nSets the `_validator_results` internal attribute to the results of the DRTester class.\n\n#### Parameters\n\n| Name                | Type                                               | Description                                                                            | Default   |\n|---------------------|----------------------------------------------------|----------------------------------------------------------------------------------------|-----------|\n| `estimator`         | BaseCateEstimator \\| EnsembleCateEstimator \\| None | The estimator to validate. Default implies the best estimator from the validation set. | `None`    |\n| `print_full_report` | bool                                               | A boolean indicating whether to print the full validation report.                      | `True`    |\n\n#### Examples\n\n```python\n>>> caml_obj.validate(print_full_report=True) # Prints the full validation report.\n```","srcMarkdownNoYaml":""},"formats":{"html":{"identifier":{"display-name":"HTML","target-format":"html","base-format":"html"},"execute":{"fig-width":7,"fig-height":5,"fig-format":"retina","fig-dpi":96,"df-print":"default","error":false,"eval":true,"cache":null,"freeze":false,"echo":true,"output":true,"warning":true,"include":true,"keep-md":false,"keep-ipynb":false,"ipynb":null,"enabled":null,"daemon":null,"daemon-restart":false,"debug":false,"ipynb-filters":[],"ipynb-shell-interactivity":null,"plotly-connected":true,"engine":"markdown"},"render":{"keep-tex":false,"keep-typ":false,"keep-source":false,"keep-hidden":false,"prefer-html":false,"output-divs":true,"output-ext":"html","fig-align":"default","fig-pos":null,"fig-env":null,"code-fold":"none","code-overflow":"scroll","code-link":false,"code-line-numbers":false,"code-tools":false,"tbl-colwidths":"auto","merge-includes":true,"inline-includes":false,"preserve-yaml":false,"latex-auto-mk":true,"latex-auto-install":true,"latex-clean":true,"latex-min-runs":1,"latex-max-runs":10,"latex-makeindex":"makeindex","latex-makeindex-opts":[],"latex-tlmgr-opts":[],"latex-input-paths":[],"latex-output-dir":null,"link-external-icon":false,"link-external-newwindow":false,"self-contained-math":false,"format-resources":[],"notebook-links":true},"pandoc":{"standalone":true,"wrap":"none","default-image-extension":"png","to":"html","css":["../styles/styles.css"],"toc":true,"output-file":"CamlCATE.html"},"language":{"toc-title-document":"Table of contents","toc-title-website":"On this page","related-formats-title":"Other Formats","related-notebooks-title":"Notebooks","source-notebooks-prefix":"Source","other-links-title":"Other Links","code-links-title":"Code Links","launch-dev-container-title":"Launch Dev Container","launch-binder-title":"Launch Binder","article-notebook-label":"Article Notebook","notebook-preview-download":"Download Notebook","notebook-preview-download-src":"Download Source","notebook-preview-back":"Back to Article","manuscript-meca-bundle":"MECA Bundle","section-title-abstract":"Abstract","section-title-appendices":"Appendices","section-title-footnotes":"Footnotes","section-title-references":"References","section-title-reuse":"Reuse","section-title-copyright":"Copyright","section-title-citation":"Citation","appendix-attribution-cite-as":"For attribution, please cite this work as:","appendix-attribution-bibtex":"BibTeX citation:","appendix-view-license":"View License","title-block-author-single":"Author","title-block-author-plural":"Authors","title-block-affiliation-single":"Affiliation","title-block-affiliation-plural":"Affiliations","title-block-published":"Published","title-block-modified":"Modified","title-block-keywords":"Keywords","callout-tip-title":"Tip","callout-note-title":"Note","callout-warning-title":"Warning","callout-important-title":"Important","callout-caution-title":"Caution","code-summary":"Code","code-tools-menu-caption":"Code","code-tools-show-all-code":"Show All Code","code-tools-hide-all-code":"Hide All Code","code-tools-view-source":"View Source","code-tools-source-code":"Source Code","tools-share":"Share","tools-download":"Download","code-line":"Line","code-lines":"Lines","copy-button-tooltip":"Copy to Clipboard","copy-button-tooltip-success":"Copied!","repo-action-links-edit":"Edit this page","repo-action-links-source":"View source","repo-action-links-issue":"Report an issue","back-to-top":"Back to top","search-no-results-text":"No results","search-matching-documents-text":"matching documents","search-copy-link-title":"Copy link to search","search-hide-matches-text":"Hide additional matches","search-more-match-text":"more match in this document","search-more-matches-text":"more matches in this document","search-clear-button-title":"Clear","search-text-placeholder":"","search-detached-cancel-button-title":"Cancel","search-submit-button-title":"Submit","search-label":"Search","toggle-section":"Toggle section","toggle-sidebar":"Toggle sidebar navigation","toggle-dark-mode":"Toggle dark mode","toggle-reader-mode":"Toggle reader mode","toggle-navigation":"Toggle navigation","crossref-fig-title":"Figure","crossref-tbl-title":"Table","crossref-lst-title":"Listing","crossref-thm-title":"Theorem","crossref-lem-title":"Lemma","crossref-cor-title":"Corollary","crossref-prp-title":"Proposition","crossref-cnj-title":"Conjecture","crossref-def-title":"Definition","crossref-exm-title":"Example","crossref-exr-title":"Exercise","crossref-ch-prefix":"Chapter","crossref-apx-prefix":"Appendix","crossref-sec-prefix":"Section","crossref-eq-prefix":"Equation","crossref-lof-title":"List of Figures","crossref-lot-title":"List of Tables","crossref-lol-title":"List of Listings","environment-proof-title":"Proof","environment-remark-title":"Remark","environment-solution-title":"Solution","listing-page-order-by":"Order By","listing-page-order-by-default":"Default","listing-page-order-by-date-asc":"Oldest","listing-page-order-by-date-desc":"Newest","listing-page-order-by-number-desc":"High to Low","listing-page-order-by-number-asc":"Low to High","listing-page-field-date":"Date","listing-page-field-title":"Title","listing-page-field-description":"Description","listing-page-field-author":"Author","listing-page-field-filename":"File Name","listing-page-field-filemodified":"Modified","listing-page-field-subtitle":"Subtitle","listing-page-field-readingtime":"Reading Time","listing-page-field-wordcount":"Word Count","listing-page-field-categories":"Categories","listing-page-minutes-compact":"{0} min","listing-page-category-all":"All","listing-page-no-matches":"No matching items","listing-page-words":"{0} words","listing-page-filter":"Filter","draft":"Draft"},"metadata":{"lang":"en","fig-responsive":true,"quarto-version":"1.5.57","quartodoc":{"package":"caml","dir":"../03_Reference","title":"API Reference","sidebar":"../03_Reference/_sidebar.yml","sections":[{"title":"CaML Core","desc":"`from caml import *`","package":"caml","contents":["CamlCATE"]},{"title":"Synthetic Data Generation","desc":"`from caml.extensions.synthetic_data import *`","package":"caml.extensions.synthetic_data","contents":["make_partially_linear_dataset_simple","make_partially_linear_dataset_constant","make_fully_heterogeneous_dataset","make_dowhy_linear_dataset"]},{"title":"Plots","desc":"`from caml.extensions.plots import *`","package":"caml.extensions.plots","contents":["cate_histogram_plot","cate_line_plot","cate_true_vs_estimated_plot"]},{"title":"Developer Tools","contents":["utils.generate_random_string","logging.setup_logging"]}]},"theme":"cosmo"},"extensions":{"book":{"multiFile":true}}}},"projectFormats":["html"]}