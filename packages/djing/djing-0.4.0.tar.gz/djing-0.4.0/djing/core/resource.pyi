import abc
from _typeshed import Incomplete
from abc import abstractmethod
from django.db import models
from django.http import HttpRequest as HttpRequest

class Resource(metaclass=abc.ABCMeta):
    request: Incomplete
    def __init__(self, request: HttpRequest) -> None: ...
    @property
    def resource_name(self) -> str: ...
    @property
    def resource_plural_name(self) -> str: ...
    @property
    def resource_key(self) -> str: ...
    @property
    @abstractmethod
    def model(self) -> str: ...
    @abstractmethod
    def fields(self, request: HttpRequest): ...
    @abstractmethod
    def cards(self, request: HttpRequest): ...
    @abstractmethod
    def filters(self, request: HttpRequest): ...
    @abstractmethod
    def lenses(self, request: HttpRequest): ...
    @abstractmethod
    def actions(self, request: HttpRequest): ...
    @property
    @abstractmethod
    def group_name(self): ...
    def get_model(self) -> models.Model: ...
    def get_fields(self): ...
    def get_filters(self): ...
