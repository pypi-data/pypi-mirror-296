on: [push, pull_request]
defaults:
  run:
    shell: bash
jobs:
  build-sdist:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - run: python -m venv .venv
      - run: .venv/bin/pip install build
      - run: .venv/bin/python -m build --sdist
      - uses: actions/upload-artifact@v4
        with:
          name: sdist
          path: dist/transmission_delete_unwanted-*.tar.gz
          if-no-files-found: error
  build-wheel:
    runs-on: ubuntu-latest
    needs: build-sdist
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: sdist
      - run:
          tar --gzip --extract --verbose --strip-components=1 --file
          transmission_delete_unwanted-*.tar.gz
      - run: python -m venv .venv
      - run: .venv/bin/pip install build
      - run: .venv/bin/python -m build --wheel
      - uses: actions/upload-artifact@v4
        with:
          name: wheel
          path: dist/transmission_delete_unwanted-*.whl
          if-no-files-found: error
  hash:
    outputs:
      hashes: ${{ steps.hash.outputs.hashes }}
    runs-on: ubuntu-latest
    needs: [build-sdist, build-wheel]
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: sdist
      - uses: actions/download-artifact@v4
        with:
          name: wheel
      - run: echo "hashes=$(sha256sum -- transmission_delete_unwanted-*.tar.gz transmission_delete_unwanted-*.whl | base64 --wrap=0)" >> "$GITHUB_OUTPUT"
        id: hash
  pytest:
    strategy:
      matrix:
        python_version: ["3.9", "3.12"]
      fail-fast: false
    runs-on: ubuntu-latest
    needs: build-wheel
    steps:
      - uses: actions/checkout@v4
      - uses: actions/download-artifact@v4
        with:
          name: wheel
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}
      - run: python -m venv .venv
      - run: .venv/bin/pip install transmission_delete_unwanted-*.whl
      - run: .venv/bin/pip install --requirement pytest-requirements.txt
      - run: sudo apt-get install --yes transmission-daemon
      - run: .venv/bin/pytest
  smoketest:
    strategy:
      matrix:
        python_version: ["3.9", "3.12"]
      fail-fast: false
    runs-on: ubuntu-latest
    needs: build-wheel
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: wheel
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python_version }}
      - run: python -m venv .venv
      - run: .venv/bin/pip install transmission_delete_unwanted-*.whl
      - run: sudo apt-get install --yes transmission-daemon transmission-cli
      - run: sudo systemctl stop transmission-daemon.service
      - run: mkdir /tmp/download /tmp/transmission
      - run: mkdir /tmp/download/test_torrent
      - run: dd if=/dev/urandom of=/tmp/download/test_torrent/test0.txt bs=1M count=2
      - run: dd if=/dev/urandom of=/tmp/download/test_torrent/test1.txt bs=1M count=1
      - run: transmission-create /tmp/download/test_torrent
      - run: transmission-daemon --download-dir /tmp/download
      # The daemon might not come up instantenously; retry until it does.
      - run: "while ! transmission-remote --debug --add test_torrent.torrent; do sleep 1; done"
        timeout-minutes: 1
      - run: echo test_torrent/test0.txt | .venv/bin/transmission-mark-unwanted
      - run: "[[ -e /tmp/download/test_torrent/test0.txt ]]"
      - run: "[[ -e /tmp/download/test_torrent/test1.txt ]]"
      - run: .venv/bin/transmission-delete-unwanted
      - run: "! [[ -e /tmp/download/test_torrent/test0.txt ]]"
      - run: "[[ -e /tmp/download/test_torrent/test1.txt ]]"
  pylint:
    runs-on: ubuntu-latest
    needs: build-sdist
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: sdist
      - run: tar --gzip --extract --verbose --strip-components=1 --file transmission_delete_unwanted-*.tar.gz
      - run: python -m venv .venv
      - run: .venv/bin/pip install
             --requirement pylint-requirements.txt
             --requirement requirements.txt
             --requirement pytest-requirements.txt
      - run: .venv/bin/pylint --verbose src transmission_delete_unwanted_tests
        env:
          PYTHONPATH: .
  black:
    runs-on: ubuntu-latest
    needs: build-sdist
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: sdist
      - run: tar --gzip --extract --verbose --strip-components=1 --file transmission_delete_unwanted-*.tar.gz
      - run: python -m venv .venv
      - run: .venv/bin/pip install --requirement black-requirements.txt
      - run: .venv/bin/black --diff --check .
  provenance:
    permissions:
      actions: read
      id-token: write
      contents: write
    needs: [hash]
    uses: slsa-framework/slsa-github-generator/.github/workflows/generator_generic_slsa3.yml@v2.0.0
    with:
      base64-subjects: "${{ needs.hash.outputs.hashes }}"
  testpypi:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/transmission_delete_unwanted-')
    needs:
      - build-sdist
      - build-wheel
    permissions:
      id-token: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          name: sdist
      - uses: actions/download-artifact@v4
        with:
          name: wheel
      - uses: pypa/gh-action-pypi-publish@release/v1
        with:
          repository-url: https://test.pypi.org/legacy/
          verbose: true
          print-hash: true
          skip-existing: true
          packages-dir: .
  release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/transmission_delete_unwanted-')
    needs:
      - build-sdist
      - build-wheel
      - provenance
      # These are not strictly necessary, but it would be dangerous to create a release
      # if they fail.
      - pytest
      - smoketest
      - black
      - pylint
      - testpypi
    permissions:
      contents: write
    steps:
      - uses: actions/download-artifact@v4
        with:
          merge-multiple: true
      - uses: softprops/action-gh-release@v1
        with:
          draft: true
          files: "*"
          generate_release_notes: true