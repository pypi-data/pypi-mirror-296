# generated by datamodel-codegen:
#   filename:  pages.json
#   timestamp: 2024-09-02T14:02:23+00:00

from __future__ import annotations

from datetime import datetime
from typing import Optional

from pydantic import Field

from . import CanvasBaseModel



class Page(CanvasBaseModel):
    page_id: Optional[int] = Field(None, examples=[1], repr=False)
    """
    the ID of the page
    """

    url: Optional[str] = Field(None, examples=['my-page-title'])
    """
    the unique locator for the page
    """

    title: Optional[str] = Field(None, examples=['My Page Title'])
    """
    the title of the page
    """

    created_at: Optional[datetime] = Field(
        None, examples=['2012-08-06T16:46:33-06:00'], repr=False
    )
    """
    the creation date for the page
    """

    updated_at: Optional[datetime] = Field(
        None, examples=['2012-08-08T14:25:20-06:00'], repr=False
    )
    """
    the date the page was last updated
    """

    hide_from_students: Optional[bool] = Field(None, examples=[False], repr=False)
    """
    (DEPRECATED) whether this page is hidden from students (note: this is always reflected as the inverse of the published value)
    """

    editing_roles: Optional[str] = Field(
        None, examples=['teachers,students'], repr=False
    )
    """
    roles allowed to edit the page; comma-separated list comprising a combination of 'teachers', 'students', 'members', and/or 'public' if not supplied, course defaults are used
    """

    last_edited_by: Optional[User] = Field(None, repr=False)
    """
    the User who last edited the page (this may not be present if the page was imported from another system)
    """

    body: Optional[str] = Field(None, examples=['<p>Page Content</p>'], repr=False)
    """
    the page content, in HTML (present when requesting a single page; optionally included when listing pages)
    """

    published: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    whether the page is published (true) or draft state (false).
    """

    publish_at: Optional[datetime] = Field(
        None, examples=['2022-09-01T00:00:00'], repr=False
    )
    """
    scheduled publication date for this page
    """

    front_page: Optional[bool] = Field(None, examples=[False], repr=False)
    """
    whether this page is the front page for the wiki
    """

    locked_for_user: Optional[bool] = Field(None, examples=[False], repr=False)
    """
    Whether or not this is locked for the user.
    """

    lock_info: Optional[LockInfo] = Field(None, repr=False)
    """
    (Optional) Information for the user about the lock. Present when locked_for_user is true.
    """

    lock_explanation: Optional[str] = Field(
        None, examples=['This page is locked until September 1 at 12:00am'], repr=False
    )
    """
    (Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.
    """



class PageRevision(CanvasBaseModel):
    revision_id: Optional[int] = Field(None, examples=[7])
    """
    an identifier for this revision of the page
    """

    updated_at: Optional[datetime] = Field(None, examples=['2012-08-07T11:23:58-06:00'])
    """
    the time when this revision was saved
    """

    latest: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    whether this is the latest revision or not
    """

    edited_by: Optional[User] = Field(None, repr=False)
    """
    the User who saved this revision, if applicable (this may not be present if the page was imported from another system)
    """

    url: Optional[str] = Field(None, examples=['old-page-title'], repr=False)
    """
    the following fields are not included in the index action and may be omitted from the show action via summary=1 the historic url of the page
    """

    title: Optional[str] = Field(None, examples=['Old Page Title'], repr=False)
    """
    the historic page title
    """

    body: Optional[str] = Field(None, examples=['<p>Old Page Content</p>'], repr=False)
    """
    the historic page contents
    """




from .assignments import LockInfo  # noqa: E402
from .users import User  # noqa: E402
Page.model_rebuild()
PageRevision.model_rebuild()