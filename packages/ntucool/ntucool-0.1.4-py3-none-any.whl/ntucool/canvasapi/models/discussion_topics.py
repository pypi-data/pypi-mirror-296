# generated by datamodel-codegen:
#   filename:  discussion_topics.json
#   timestamp: 2024-09-02T14:02:23+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Optional

from pydantic import Field

from . import CanvasBaseModel



class FileAttachment(CanvasBaseModel):
    content_type: Optional[str] = Field(
        None, alias='content-type', examples=['unknown/unknown']
    )
    url: Optional[str] = Field(
        None, examples=['http://www.example.com/courses/1/files/1/download']
    )
    filename: Optional[str] = Field(None, examples=['content.txt'])
    display_name: Optional[str] = Field(None, examples=['content.txt'])


class DiscussionTopic(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=[1])
    """
    The ID of this topic.
    """

    title: Optional[str] = Field(None, examples=['Topic 1'])
    """
    The topic title.
    """

    message: Optional[str] = Field(None, examples=['<p>content here</p>'], repr=False)
    """
    The HTML content of the message body.
    """

    html_url: Optional[str] = Field(
        None, examples=['https://<canvas>/courses/1/discussion_topics/2'], repr=False
    )
    """
    The URL to the discussion topic in canvas.
    """

    posted_at: Optional[datetime] = Field(
        None, examples=['2037-07-21T13:29:31Z'], repr=False
    )
    """
    The datetime the topic was posted. If it is null it hasn't been posted yet. (see delayed_post_at)
    """

    last_reply_at: Optional[datetime] = Field(
        None, examples=['2037-07-28T19:38:31Z'], repr=False
    )
    """
    The datetime for when the last reply was in the topic.
    """

    require_initial_post: Optional[bool] = Field(None, examples=[False], repr=False)
    """
    If true then a user may not respond to other replies until that user has made an initial reply. Defaults to false.
    """

    user_can_see_posts: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    Whether or not posts in this topic are visible to the user.
    """

    discussion_subentry_count: Optional[int] = Field(None, examples=[0], repr=False)
    """
    The count of entries in the topic.
    """

    read_state: Optional[str] = Field(None, examples=['read'], repr=False)
    """
    The read_state of the topic for the current user, 'read' or 'unread'.
    """

    unread_count: Optional[int] = Field(None, examples=[0], repr=False)
    """
    The count of unread entries of this topic for the current user.
    """

    subscribed: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    Whether or not the current user is subscribed to this topic.
    """

    subscription_hold: Optional[str] = Field(
        None, examples=['not_in_group_set'], repr=False
    )
    """
    (Optional) Why the user cannot subscribe to this topic. Only one reason will be returned even if multiple apply. Can be one of: 'initial_post_required': The user must post a reply first; 'not_in_group_set': The user is not in the group set for this graded group discussion; 'not_in_group': The user is not in this topic's group; 'topic_is_announcement': This topic is an announcement
    """

    assignment_id: Optional[int] = Field(None, repr=False)
    """
    The unique identifier of the assignment if the topic is for grading, otherwise null.
    """

    delayed_post_at: Optional[datetime] = Field(None, repr=False)
    """
    The datetime to publish the topic (if not right away).
    """

    published: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    Whether this discussion topic is published (true) or draft state (false)
    """

    lock_at: Optional[datetime] = Field(None, repr=False)
    """
    The datetime to lock the topic (if ever).
    """

    locked: Optional[bool] = Field(None, examples=[False], repr=False)
    """
    Whether or not the discussion is 'closed for comments'.
    """

    pinned: Optional[bool] = Field(None, examples=[False], repr=False)
    """
    Whether or not the discussion has been 'pinned' by an instructor
    """

    locked_for_user: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    Whether or not this is locked for the user.
    """

    lock_info: Optional[LockInfo] = Field(None, repr=False)
    """
    (Optional) Information for the user about the lock. Present when locked_for_user is true.
    """

    lock_explanation: Optional[str] = Field(
        None,
        examples=['This discussion is locked until September 1 at 12:00am'],
        repr=False,
    )
    """
    (Optional) An explanation of why this is locked for the user. Present when locked_for_user is true.
    """

    user_name: Optional[str] = Field(None, examples=['User Name'], repr=False)
    """
    The username of the topic creator.
    """

    topic_children: Optional[list[int]] = Field(None, examples=[[5, 7, 10]], repr=False)
    """
    DEPRECATED An array of topic_ids for the group discussions the user is a part of.
    """

    group_topic_children: Optional[list[dict[str, Any]]] = Field(
        None,
        examples=[
            [
                {'id': 5, 'group_id': 1},
                {'id': 7, 'group_id': 5},
                {'id': 10, 'group_id': 4},
            ]
        ],
        repr=False,
    )
    """
    An array of group discussions the user is a part of. Fields include: id, group_id
    """

    root_topic_id: Optional[int] = Field(None, repr=False)
    """
    If the topic is for grading and a group assignment this will point to the original topic in the course.
    """

    podcast_url: Optional[str] = Field(
        None,
        examples=[
            '/feeds/topics/1/enrollment_1XAcepje4u228rt4mi7Z1oFbRpn3RAkTzuXIGOPe.rss'
        ],
        repr=False,
    )
    """
    If the topic is a podcast topic this is the feed url for the current user.
    """

    discussion_type: Optional[str] = Field(None, examples=['side_comment'], repr=False)
    """
    The type of discussion. Values are 'side_comment' or 'not_threaded', for discussions that only allow one level of nested comments, and 'threaded' for fully threaded discussions.
    """

    group_category_id: Optional[int] = Field(None, repr=False)
    """
    The unique identifier of the group category if the topic is a group discussion, otherwise null.
    """

    attachments: Optional[list[FileAttachment]] = Field(None, repr=False)
    """
    Array of file attachments.
    """

    permissions: Optional[dict[str, Any]] = Field(
        None, examples=[{'attach': True}], repr=False
    )
    """
    The current user's permissions on this topic.
    """

    allow_rating: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    Whether or not users can rate entries in this topic.
    """

    only_graders_can_rate: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    Whether or not grade permissions are required to rate entries.
    """

    sort_by_rating: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    Whether or not entries should be sorted by rating.
    """


from .assignments import LockInfo  # noqa: E402