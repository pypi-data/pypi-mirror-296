# generated by datamodel-codegen:
#   filename:  appointment_groups.json
#   timestamp: 2024-09-02T14:02:23+00:00

from __future__ import annotations

from datetime import datetime
from typing import Optional

from pydantic import Field

from . import CanvasBaseModel



class Appointment(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=[987])
    """
    The appointment identifier.
    """

    start_at: Optional[datetime] = Field(None, examples=['2012-07-20T15:00:00-06:00'])
    """
    Start time for the appointment
    """

    end_at: Optional[datetime] = Field(None, examples=['2012-07-20T15:00:00-06:00'])
    """
    End time for the appointment
    """



class AppointmentGroup(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=[543])
    """
    The ID of the appointment group
    """

    title: Optional[str] = Field(None, examples=['Final Presentation'])
    """
    The title of the appointment group
    """

    start_at: Optional[datetime] = Field(
        None, examples=['2012-07-20T15:00:00-06:00'], repr=False
    )
    """
    The start of the first time slot in the appointment group
    """

    end_at: Optional[datetime] = Field(
        None, examples=['2012-07-20T17:00:00-06:00'], repr=False
    )
    """
    The end of the last time slot in the appointment group
    """

    description: Optional[str] = Field(None, examples=['Es muy importante'], repr=False)
    """
    The text description of the appointment group
    """

    location_name: Optional[str] = Field(
        None, examples=["El Tigre Chino's office"], repr=False
    )
    """
    The location name of the appointment group
    """

    location_address: Optional[str] = Field(None, examples=['Room 234'], repr=False)
    """
    The address of the appointment group's location
    """

    participant_count: Optional[int] = Field(None, examples=[2], repr=False)
    """
    The number of participant who have reserved slots (see include[] argument)
    """

    reserved_times: Optional[list[Appointment]] = Field(
        None,
        examples=[
            [
                {
                    'id': 987,
                    'start_at': '2012-07-20T15:00:00-06:00',
                    'end_at': '2012-07-20T15:00:00-06:00',
                }
            ]
        ],
        repr=False,
    )
    """
    The start and end times of slots reserved by the current user as well as the id of the calendar event for the reservation (see include[] argument)
    """

    allow_observer_signup: Optional[bool] = Field(None, examples=[False], repr=False)
    """
    Boolean indicating whether observer users should be able to sign-up for an appointment
    """

    context_codes: Optional[list[str]] = Field(
        None, examples=[['course_123']], repr=False
    )
    """
    The context codes (i.e. courses) this appointment group belongs to. Only people in these courses will be eligible to sign up.
    """

    sub_context_codes: Optional[list[int]] = Field(
        None, examples=[['course_section_234']], repr=False
    )
    """
    The sub-context codes (i.e. course sections and group categories) this appointment group is restricted to
    """

    workflow_state: Optional[str] = Field(None, examples=['active'], repr=False)
    """
    Current state of the appointment group ('pending', 'active' or 'deleted'). 'pending' indicates that it has not been published yet and is invisible to participants.
    """

    requiring_action: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    Boolean indicating whether the current user needs to sign up for this appointment group (i.e. it's reservable and the min_appointments_per_participant limit has not been met by this user).
    """

    appointments_count: Optional[int] = Field(None, examples=[2], repr=False)
    """
    Number of time slots in this appointment group
    """

    appointments: Optional[list[CalendarEvent]] = Field(None, examples=[[]], repr=False)
    """
    Calendar Events representing the time slots (see include[] argument) Refer to the Calendar Events API for more information
    """

    new_appointments: Optional[list[CalendarEvent]] = Field(
        None, examples=[[]], repr=False
    )
    """
    Newly created time slots (same format as appointments above). Only returned in Create/Update responses where new time slots have been added
    """

    max_appointments_per_participant: Optional[int] = Field(
        None, examples=[1], repr=False
    )
    """
    Maximum number of time slots a user may register for, or null if no limit
    """

    min_appointments_per_participant: Optional[int] = Field(
        None, examples=[1], repr=False
    )
    """
    Minimum number of time slots a user must register for. If not set, users do not need to sign up for any time slots
    """

    participants_per_appointment: Optional[int] = Field(None, examples=[1], repr=False)
    """
    Maximum number of participants that may register for each time slot, or null if no limit
    """

    participant_visibility: Optional[str] = Field(
        None, examples=['private'], repr=False
    )
    """
    'private' means participants cannot see who has signed up for a particular time slot, 'protected' means that they can
    """

    participant_type: Optional[str] = Field(None, examples=['User'], repr=False)
    """
    Indicates how participants sign up for the appointment group, either as individuals ('User') or in student groups ('Group'). Related to sub_context_codes (i.e. 'Group' signups always have a single group category)
    """

    url: Optional[str] = Field(
        None, examples=['https://example.com/api/v1/appointment_groups/543'], repr=False
    )
    """
    URL for this appointment group (to update, delete, etc.)
    """

    html_url: Optional[str] = Field(
        None, examples=['http://example.com/appointment_groups/1'], repr=False
    )
    """
    URL for a user to view this appointment group
    """

    created_at: Optional[datetime] = Field(
        None, examples=['2012-07-13T10:55:20-06:00'], repr=False
    )
    """
    When the appointment group was created
    """

    updated_at: Optional[datetime] = Field(
        None, examples=['2012-07-13T10:55:20-06:00'], repr=False
    )
    """
    When the appointment group was last updated
    """


from .calendar_events import CalendarEvent  # noqa: E402