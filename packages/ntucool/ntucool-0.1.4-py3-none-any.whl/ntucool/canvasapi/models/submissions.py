# generated by datamodel-codegen:
#   filename:  submissions.json
#   timestamp: 2024-09-02T14:02:23+00:00

from __future__ import annotations

from datetime import datetime
from typing import Optional

from pydantic import Field

from . import CanvasBaseModel



class MediaComment(CanvasBaseModel):
    content_type: Optional[str] = Field(
        None, alias='content-type', examples=['audio/mp4']
    )
    display_name: Optional[str] = Field(None, examples=['something'])
    media_id: Optional[str] = Field(None, examples=['3232'])
    media_type: Optional[str] = Field(None, examples=['audio'])
    url: Optional[str] = Field(None, examples=['http://example.com/media_url'])


class SubmissionComment(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=[37])
    author_id: Optional[int] = Field(None, examples=[134])
    author_name: Optional[str] = Field(None, examples=['Toph Beifong'])
    author: Optional[str] = Field(None, examples=['{}'])
    """
    Abbreviated user object UserDisplay (see users API).
    """

    comment: Optional[str] = Field(None, examples=["Well here's the thing..."])
    created_at: Optional[datetime] = Field(None, examples=['2012-01-01T01:00:00Z'])
    edited_at: Optional[datetime] = Field(None, examples=['2012-01-02T01:00:00Z'])
    media_comment: Optional[MediaComment] = None


class Submission(CanvasBaseModel):
    assignment_id: Optional[int] = Field(None, examples=[23])
    """
    The submission's assignment id
    """

    assignment: Optional[Assignment] = Field(None, repr=False)
    """
    The submission's assignment (see the assignments API) (optional)
    """

    course: Optional[Course] = Field(None, repr=False)
    """
    The submission's course (see the course API) (optional)
    """

    attempt: Optional[int] = Field(None, examples=[1], repr=False)
    """
    This is the submission attempt number.
    """

    body: Optional[str] = Field(
        None, examples=['There are three factors too...'], repr=False
    )
    """
    The content of the submission, if it was submitted directly in a text field.
    """

    grade: Optional[str] = Field(None, examples=['A-'], repr=False)
    """
    The grade for the submission, translated into the assignment grading scheme (so a letter grade, for example).
    """

    grade_matches_current_submission: Optional[bool] = Field(
        None, examples=[True], repr=False
    )
    """
    A boolean flag which is false if the student has re-submitted since the submission was last graded.
    """

    html_url: Optional[str] = Field(
        None,
        examples=['http://example.com/courses/255/assignments/543/submissions/134'],
        repr=False,
    )
    """
    URL to the submission. This will require the user to log in.
    """

    preview_url: Optional[str] = Field(
        None,
        examples=[
            'http://example.com/courses/255/assignments/543/submissions/134?preview=1'
        ],
        repr=False,
    )
    """
    URL to the submission preview. This will require the user to log in.
    """

    score: Optional[float] = Field(None, examples=[13.5], repr=False)
    """
    The raw score
    """

    submission_comments: Optional[list[SubmissionComment]] = Field(None, repr=False)
    """
    Associated comments for a submission (optional)
    """

    submission_type: Optional[str] = Field(
        None, examples=['online_text_entry'], repr=False
    )
    """
    The types of submission ex: ('online_text_entry'|'online_url'|'online_upload'|'online_quiz'|'media_recording'|'student_annotation')
    """

    submitted_at: Optional[datetime] = Field(
        None, examples=['2012-01-01T01:00:00Z'], repr=False
    )
    """
    The timestamp when the assignment was submitted
    """

    url: Optional[str] = Field(None, repr=False)
    """
    The URL of the submission (for 'online_url' submissions).
    """

    user_id: Optional[int] = Field(None, examples=[134])
    """
    The id of the user who created the submission
    """

    grader_id: Optional[int] = Field(None, examples=[86], repr=False)
    """
    The id of the user who graded the submission. This will be null for submissions that haven't been graded yet. It will be a positive number if a real user has graded the submission and a negative number if the submission was graded by a process (e.g. Quiz autograder and autograding LTI tools).  Specifically autograded quizzes set grader_id to the negative of the quiz id.  Submissions autograded by LTI tools set grader_id to the negative of the tool id.
    """

    graded_at: Optional[datetime] = Field(
        None, examples=['2012-01-02T03:05:34Z'], repr=False
    )
    user: Optional[User] = Field(None, repr=False)
    """
    The submissions user (see user API) (optional)
    """

    late: Optional[bool] = Field(None, examples=[False], repr=False)
    """
    Whether the submission was made after the applicable due date
    """

    assignment_visible: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    Whether the assignment is visible to the user who submitted the assignment. Submissions where `assignment_visible` is false no longer count towards the student's grade and the assignment can no longer be accessed by the student. `assignment_visible` becomes false for submissions that do not have a grade and whose assignment is no longer assigned to the student's section.
    """

    excused: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    Whether the assignment is excused.  Excused assignments have no impact on a user's grade.
    """

    missing: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    Whether the assignment is missing.
    """

    late_policy_status: Optional[str] = Field(None, examples=['missing'], repr=False)
    """
    The status of the submission in relation to the late policy. Can be late, missing, extended, none, or null.
    """

    points_deducted: Optional[float] = Field(None, examples=[12.3], repr=False)
    """
    The amount of points automatically deducted from the score by the missing/late policy for a late or missing assignment.
    """

    seconds_late: Optional[float] = Field(None, examples=[300], repr=False)
    """
    The amount of time, in seconds, that an submission is late by.
    """

    workflow_state: Optional[str] = Field(None, examples=['submitted'], repr=False)
    """
    The current state of the submission
    """

    extra_attempts: Optional[float] = Field(None, examples=[10], repr=False)
    """
    Extra submission attempts allowed for the given user and assignment.
    """

    anonymous_id: Optional[str] = Field(None, examples=['acJ4Q'], repr=False)
    """
    A unique short ID identifying this submission without reference to the owning user. Only included if the caller has administrator access for the current account.
    """

    posted_at: Optional[datetime] = Field(
        None, examples=['2020-01-02T11:10:30Z'], repr=False
    )
    """
    The date this submission was posted to the student, or nil if it has not been posted.
    """

    read_status: Optional[str] = Field(None, examples=['read'], repr=False)
    """
    The read status of this submission for the given user (optional). Including read_status will mark submission(s) as read.
    """

    redo_request: Optional[bool] = Field(None, examples=['true'], repr=False)
    """
    This indicates whether the submission has been reassigned by the instructor.
    """




from .assignments import Assignment  # noqa: E402
from .courses import Course  # noqa: E402
from .users import User  # noqa: E402
Submission.model_rebuild()