# generated by datamodel-codegen:
#   filename:  course_audit_log.json
#   timestamp: 2024-09-02T14:02:23+00:00

from __future__ import annotations

from datetime import datetime
from typing import Optional

from pydantic import Field

from . import CanvasBaseModel



class CourseEventLink(CanvasBaseModel):
    course: Optional[int] = Field(None, examples=[12345])
    """
    ID of the course for the event.
    """

    user: Optional[int] = Field(None, examples=[12345])
    """
    ID of the user for the event (who made the change).
    """

    page_view: Optional[str] = Field(
        None, examples=['e2b76430-27a5-0131-3ca1-48e0eb13f29b']
    )
    """
    ID of the page view during the event if it exists.
    """

    copied_from: Optional[int] = Field(None, examples=[12345])
    """
    ID of the course that this course was copied from. This is only included if the event_type is copied_from.
    """

    copied_to: Optional[int] = Field(None, examples=[12345])
    """
    ID of the course that this course was copied to. This is only included if the event_type is copied_to.
    """

    sis_batch: Optional[int] = Field(None, examples=[12345])
    """
    ID of the SIS batch that triggered the event.
    """



class CourseEvent(CanvasBaseModel):
    id: Optional[str] = Field(
        None, examples=['e2b76430-27a5-0131-3ca1-48e0eb13f29b'], repr=False
    )
    """
    ID of the event.
    """

    created_at: Optional[datetime] = Field(
        None, examples=['2012-07-19T15:00:00-06:00'], repr=False
    )
    """
    timestamp of the event
    """

    event_type: Optional[str] = Field(None, examples=['updated'], repr=False)
    """
    Course event type The event type defines the type and schema of the event_data object.
    """

    event_data: Optional[str] = Field(None, examples=['{}'], repr=False)
    """
    Course event data depending on the event type.  This will return an object containing the relevant event data.  An updated event type will return an UpdatedEventData object.
    """

    event_source: Optional[str] = Field(None, examples=['manual|sis|api'], repr=False)
    """
    Course event source depending on the event type.  This will return a string containing the source of the event.
    """

    links: Optional[CourseEventLink] = Field(
        None,
        examples=[
            {
                'course': '12345',
                'user': '12345',
                'page_view': 'e2b76430-27a5-0131-3ca1-48e0eb13f29b',
            }
        ],
        repr=False,
    )
    """
    Jsonapi.org links
    """



class CreatedEventData(CanvasBaseModel):
    name: Optional[list[str]] = Field(None, examples=[[None, 'Course 1']])
    start_at: Optional[list[datetime]] = Field(
        None, examples=[[None, '2012-01-19T15:00:00-06:00']]
    )
    conclude_at: Optional[list[datetime]] = Field(
        None, examples=[[None, '2012-01-19T15:00:00-08:00']]
    )
    is_public: Optional[list[bool]] = Field(None, examples=[[None, False]])
    created_source: Optional[str] = Field(None, examples=['manual|sis|api'])
    """
    The type of action that triggered the creation of the course.
    """



class UpdatedEventData(CanvasBaseModel):
    name: Optional[list[str]] = Field(None, examples=[['Course 1', 'Course 2']])
    start_at: Optional[list[datetime]] = Field(
        None, examples=[['2012-01-19T15:00:00-06:00', '2012-07-19T15:00:00-06:00']]
    )
    conclude_at: Optional[list[datetime]] = Field(
        None, examples=[['2012-01-19T15:00:00-08:00', '2012-07-19T15:00:00-08:00']]
    )
    is_public: Optional[list[bool]] = Field(None, examples=[[True, False]])
