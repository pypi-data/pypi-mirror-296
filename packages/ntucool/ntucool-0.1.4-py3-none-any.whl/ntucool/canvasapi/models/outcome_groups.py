# generated by datamodel-codegen:
#   filename:  outcome_groups.json
#   timestamp: 2024-09-02T14:02:23+00:00

from __future__ import annotations

from datetime import datetime
from typing import Optional

from pydantic import Field

from . import CanvasBaseModel



class OutcomeGroup(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=[1], repr=False)
    """
    the ID of the outcome group
    """

    url: Optional[str] = Field(None, examples=['/api/v1/accounts/1/outcome_groups/1'])
    """
    the URL for fetching/updating the outcome group. should be treated as opaque
    """

    parent_outcome_group: Optional[OutcomeGroup] = Field(None, repr=False)
    """
    an abbreviated OutcomeGroup object representing the parent group of this outcome group, if any. omitted in the abbreviated form.
    """

    context_id: Optional[int] = Field(None, examples=[1], repr=False)
    """
    the context owning the outcome group. may be null for global outcome groups. omitted in the abbreviated form.
    """

    context_type: Optional[str] = Field(None, examples=['Account'], repr=False)
    title: Optional[str] = Field(None, examples=['Outcome group title'])
    """
    title of the outcome group
    """

    description: Optional[str] = Field(
        None, examples=['Outcome group description'], repr=False
    )
    """
    description of the outcome group. omitted in the abbreviated form.
    """

    vendor_guid: Optional[str] = Field(None, examples=['customid9000'], repr=False)
    """
    A custom GUID for the learning standard.
    """

    subgroups_url: Optional[str] = Field(
        None, examples=['/api/v1/accounts/1/outcome_groups/1/subgroups'], repr=False
    )
    """
    the URL for listing/creating subgroups under the outcome group. should be treated as opaque
    """

    outcomes_url: Optional[str] = Field(
        None, examples=['/api/v1/accounts/1/outcome_groups/1/outcomes'], repr=False
    )
    """
    the URL for listing/creating outcome links under the outcome group. should be treated as opaque
    """

    import_url: Optional[str] = Field(
        None, examples=['/api/v1/accounts/1/outcome_groups/1/import'], repr=False
    )
    """
    the URL for importing another group into this outcome group. should be treated as opaque. omitted in the abbreviated form.
    """

    can_edit: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    whether the current user can update the outcome group
    """



class OutcomeLink(CanvasBaseModel):
    url: Optional[str] = Field(
        None, examples=['/api/v1/accounts/1/outcome_groups/1/outcomes/1']
    )
    """
    the URL for fetching/updating the outcome link. should be treated as opaque
    """

    context_id: Optional[int] = Field(None, examples=[1], repr=False)
    """
    the context owning the outcome link. will match the context owning the outcome group containing the outcome link; included for convenience. may be null for links in global outcome groups.
    """

    context_type: Optional[str] = Field(None, examples=['Account'], repr=False)
    outcome_group: Optional[OutcomeGroup] = None
    """
    an abbreviated OutcomeGroup object representing the group containing the outcome link.
    """

    outcome: Optional[Outcome] = None
    """
    an abbreviated Outcome object representing the outcome linked into the containing outcome group.
    """

    assessed: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    whether this outcome has been used to assess a student in the context of this outcome link.  In other words, this will be set to true if the context is a course, and a student has been assessed with this outcome in that course.
    """

    can_unlink: Optional[bool] = Field(None, repr=False)
    """
    whether this outcome link is manageable and is not the last link to an aligned outcome
    """




from .outcomes import Outcome  # noqa: E402
OutcomeGroup.model_rebuild()