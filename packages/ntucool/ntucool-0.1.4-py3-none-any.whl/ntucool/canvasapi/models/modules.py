# generated by datamodel-codegen:
#   filename:  modules.json
#   timestamp: 2024-09-02T14:02:23+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Optional

from pydantic import Field

from . import CanvasBaseModel



class CompletionRequirement(CanvasBaseModel):
    type: Optional[str] = Field(None, examples=['min_score'])
    """
    one of 'must_view', 'must_submit', 'must_contribute', 'min_score', 'must_mark_done'
    """

    min_score: Optional[int] = Field(None, examples=[10])
    """
    minimum score required to complete (only present when type == 'min_score')
    """

    completed: Optional[bool] = Field(None, examples=[True])
    """
    whether the calling user has met this requirement (Optional; present only if the caller is a student or if the optional parameter 'student_id' is included)
    """



class ContentDetails(CanvasBaseModel):
    points_possible: Optional[int] = Field(None, examples=[20])
    due_at: Optional[datetime] = Field(None, examples=['2012-12-31T06:00:00-06:00'])
    unlock_at: Optional[datetime] = Field(None, examples=['2012-12-31T06:00:00-06:00'])
    lock_at: Optional[datetime] = Field(None, examples=['2012-12-31T06:00:00-06:00'])
    locked_for_user: Optional[bool] = Field(None, examples=[True])
    lock_explanation: Optional[str] = Field(
        None,
        examples=[
            'This quiz is part of an unpublished module and is not available yet.'
        ],
    )
    lock_info: Optional[LockInfo] = Field(
        None,
        examples=[
            {
                'asset_string': 'assignment_4',
                'unlock_at': '2012-12-31T06:00:00-06:00',
                'lock_at': '2012-12-31T06:00:00-06:00',
                'context_module': {},
            }
        ],
    )


class ModuleItem(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=[768])
    """
    the unique identifier for the module item
    """

    module_id: Optional[int] = Field(None, examples=[123], repr=False)
    """
    the id of the Module this item appears in
    """

    position: Optional[int] = Field(None, examples=[1], repr=False)
    """
    the position of this item in the module (1-based)
    """

    title: Optional[str] = Field(
        None, examples=['Square Roots: Irrational numbers or boxy vegetables?']
    )
    """
    the title of this item
    """

    indent: Optional[int] = Field(None, examples=[0], repr=False)
    """
    0-based indent level; module items may be indented to show a hierarchy
    """

    type: Optional[str] = Field(None, examples=['Assignment'], repr=False)
    """
    the type of object referred to one of 'File', 'Page', 'Discussion', 'Assignment', 'Quiz', 'SubHeader', 'ExternalUrl', 'ExternalTool'
    """

    content_id: Optional[int] = Field(None, examples=[1337], repr=False)
    """
    the id of the object referred to applies to 'File', 'Discussion', 'Assignment', 'Quiz', 'ExternalTool' types
    """

    html_url: Optional[str] = Field(
        None,
        examples=['https://canvas.example.edu/courses/222/modules/items/768'],
        repr=False,
    )
    """
    link to the item in Canvas
    """

    url: Optional[str] = Field(
        None,
        examples=['https://canvas.example.edu/api/v1/courses/222/assignments/987'],
        repr=False,
    )
    """
    (Optional) link to the Canvas API object, if applicable
    """

    page_url: Optional[str] = Field(None, examples=['my-page-title'], repr=False)
    """
    (only for 'Page' type) unique locator for the linked wiki page
    """

    external_url: Optional[str] = Field(
        None, examples=['https://www.example.com/externalurl'], repr=False
    )
    """
    (only for 'ExternalUrl' and 'ExternalTool' types) external url that the item points to
    """

    new_tab: Optional[bool] = Field(None, examples=[False], repr=False)
    """
    (only for 'ExternalTool' type) whether the external tool opens in a new tab
    """

    completion_requirement: Optional[CompletionRequirement] = Field(
        None,
        examples=[{'type': 'min_score', 'min_score': 10, 'completed': True}],
        repr=False,
    )
    """
    Completion requirement for this module item
    """

    content_details: Optional[ContentDetails] = Field(
        None,
        examples=[
            {
                'points_possible': 20,
                'due_at': '2012-12-31T06:00:00-06:00',
                'unlock_at': '2012-12-31T06:00:00-06:00',
                'lock_at': '2012-12-31T06:00:00-06:00',
            }
        ],
        repr=False,
    )
    """
    (Present only if requested through include[]=content_details) If applicable, returns additional details specific to the associated object
    """

    published: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    (Optional) Whether this module item is published. This field is present only if the caller has permission to view unpublished items.
    """



class ModuleItemSequenceNode(CanvasBaseModel):
    prev: Optional[ModuleItem] = None
    """
    The previous ModuleItem in the sequence
    """

    current: Optional[ModuleItem] = Field(
        None,
        examples=[
            {
                'id': 768,
                'module_id': 123,
                'title': 'A lonely page',
                'type': 'pages.json#/$defs/Page',
            }
        ],
    )
    """
    The ModuleItem being queried
    """

    next: Optional[ModuleItem] = Field(
        None,
        examples=[
            {
                'id': 769,
                'module_id': 127,
                'title': 'Project 1',
                'type': 'assignments.json#/$defs/Assignment',
            }
        ],
    )
    """
    The next ModuleItem in the sequence
    """

    mastery_path: Optional[dict[str, Any]] = Field(
        None,
        examples=[
            {
                'locked': True,
                'assignment_sets': [],
                'selected_set_id': None,
                'awaiting_choice': False,
                'still_processing': False,
                'modules_url': '/courses/11/modules',
                'choose_url': '/courses/11/modules/items/9/choose',
                'modules_tab_disabled': False,
            }
        ],
    )
    """
    The conditional release rule for the module item, if applicable
    """



class OverrideTarget(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=[7])
    """
    the ID of the user or section that the override is targeting
    """

    name: Optional[str] = Field(None, examples=['Section 6'])
    """
    the name of the user or section that the override is targeting
    """



class Module(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=[123])
    """
    the unique identifier for the module
    """

    workflow_state: Optional[str] = Field(None, examples=['active'], repr=False)
    """
    the state of the module: 'active', 'deleted'
    """

    position: Optional[int] = Field(None, examples=[2], repr=False)
    """
    the position of this module in the course (1-based)
    """

    name: Optional[str] = Field(None, examples=['Imaginary Numbers and You'])
    """
    the name of this module
    """

    unlock_at: Optional[datetime] = Field(
        None, examples=['2012-12-31T06:00:00-06:00'], repr=False
    )
    """
    (Optional) the date this module will unlock
    """

    require_sequential_progress: Optional[bool] = Field(
        None, examples=[True], repr=False
    )
    """
    Whether module items must be unlocked in order
    """

    prerequisite_module_ids: Optional[list[int]] = Field(
        None, examples=[[121, 122]], repr=False
    )
    """
    IDs of Modules that must be completed before this one is unlocked
    """

    items_count: Optional[int] = Field(None, examples=[10], repr=False)
    """
    The number of items in the module
    """

    items_url: Optional[str] = Field(
        None,
        examples=['https://canvas.example.com/api/v1/modules/123/items'],
        repr=False,
    )
    """
    The API URL to retrive this module's items
    """

    items: Optional[list[ModuleItem]] = Field(None, repr=False)
    """
    The contents of this module, as an array of Module Items. (Present only if requested via include[]=items AND the module is not deemed too large by Canvas.)
    """

    state: Optional[str] = Field(None, examples=['started'], repr=False)
    """
    The state of this Module for the calling user one of 'locked', 'unlocked', 'started', 'completed' (Optional; present only if the caller is a student or if the optional parameter 'student_id' is included)
    """

    completed_at: Optional[datetime] = Field(None, repr=False)
    """
    the date the calling user completed the module (Optional; present only if the caller is a student or if the optional parameter 'student_id' is included)
    """

    publish_final_grade: Optional[bool] = Field(None, repr=False)
    """
    if the student's final grade for the course should be published to the SIS upon completion of this module
    """

    published: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    (Optional) Whether this module is published. This field is present only if the caller has permission to view unpublished modules.
    """



class ModuleItemSequence(CanvasBaseModel):
    items: Optional[list[ModuleItemSequenceNode]] = Field(
        None,
        examples=[
            [
                {
                    'prev': None,
                    'current': {
                        'id': 768,
                        'module_id': 123,
                        'title': 'A lonely page',
                        'type': 'pages.json#/$defs/Page',
                    },
                    'next': {
                        'id': 769,
                        'module_id': 127,
                        'title': 'Project 1',
                        'type': 'assignments.json#/$defs/Assignment',
                    },
                    'mastery_path': {
                        'locked': True,
                        'assignment_sets': [],
                        'selected_set_id': None,
                        'awaiting_choice': False,
                        'still_processing': False,
                        'modules_url': '/courses/11/modules',
                        'choose_url': '/courses/11/modules/items/9/choose',
                        'modules_tab_disabled': False,
                    },
                }
            ]
        ],
    )
    """
    an array containing one ModuleItemSequenceNode for each appearence of the asset in the module sequence (up to 10 total)
    """

    modules: Optional[list[Module]] = Field(
        None,
        examples=[
            [{'id': 123, 'name': 'Overview'}, {'id': 127, 'name': 'Imaginary Numbers'}]
        ],
    )
    """
    an array containing each Module referenced above
    """



class ModuleAssignmentOverride(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=[4355])
    """
    the ID of the assignment override
    """

    context_module_id: Optional[int] = Field(None, examples=[567])
    """
    the ID of the module the override applies to
    """

    title: Optional[str] = Field(None, examples=['Section 6'])
    """
    the title of the override
    """

    students: Optional[OverrideTarget] = None
    """
    an array of the override's target students (present only if the override targets an adhoc set of students)
    """

    course_section: Optional[OverrideTarget] = None
    """
    the override's target section (present only if the override targets a section)
    """


from .assignments import LockInfo  # noqa: E402