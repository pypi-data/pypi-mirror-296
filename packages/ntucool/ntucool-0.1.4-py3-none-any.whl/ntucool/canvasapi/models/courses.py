# generated by datamodel-codegen:
#   filename:  courses.json
#   timestamp: 2024-09-02T14:02:23+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Optional

from pydantic import Field

from . import CanvasBaseModel



class Term(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=[1])
    name: Optional[str] = Field(None, examples=['Default Term'])
    start_at: Optional[datetime] = Field(None, examples=['2012-06-01T00:00:00-06:00'])
    end_at: Optional[datetime] = None


class CourseProgress(CanvasBaseModel):
    requirement_count: Optional[int] = Field(None, examples=[10])
    """
    total number of requirements from all modules
    """

    requirement_completed_count: Optional[int] = Field(None, examples=[1])
    """
    total number of requirements the user has completed from all modules
    """

    next_requirement_url: Optional[str] = Field(
        None, examples=['http://localhost/courses/1/modules/items/2']
    )
    """
    url to next module item that has an unmet requirement. null if the user has completed the course or the current module does not require sequential progress
    """

    completed_at: Optional[datetime] = Field(
        None, examples=['2013-06-01T00:00:00-06:00']
    )
    """
    date the course was completed. null if the course has not been completed by this user
    """



class CalendarLink(CanvasBaseModel):
    ics: Optional[str] = Field(
        None,
        examples=['https://canvas.instructure.com/feeds/calendars/course_abcdef.ics'],
    )
    """
    The URL of the calendar in ICS format
    """



class Course(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=[370663])
    """
    the unique identifier for the course
    """

    sis_course_id: Optional[str] = Field(None, repr=False)
    """
    the SIS identifier for the course, if defined. This field is only included if the user has permission to view SIS information.
    """

    uuid: Optional[str] = Field(
        None, examples=['WvAHhY5FINzq5IyRIJybGeiXyFkG3SqHUPb7jZY5'], repr=False
    )
    """
    the UUID of the course
    """

    integration_id: Optional[str] = Field(None, repr=False)
    """
    the integration identifier for the course, if defined. This field is only included if the user has permission to view SIS information.
    """

    sis_import_id: Optional[int] = Field(None, examples=[34], repr=False)
    """
    the unique identifier for the SIS import. This field is only included if the user has permission to manage SIS information.
    """

    name: Optional[str] = Field(None, examples=['InstructureCon 2012'])
    """
    the full name of the course. If the requesting user has set a nickname for the course, the nickname will be shown here.
    """

    course_code: Optional[str] = Field(None, examples=['INSTCON12'])
    """
    the course code
    """

    original_name: Optional[str] = Field(
        None, examples=['InstructureCon-2012-01'], repr=False
    )
    """
    the actual course name. This field is returned only if the requesting user has set a nickname for the course.
    """

    workflow_state: Optional[str] = Field(None, examples=['available'], repr=False)
    """
    the current state of the course, also known as ‘status’.  The value will be one of the following values: 'unpublished', 'available', 'completed', or 'deleted'.  NOTE: When fetching a singular course that has a 'deleted' workflow state value, an error will be returned with a message of 'The specified resource does not exist.'
    """

    account_id: Optional[int] = Field(None, examples=[81259], repr=False)
    """
    the account associated with the course
    """

    root_account_id: Optional[int] = Field(None, examples=[81259], repr=False)
    """
    the root account associated with the course
    """

    enrollment_term_id: Optional[int] = Field(None, examples=[34], repr=False)
    """
    the enrollment term associated with the course
    """

    grading_periods: Optional[list[GradingPeriod]] = Field(None, repr=False)
    """
    A list of grading periods associated with the course
    """

    grading_standard_id: Optional[int] = Field(None, examples=[25], repr=False)
    """
    the grading standard associated with the course
    """

    grade_passback_setting: Optional[str] = Field(
        None, examples=['nightly_sync'], repr=False
    )
    """
    the grade_passback_setting set on the course
    """

    created_at: Optional[datetime] = Field(
        None, examples=['2012-05-01T00:00:00-06:00'], repr=False
    )
    """
    the date the course was created.
    """

    start_at: Optional[datetime] = Field(
        None, examples=['2012-06-01T00:00:00-06:00'], repr=False
    )
    """
    the start date for the course, if applicable
    """

    end_at: Optional[datetime] = Field(
        None, examples=['2012-09-01T00:00:00-06:00'], repr=False
    )
    """
    the end date for the course, if applicable
    """

    locale: Optional[str] = Field(None, examples=['en'], repr=False)
    """
    the course-set locale, if applicable
    """

    enrollments: Optional[list[Enrollment]] = Field(None, repr=False)
    """
    A list of enrollments linking the current user to the course. for student enrollments, grading information may be included if include[]=total_scores
    """

    total_students: Optional[int] = Field(None, examples=[32], repr=False)
    """
    optional: the total number of active and invited students in the course
    """

    calendar: Optional[CalendarLink] = Field(None, repr=False)
    """
    course calendar
    """

    default_view: Optional[str] = Field(None, examples=['feed'], repr=False)
    """
    the type of page that users will see when they first visit the course - 'feed': Recent Activity Dashboard - 'wiki': Wiki Front Page - 'modules': Course Modules/Sections Page - 'assignments': Course Assignments List - 'syllabus': Course Syllabus Page other types may be added in the future
    """

    syllabus_body: Optional[str] = Field(
        None, examples=['<p>syllabus html goes here</p>'], repr=False
    )
    """
    optional: user-generated HTML for the course syllabus
    """

    needs_grading_count: Optional[int] = Field(None, examples=[17], repr=False)
    """
    optional: the number of submissions needing grading returned only if the current user has grading rights and include[]=needs_grading_count
    """

    term: Optional[Term] = Field(None, repr=False)
    """
    optional: the enrollment term object for the course returned only if include[]=term
    """

    course_progress: Optional[CourseProgress] = Field(None, repr=False)
    """
    optional: information on progress through the course returned only if include[]=course_progress
    """

    apply_assignment_group_weights: Optional[bool] = Field(
        None, examples=[True], repr=False
    )
    """
    weight final grade based on assignment group percentages
    """

    permissions: Optional[dict[str, Any]] = Field(
        None,
        examples=[{'create_discussion_topic': True, 'create_announcement': True}],
        repr=False,
    )
    """
    optional: the permissions the user has for the course. returned only for a single course and include[]=permissions
    """

    is_public: Optional[bool] = Field(None, examples=[True], repr=False)
    is_public_to_auth_users: Optional[bool] = Field(None, examples=[True], repr=False)
    public_syllabus: Optional[bool] = Field(None, examples=[True], repr=False)
    public_syllabus_to_auth: Optional[bool] = Field(None, examples=[True], repr=False)
    public_description: Optional[str] = Field(
        None, examples=['Come one, come all to InstructureCon 2012!'], repr=False
    )
    """
    optional: the public description of the course
    """

    storage_quota_mb: Optional[int] = Field(None, examples=[5], repr=False)
    storage_quota_used_mb: Optional[float] = Field(None, examples=[5], repr=False)
    hide_final_grades: Optional[bool] = Field(None, examples=[False], repr=False)
    license: Optional[str] = Field(None, examples=['Creative Commons'], repr=False)
    allow_student_assignment_edits: Optional[bool] = Field(
        None, examples=[False], repr=False
    )
    allow_wiki_comments: Optional[bool] = Field(None, examples=[False], repr=False)
    allow_student_forum_attachments: Optional[bool] = Field(
        None, examples=[False], repr=False
    )
    open_enrollment: Optional[bool] = Field(None, examples=[True], repr=False)
    self_enrollment: Optional[bool] = Field(None, examples=[False], repr=False)
    restrict_enrollments_to_course_dates: Optional[bool] = Field(
        None, examples=[False], repr=False
    )
    course_format: Optional[str] = Field(None, examples=['online'], repr=False)
    access_restricted_by_date: Optional[bool] = Field(
        None, examples=[False], repr=False
    )
    """
    optional: this will be true if this user is currently prevented from viewing the course because of date restriction settings
    """

    time_zone: Optional[str] = Field(None, examples=['America/Denver'], repr=False)
    """
    The course's IANA time zone name.
    """

    blueprint: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    optional: whether the course is set as a Blueprint Course (blueprint fields require the Blueprint Courses feature)
    """

    blueprint_restrictions: Optional[dict[str, Any]] = Field(
        None,
        examples=[
            {
                'content': True,
                'points': True,
                'due_dates': False,
                'availability_dates': False,
            }
        ],
        repr=False,
    )
    """
    optional: Set of restrictions applied to all locked course objects
    """

    blueprint_restrictions_by_object_type: Optional[dict[str, Any]] = Field(
        None,
        examples=[
            {
                'assignment': {'content': True, 'points': True},
                'wiki_page': {'content': True},
            }
        ],
        repr=False,
    )
    """
    optional: Sets of restrictions differentiated by object type applied to locked course objects
    """

    template: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    optional: whether the course is set as a template (requires the Course Templates feature)
    """




from .enrollments import Enrollment  # noqa: E402
from .grading_periods import GradingPeriod  # noqa: E402
Course.model_rebuild()