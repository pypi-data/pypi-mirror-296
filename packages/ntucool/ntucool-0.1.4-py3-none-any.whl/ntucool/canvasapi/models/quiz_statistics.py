# generated by datamodel-codegen:
#   filename:  quiz_statistics.json
#   timestamp: 2024-09-02T14:02:23+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Optional

from pydantic import Field

from . import CanvasBaseModel



class QuizStatisticsLinks(CanvasBaseModel):
    quiz: Optional[str] = Field(
        None, examples=['http://canvas.example.edu/api/v1/courses/1/quizzes/2']
    )
    """
    HTTP/HTTPS API URL to the quiz this statistics describe.
    """



class QuizStatisticsAnswerStatistics(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=[3866])
    """
    ID of the answer.
    """

    text: Optional[str] = Field(None, examples=['Blue.'])
    """
    The text attached to the answer.
    """

    weight: Optional[int] = Field(None, examples=[100])
    """
    An integer to determine correctness of the answer. Incorrect answers should be 0, correct answers should 100
    """

    responses: Optional[int] = Field(None, examples=[2])
    """
    Number of students who have chosen this answer.
    """



class QuizStatisticsAnswerPointBiserial(CanvasBaseModel):
    answer_id: Optional[int] = Field(None, examples=[3866])
    """
    ID of the answer the point biserial is for.
    """

    point_biserial: Optional[float] = Field(None, examples=[-0.802955068546966])
    """
    The point biserial value for this answer. Value ranges between -1 and 1.
    """

    correct: Optional[bool] = Field(None, examples=[True])
    """
    Convenience attribute that denotes whether this is the correct answer as opposed to being a distractor. This is mutually exclusive with the `distractor` value
    """

    distractor: Optional[bool] = Field(None, examples=[False])
    """
    Convenience attribute that denotes whether this is a distractor answer and not the correct one. This is mutually exclusive with the `correct` value
    """



class QuizStatisticsSubmissionStatistics(CanvasBaseModel):
    unique_count: Optional[int] = Field(None, examples=[3])
    """
    The number of students who have taken the quiz.
    """

    score_average: Optional[float] = Field(None, examples=[4.33333333333333])
    """
    The mean of the student submission scores.
    """

    score_high: Optional[float] = Field(None, examples=[6])
    """
    The highest submission score.
    """

    score_low: Optional[float] = Field(None, examples=[3])
    """
    The lowest submission score.
    """

    score_stdev: Optional[float] = Field(None, examples=[1.24721912892465])
    """
    Standard deviation of the submission scores.
    """

    scores: Optional[dict[str, Any]] = Field(
        None, examples=[{'50': 1, '34': 5, '100': 1}]
    )
    """
    A percentile distribution of the student scores, each key is the percentile (ranges between 0 and 100%) while the value is the number of students who received that score.
    """

    correct_count_average: Optional[float] = Field(None, examples=[3.66666666666667])
    """
    The mean of the number of questions answered correctly by each student.
    """

    incorrect_count_average: Optional[float] = Field(None, examples=[5])
    """
    The mean of the number of questions answered incorrectly by each student.
    """

    duration_average: Optional[float] = Field(None, examples=[42.333333333])
    """
    The average time spent by students while taking the quiz.
    """



class QuizStatisticsQuestionStatistics(CanvasBaseModel):
    responses: Optional[int] = Field(None, examples=[3])
    """
    Number of students who have provided an answer to this question. Blank or empty responses are not counted.
    """

    answers: Optional[QuizStatisticsAnswerStatistics] = None
    """
    Statistics related to each individual pre-defined answer.
    """



class QuizStatistics(CanvasBaseModel):
    id: int = Field(..., examples=[1])
    """
    The ID of the quiz statistics report.
    """

    quiz_id: int = Field(..., examples=[2], repr=False)
    """
    The ID of the Quiz the statistics report is for. 
    NOTE: AVAILABLE ONLY IN NON-JSON-API REQUESTS.
    """

    multiple_attempts_exist: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    Whether there are any students that have made mutliple submissions for this quiz.
    """

    includes_all_versions: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    In the presence of multiple attempts, this field describes whether the statistics describe all the submission attempts and not only the latest ones.
    """

    generated_at: Optional[datetime] = Field(
        None, examples=['2013-01-23T23:59:00-07:00'], repr=False
    )
    """
    The time at which the statistics were generated, which is usually after the occurrence of a quiz event, like a student submitting it.
    """

    url: Optional[str] = Field(
        None,
        examples=['http://canvas.example.edu/api/v1/courses/1/quizzes/2/statistics'],
        repr=False,
    )
    """
    The API HTTP/HTTPS URL to this quiz statistics.
    """

    html_url: Optional[str] = Field(
        None,
        examples=['http://canvas.example.edu/courses/1/quizzes/2/statistics'],
        repr=False,
    )
    """
    The HTTP/HTTPS URL to the page where the statistics can be seen visually.
    """

    question_statistics: Optional[QuizStatisticsQuestionStatistics] = Field(
        None, repr=False
    )
    """
    Question-specific statistics for each question and its answers.
    """

    submission_statistics: Optional[QuizStatisticsSubmissionStatistics] = Field(
        None, repr=False
    )
    """
    Question-specific statistics for each question and its answers.
    """

    links: Optional[QuizStatisticsLinks] = Field(None, repr=False)
    """
    JSON-API construct that contains links to media related to this quiz statistics object. 
    NOTE: AVAILABLE ONLY IN JSON-API REQUESTS.
    """

