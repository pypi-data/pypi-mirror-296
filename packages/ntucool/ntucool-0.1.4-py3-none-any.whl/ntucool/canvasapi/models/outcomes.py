# generated by datamodel-codegen:
#   filename:  outcomes.json
#   timestamp: 2024-09-02T14:02:23+00:00

from __future__ import annotations

from datetime import datetime
from typing import Optional

from pydantic import Field

from . import CanvasBaseModel



class OutcomeAlignment(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=[1])
    """
    the id of the aligned learning outcome.
    """

    assignment_id: Optional[int] = Field(None, examples=[2])
    """
    the id of the aligned assignment (null for live assessments).
    """

    assessment_id: Optional[int] = Field(None, examples=[3])
    """
    the id of the aligned live assessment (null for assignments).
    """

    submission_types: Optional[str] = Field(
        None, examples=['online_text_entry,online_url']
    )
    """
    a string representing the different submission types of an aligned assignment.
    """

    url: Optional[str] = Field(None, examples=['/courses/1/assignments/5'])
    """
    the URL for the aligned assignment.
    """

    title: Optional[str] = Field(None, examples=['Unit 1 test'])
    """
    the title of the aligned assignment.
    """



class Outcome(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=[1], repr=False)
    """
    the ID of the outcome
    """

    url: Optional[str] = Field(None, examples=['/api/v1/outcomes/1'])
    """
    the URL for fetching/updating the outcome. should be treated as opaque
    """

    context_id: Optional[int] = Field(None, examples=[1], repr=False)
    """
    the context owning the outcome. may be null for global outcomes
    """

    context_type: Optional[str] = Field(None, examples=['Account'], repr=False)
    title: Optional[str] = Field(None, examples=['Outcome title'])
    """
    title of the outcome
    """

    display_name: Optional[str] = Field(
        None, examples=['My Favorite Outcome'], repr=False
    )
    """
    Optional friendly name for reporting
    """

    description: Optional[str] = Field(
        None, examples=['Outcome description'], repr=False
    )
    """
    description of the outcome. omitted in the abbreviated form.
    """

    vendor_guid: Optional[str] = Field(None, examples=['customid9000'], repr=False)
    """
    A custom GUID for the learning standard.
    """

    points_possible: Optional[int] = Field(None, examples=[5], repr=False)
    """
    maximum points possible. included only if the outcome embeds a rubric criterion. omitted in the abbreviated form.
    """

    mastery_points: Optional[int] = Field(None, examples=[3], repr=False)
    """
    points necessary to demonstrate mastery outcomes. included only if the outcome embeds a rubric criterion. omitted in the abbreviated form.
    """

    calculation_method: Optional[str] = Field(
        None, examples=['decaying_average'], repr=False
    )
    """
    the method used to calculate a students score
    """

    calculation_int: Optional[int] = Field(None, examples=[65], repr=False)
    """
    this defines the variable value used by the calculation_method. included only if calculation_method uses it
    """

    ratings: Optional[list[RubricRating]] = Field(None, repr=False)
    """
    possible ratings for this outcome. included only if the outcome embeds a rubric criterion. omitted in the abbreviated form.
    """

    can_edit: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    whether the current user can update the outcome
    """

    can_unlink: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    whether the outcome can be unlinked
    """

    assessed: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    whether this outcome has been used to assess a student
    """

    has_updateable_rubrics: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    whether updates to this outcome will propagate to unassessed rubrics that have imported it
    """


from .rubrics import RubricRating  # noqa: E402