# generated by datamodel-codegen:
#   filename:  outcome_results.json
#   timestamp: 2024-09-02T14:02:23+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Optional

from pydantic import Field

from . import CanvasBaseModel



class OutcomeResult(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=['42'])
    """
    A unique identifier for this result
    """

    score: Optional[int] = Field(None, examples=[6])
    """
    The student's score
    """

    submitted_or_assessed_at: Optional[datetime] = Field(
        None, examples=['2013-02-01T00:00:00-06:00'], repr=False
    )
    """
    The datetime the resulting OutcomeResult was submitted at, or absent that, when it was assessed.
    """

    links: Optional[dict[str, Any]] = Field(
        None,
        examples=[{'user': '3', 'learning_outcome': '97', 'alignment': '53'}],
        repr=False,
    )
    """
    Unique identifiers of objects associated with this result
    """

    percent: Optional[float] = Field(None, examples=['0.65'], repr=False)
    """
    score's percent of maximum points possible for outcome, scaled to reflect any custom mastery levels that differ from the learning outcome
    """



class OutcomeRollupScoreLinks(CanvasBaseModel):
    outcome: Optional[int] = Field(None, examples=[42])
    """
    The id of the related outcome
    """



class OutcomeRollupScore(CanvasBaseModel):
    score: Optional[int] = Field(None, examples=[3])
    """
    The rollup score for the outcome, based on the student alignment scores related to the outcome. This could be null if the student has no related scores.
    """

    count: Optional[int] = Field(None, examples=[6])
    """
    The number of alignment scores included in this rollup.
    """

    links: Optional[OutcomeRollupScoreLinks] = Field(None, examples=[{'outcome': '42'}])


class OutcomeRollupLinks(CanvasBaseModel):
    course: Optional[int] = Field(None, examples=[42])
    """
    If an aggregate result was requested, the course field will be present. Otherwise, the user and section field will be present (Optional) The id of the course that this rollup applies to
    """

    user: Optional[int] = Field(None, examples=[42])
    """
    (Optional) The id of the user that this rollup applies to
    """

    section: Optional[int] = Field(None, examples=[57])
    """
    (Optional) The id of the section the user is in
    """



class OutcomeRollup(CanvasBaseModel):
    scores: Optional[OutcomeRollupScore] = None
    """
    an array of OutcomeRollupScore objects
    """

    name: Optional[str] = Field(None, examples=['John Doe'])
    """
    The name of the resource for this rollup. For example, the user name.
    """

    links: Optional[OutcomeRollupLinks] = Field(
        None, examples=[{'course': 42, 'user': 42, 'section': 57}]
    )


class OutcomeAlignment(CanvasBaseModel):
    id: Optional[str] = Field(None, examples=['quiz_3'])
    """
    A unique identifier for this alignment
    """

    name: Optional[str] = Field(None, examples=['Big mid-term test'])
    """
    The name of this alignment
    """

    html_url: Optional[str] = None
    """
    (Optional) A URL for details about this alignment
    """



class OutcomePathPart(CanvasBaseModel):
    name: Optional[str] = Field(None, examples=['Spelling out numbers'])
    """
    The title of the outcome or outcome group
    """



class OutcomePath(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=['42'])
    """
    A unique identifier for this outcome
    """

    parts: Optional[OutcomePathPart] = None
    """
    an array of OutcomePathPart objects
    """

