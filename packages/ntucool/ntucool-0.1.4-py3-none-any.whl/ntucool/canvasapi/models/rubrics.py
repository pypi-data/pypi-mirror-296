# generated by datamodel-codegen:
#   filename:  rubrics.json
#   timestamp: 2024-09-02T14:02:23+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Optional

from pydantic import Field

from . import CanvasBaseModel



class RubricRating(CanvasBaseModel):
    id: Optional[str] = Field(None, examples=['name_2'])
    criterion_id: Optional[str] = Field(None, examples=['_10'])
    description: Optional[str] = None
    long_description: Optional[str] = None
    points: Optional[int] = Field(None, examples=['5'])


class RubricAssessment(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=[1])
    """
    the ID of the rubric
    """

    rubric_id: Optional[int] = Field(None, examples=[1], repr=False)
    """
    the rubric the assessment belongs to
    """

    rubric_association_id: Optional[int] = Field(None, examples=['2'], repr=False)
    score: Optional[int] = Field(None, examples=['5.0'], repr=False)
    artifact_type: Optional[str] = Field(None, examples=['Submission'])
    """
    the object of the assessment
    """

    artifact_id: Optional[int] = Field(None, examples=['3'], repr=False)
    """
    the id of the object of the assessment
    """

    artifact_attempt: Optional[int] = Field(None, examples=['2'], repr=False)
    """
    the current number of attempts made on the object of the assessment
    """

    assessment_type: Optional[str] = Field(None, examples=['grading'], repr=False)
    """
    the type of assessment. values will be either 'grading', 'peer_review', or 'provisional_grade'
    """

    assessor_id: Optional[int] = Field(None, examples=['6'], repr=False)
    """
    user id of the person who made the assessment
    """

    data: Optional[list[dict[str, Any]]] = Field(None, repr=False)
    """
    (Optional) If 'full' is included in the 'style' parameter, returned assessments will have their full details contained in their data hash. If the user does not request a style, this key will be absent.
    """

    comments: Optional[list[str]] = Field(None, repr=False)
    """
    (Optional) If 'comments_only' is included in the 'style' parameter, returned assessments will include only the comments portion of their data hash. If the user does not request a style, this key will be absent.
    """



class RubricAssociation(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=[1])
    """
    the ID of the association
    """

    rubric_id: Optional[int] = Field(None, examples=['1'], repr=False)
    """
    the ID of the rubric
    """

    association_id: Optional[int] = Field(None, examples=[1], repr=False)
    """
    the ID of the object this association links to
    """

    association_type: Optional[str] = Field(None, examples=['Course'])
    """
    the type of object this association links to
    """

    use_for_grading: Optional[bool] = Field(None, examples=['true'], repr=False)
    """
    Whether or not the associated rubric is used for grade calculation
    """

    summary_data: Optional[str] = Field(None, examples=[''], repr=False)
    purpose: Optional[str] = Field(None, examples=['grading'], repr=False)
    """
    Whether or not the association is for grading (and thus linked to an assignment) or if it's to indicate the rubric should appear in its context. Values will be grading or bookmark.
    """

    hide_score_total: Optional[bool] = Field(None, examples=['true'], repr=False)
    """
    Whether or not the score total is displayed within the rubric. This option is only available if the rubric is not used for grading.
    """

    hide_points: Optional[bool] = Field(None, examples=['true'], repr=False)
    hide_outcome_results: Optional[bool] = Field(None, examples=['true'], repr=False)


class RubricCriterion(CanvasBaseModel):
    id: Optional[str] = Field(None, examples=['_10'])
    """
    the ID of the criterion
    """

    description: Optional[str] = None
    long_description: Optional[str] = None
    points: Optional[int] = Field(None, examples=['5'])
    criterion_use_range: Optional[bool] = Field(None, examples=['false'])
    ratings: Optional[list[RubricRating]] = None
    """
    the possible ratings for this Criterion
    """



class Rubric(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=[1])
    """
    the ID of the rubric
    """

    title: Optional[str] = Field(None, examples=['some title'])
    """
    title of the rubric
    """

    context_id: Optional[int] = Field(None, examples=[1], repr=False)
    """
    the context owning the rubric
    """

    context_type: Optional[str] = Field(None, examples=['Course'], repr=False)
    points_possible: Optional[int] = Field(None, examples=['10.0'], repr=False)
    reusable: Optional[bool] = Field(None, examples=['false'], repr=False)
    read_only: Optional[bool] = Field(None, examples=['true'], repr=False)
    free_form_criterion_comments: Optional[bool] = Field(
        None, examples=['true'], repr=False
    )
    """
    whether or not free-form comments are used
    """

    hide_score_total: Optional[bool] = Field(None, examples=['true'], repr=False)
    data: Optional[list[RubricCriterion]] = Field(None, repr=False)
    """
    An array with all of this Rubric's grading Criteria
    """

    assessments: Optional[list[RubricAssessment]] = Field(None, repr=False)
    """
    If an assessment type is included in the 'include' parameter, includes an array of rubric assessment objects for a given rubric, based on the assessment type requested. If the user does not request an assessment type this key will be absent.
    """

    associations: Optional[list[RubricAssociation]] = Field(None, repr=False)
    """
    If an association type is included in the 'include' parameter, includes an array of rubric association objects for a given rubric, based on the association type requested. If the user does not request an association type this key will be absent.
    """

