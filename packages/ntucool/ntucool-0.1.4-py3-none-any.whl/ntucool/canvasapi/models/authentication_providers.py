# generated by datamodel-codegen:
#   filename:  authentication_providers.json
#   timestamp: 2024-09-02T14:02:23+00:00

from __future__ import annotations

from datetime import datetime
from typing import Optional

from pydantic import Field

from . import CanvasBaseModel



class SSOSettings(CanvasBaseModel):
    login_handle_name: Optional[str] = Field(None, examples=['Username'])
    """
    The label used for unique login identifiers.
    """

    change_password_url: Optional[str] = Field(
        None, examples=['https://example.com/reset_password']
    )
    """
    The url to redirect users to for password resets. Leave blank for default Canvas behavior
    """

    auth_discovery_url: Optional[str] = Field(
        None, examples=['https://example.com/which_account'], repr=False
    )
    """
    If a discovery url is set, canvas will forward all users to that URL when they need to be authenticated. That page will need to then help the user figure out where they need to go to log in. If no discovery url is configured, the first configuration will be used to attempt to authenticate the user.
    """

    unknown_user_url: Optional[str] = Field(
        None, examples=['https://example.com/register_for_canvas'], repr=False
    )
    """
    If an unknown user url is set, Canvas will forward to that url when a service authenticates a user, but that user does not exist in Canvas. The default behavior is to present an error.
    """



class FederatedAttributesConfig(CanvasBaseModel):
    admin_roles: Optional[str] = None
    """
    A comma separated list of role names to grant to the user. Note that these only apply at the root account level, and not sub-accounts. If the attribute is not marked for provisioning only, the user will also be removed from any other roles they currently hold that are not still specified by the IdP.
    """

    display_name: Optional[str] = None
    """
    The full display name of the user
    """

    email: Optional[str] = None
    """
    The user's e-mail address
    """

    given_name: Optional[str] = None
    """
    The first, or given, name of the user
    """

    integration_id: Optional[str] = None
    """
    The secondary unique identifier for SIS purposes
    """

    locale: Optional[str] = None
    """
    The user's preferred locale/language
    """

    name: Optional[str] = None
    """
    The full name of the user
    """

    sis_user_id: Optional[str] = None
    """
    The unique SIS identifier
    """

    sortable_name: Optional[str] = None
    """
    The full name of the user for sorting purposes
    """

    surname: Optional[str] = None
    """
    The surname, or last name, of the user
    """

    timezone: Optional[str] = None
    """
    The user's preferred time zone
    """



class FederatedAttributeConfig(CanvasBaseModel):
    attribute: Optional[str] = Field(None, examples=['mail'])
    """
    The name of the attribute as it will be sent from the authentication provider
    """

    provisioning_only: Optional[bool] = Field(False, examples=[False])
    """
    If the attribute should be applied only when provisioning a new user, rather than all logins
    """

    autoconfirm: Optional[bool] = Field(False, examples=[False])
    """
    (only for email) If the email address is trusted and should be automatically confirmed
    """



class AuthenticationProvider(CanvasBaseModel):
    identifier_format: Optional[str] = Field(
        None,
        examples=['urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress'],
        repr=False,
    )
    """
    Valid for SAML providers.
    """

    auth_type: Optional[str] = Field(None, examples=['saml'])
    """
    Valid for all providers.
    """

    id: Optional[int] = Field(None, examples=[1649], repr=False)
    """
    Valid for all providers.
    """

    log_out_url: Optional[str] = Field(
        None, examples=['http://example.com/saml1/slo'], repr=False
    )
    """
    Valid for SAML providers.
    """

    log_in_url: Optional[str] = Field(
        None, examples=['http://example.com/saml1/sli'], repr=False
    )
    """
    Valid for SAML and CAS providers.
    """

    certificate_fingerprint: Optional[str] = Field(
        None, examples=['111222'], repr=False
    )
    """
    Valid for SAML providers.
    """

    requested_authn_context: Optional[str] = Field(None, repr=False)
    """
    Valid for SAML providers.
    """

    auth_host: Optional[str] = Field(None, examples=['127.0.0.1'], repr=False)
    """
    Valid for LDAP providers.
    """

    auth_filter: Optional[str] = Field(None, examples=['filter1'], repr=False)
    """
    Valid for LDAP providers.
    """

    auth_over_tls: Optional[int] = Field(None, repr=False)
    """
    Valid for LDAP providers.
    """

    auth_base: Optional[str] = Field(None, repr=False)
    """
    Valid for LDAP and CAS providers.
    """

    auth_username: Optional[str] = Field(None, examples=['username1'], repr=False)
    """
    Valid for LDAP providers.
    """

    auth_port: Optional[int] = Field(None, repr=False)
    """
    Valid for LDAP providers.
    """

    position: Optional[int] = Field(None, examples=[1])
    """
    Valid for all providers.
    """

    idp_entity_id: Optional[str] = Field(
        None, examples=['http://example.com/saml1'], repr=False
    )
    """
    Valid for SAML providers.
    """

    login_attribute: Optional[str] = Field(None, examples=['nameid'], repr=False)
    """
    Valid for SAML providers.
    """

    sig_alg: Optional[str] = Field(
        None, examples=['http://www.w3.org/2001/04/xmldsig-more#rsa-sha256'], repr=False
    )
    """
    Valid for SAML providers.
    """

    jit_provisioning: Optional[bool] = Field(None, repr=False)
    """
    Just In Time provisioning. Valid for all providers except Canvas (which has the similar in concept self_registration setting).
    """

    federated_attributes: Optional[FederatedAttributesConfig] = Field(None, repr=False)
    mfa_required: Optional[bool] = Field(None, repr=False)
    """
    If multi-factor authentication is required when logging in with this authentication provider. The account must not have MFA disabled.
    """

