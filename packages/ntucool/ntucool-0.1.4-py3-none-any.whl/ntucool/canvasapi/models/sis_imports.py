# generated by datamodel-codegen:
#   filename:  sis_imports.json
#   timestamp: 2024-09-02T14:02:23+00:00

from __future__ import annotations

from datetime import datetime
from typing import Optional

from pydantic import Field

from . import CanvasBaseModel



class SisImportStatistic(CanvasBaseModel):
    created: Optional[int] = Field(None, examples=[18])
    """
    This is the number of items that were created.
    """

    concluded: Optional[int] = Field(None, examples=[3])
    """
    This is the number of items that marked as completed. This only applies to courses and enrollments.
    """

    deactivated: Optional[int] = Field(None, examples=[1])
    """
    This is the number of Enrollments that were marked as 'inactive'. This only applies to enrollments.
    """

    restored: Optional[int] = Field(None, examples=[2])
    """
    This is the number of items that were set to an active state from a completed, inactive, or deleted state.
    """

    deleted: Optional[int] = Field(None, examples=[40])
    """
    This is the number of items that were deleted.
    """



class SisImportStatistics(CanvasBaseModel):
    total_state_changes: Optional[int] = Field(None, examples=[382])
    """
    This is the total number of items that were changed in the sis import. There are a few caveats that can cause this number to not add up to the individual counts. There are some state changes that happen that have no impact to the object. An example would be changing a course from 'created' to 'claimed'. Both of these would be considered an active course, but would increment this counter. In this example the course would not increment the created or restored counters for course statistic.
    """

    Account: Optional[SisImportStatistic] = None
    """
    This contains that statistics for accounts.
    """

    EnrollmentTerm: Optional[SisImportStatistic] = None
    """
    This contains that statistics for terms.
    """

    CommunicationChannel: Optional[SisImportStatistic] = None
    """
    This contains that statistics for communication channels. This is an indirect effect from creating or deleting a user.
    """

    AbstractCourse: Optional[SisImportStatistic] = None
    """
    This contains that statistics for abstract courses.
    """

    Course: Optional[SisImportStatistic] = None
    """
    This contains that statistics for courses.
    """

    CourseSection: Optional[SisImportStatistic] = None
    """
    This contains that statistics for course sections.
    """

    Enrollment: Optional[SisImportStatistic] = None
    """
    This contains that statistics for enrollments.
    """

    GroupCategory: Optional[SisImportStatistic] = None
    """
    This contains that statistics for group categories.
    """

    Group: Optional[SisImportStatistic] = None
    """
    This contains that statistics for groups.
    """

    GroupMembership: Optional[SisImportStatistic] = None
    """
    This contains that statistics for group memberships. This can be a direct impact from the import or indirect from an enrollment being deleted.
    """

    Pseudonym: Optional[SisImportStatistic] = None
    """
    This contains that statistics for pseudonyms. Pseudonyms are logins for users, and are the object that ties an enrollment to a user. This would be impacted from the user importer. 
    """

    UserObserver: Optional[SisImportStatistic] = None
    """
    This contains that statistics for user observers.
    """

    AccountUser: Optional[SisImportStatistic] = None
    """
    This contains that statistics for account users.
    """



class SisImportCounts(CanvasBaseModel):
    accounts: Optional[int] = Field(None, examples=[0])
    terms: Optional[int] = Field(None, examples=[3])
    abstract_courses: Optional[int] = Field(None, examples=[0])
    courses: Optional[int] = Field(None, examples=[121])
    sections: Optional[int] = Field(None, examples=[278])
    xlists: Optional[int] = Field(None, examples=[0])
    users: Optional[int] = Field(None, examples=[346])
    enrollments: Optional[int] = Field(None, examples=[1542])
    groups: Optional[int] = Field(None, examples=[0])
    group_memberships: Optional[int] = Field(None, examples=[0])
    grade_publishing_results: Optional[int] = Field(None, examples=[0])
    batch_courses_deleted: Optional[int] = Field(None, examples=[11])
    """
    the number of courses that were removed because they were not included in the batch for batch_mode imports. Only included if courses were deleted
    """

    batch_sections_deleted: Optional[int] = Field(None, examples=[0])
    """
    the number of sections that were removed because they were not included in the batch for batch_mode imports. Only included if sections were deleted
    """

    batch_enrollments_deleted: Optional[int] = Field(None, examples=[150])
    """
    the number of enrollments that were removed because they were not included in the batch for batch_mode imports. Only included if enrollments were deleted
    """

    error_count: Optional[int] = Field(None, examples=[0])
    warning_count: Optional[int] = Field(None, examples=[0])


class SisImportData(CanvasBaseModel):
    import_type: Optional[str] = Field(None, examples=['instructure_csv'])
    """
    The type of SIS import
    """

    supplied_batches: Optional[list[str]] = Field(
        None, examples=[['term', 'course', 'section', 'user', 'enrollment']]
    )
    """
    Which files were included in the SIS import
    """

    counts: Optional[SisImportCounts] = None
    """
    The number of rows processed for each type of import
    """



class SisImport(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=[1])
    """
    The unique identifier for the SIS import.
    """

    created_at: Optional[datetime] = Field(
        None, examples=['2013-12-01T23:59:00-06:00'], repr=False
    )
    """
    The date the SIS import was created.
    """

    ended_at: Optional[datetime] = Field(
        None, examples=['2013-12-02T00:03:21-06:00'], repr=False
    )
    """
    The date the SIS import finished. Returns null if not finished.
    """

    updated_at: Optional[datetime] = Field(
        None, examples=['2013-12-02T00:03:21-06:00'], repr=False
    )
    """
    The date the SIS import was last updated.
    """

    workflow_state: Optional[str] = Field(None, examples=['imported'])
    """
    The current state of the SIS import.
     - 'initializing': The SIS import is being created, if this gets stuck in initializing, it will not import and will continue on to next import.
     - 'created': The SIS import has been created.
     - 'importing': The SIS import is currently processing.
     - 'cleanup_batch': The SIS import is currently cleaning up courses, sections, and enrollments not included in the batch for batch_mode imports.
     - 'imported': The SIS import has completed successfully.
     - 'imported_with_messages': The SIS import completed with errors or warnings.
     - 'aborted': The SIS import was aborted.
     - 'failed_with_messages': The SIS import failed with errors.
     - 'failed': The SIS import failed.
     - 'restoring': The SIS import is restoring states of imported items.
     - 'partially_restored': The SIS import is restored some of the states of imported items. This is generally due to passing a param like undelete only.
     - 'restored': The SIS import is restored all of the states of imported items.
    """

    data: Optional[SisImportData] = Field(None, repr=False)
    """
    data
    """

    statistics: Optional[SisImportStatistics] = Field(None, repr=False)
    """
    statistics
    """

    progress: Optional[str] = Field(None, examples=['100'], repr=False)
    """
    The progress of the SIS import. The progress will reset when using batch_mode and have a different progress for the cleanup stage
    """

    errors_attachment: Optional[File] = Field(None, repr=False)
    """
    The errors_attachment api object of the SIS import. Only available if there are errors or warning and import has completed.
    """

    user: Optional[User] = Field(None, repr=False)
    """
    The user that initiated the sis_batch. See the Users API for details.
    """

    processing_warnings: Optional[list[list[str]]] = Field(
        None,
        examples=[
            [
                [
                    'students.csv',
                    "user John Doe has already claimed john_doe's requested login information, skipping",
                ]
            ]
        ],
        repr=False,
    )
    """
    Only imports that are complete will get this data. An array of CSV_file/warning_message pairs.
    """

    processing_errors: Optional[list[list[str]]] = Field(
        None,
        examples=[
            [['students.csv', 'Error while importing CSV. Please contact support.']]
        ],
        repr=False,
    )
    """
    An array of CSV_file/error_message pairs.
    """

    batch_mode: Optional[bool] = Field(None, examples=['true'], repr=False)
    """
    Whether the import was run in batch mode.
    """

    batch_mode_term_id: Optional[str] = Field(None, examples=['1234'], repr=False)
    """
    The term the batch was limited to.
    """

    multi_term_batch_mode: Optional[bool] = Field(None, examples=['false'], repr=False)
    """
    Enables batch mode against all terms in term file. Requires change_threshold to be set.
    """

    skip_deletes: Optional[bool] = Field(None, examples=['false'], repr=False)
    """
    When set the import will skip any deletes.
    """

    override_sis_stickiness: Optional[bool] = Field(
        None, examples=['false'], repr=False
    )
    """
    Whether UI changes were overridden.
    """

    add_sis_stickiness: Optional[bool] = Field(None, examples=['false'], repr=False)
    """
    Whether stickiness was added to the batch changes.
    """

    clear_sis_stickiness: Optional[bool] = Field(None, examples=['false'], repr=False)
    """
    Whether stickiness was cleared.
    """

    diffing_threshold_exceeded: Optional[bool] = Field(
        None, examples=['true'], repr=False
    )
    """
    Whether a diffing job failed because the threshold limit got exceeded.
    """

    diffing_data_set_identifier: Optional[str] = Field(
        None, examples=['account-5-enrollments'], repr=False
    )
    """
    The identifier of the data set that this SIS batch diffs against
    """

    diffing_remaster: Optional[bool] = Field(None, examples=['false'], repr=False)
    """
    Whether diffing remaster data was enabled.
    """

    diffed_against_import_id: Optional[int] = Field(None, examples=[1], repr=False)
    """
    The ID of the SIS Import that this import was diffed against
    """

    csv_attachments: Optional[list[list[File]]] = Field(None, examples=[[]], repr=False)
    """
    An array of CSV files for processing
    """




from .files import File  # noqa: E402
from .users import User  # noqa: E402
SisImport.model_rebuild()