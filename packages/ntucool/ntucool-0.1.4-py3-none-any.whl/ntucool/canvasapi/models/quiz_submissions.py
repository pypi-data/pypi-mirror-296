# generated by datamodel-codegen:
#   filename:  quiz_submissions.json
#   timestamp: 2024-09-02T14:02:23+00:00

from __future__ import annotations

from datetime import datetime
from typing import Optional

from pydantic import Field

from . import CanvasBaseModel



class QuizSubmission(CanvasBaseModel):
    id: int = Field(..., examples=[1])
    """
    The ID of the quiz submission.
    """

    quiz_id: int = Field(..., examples=[2])
    """
    The ID of the Quiz the quiz submission belongs to.
    """

    user_id: Optional[int] = Field(None, examples=[3])
    """
    The ID of the Student that made the quiz submission.
    """

    submission_id: Optional[int] = Field(None, examples=[1], repr=False)
    """
    The ID of the Submission the quiz submission represents.
    """

    started_at: Optional[datetime] = Field(
        None, examples=['2013-11-07T13:16:18Z'], repr=False
    )
    """
    The time at which the student started the quiz submission.
    """

    finished_at: Optional[datetime] = Field(
        None, examples=['2013-11-07T13:16:18Z'], repr=False
    )
    """
    The time at which the student submitted the quiz submission.
    """

    end_at: Optional[datetime] = Field(
        None, examples=['2013-11-07T13:16:18Z'], repr=False
    )
    """
    The time at which the quiz submission will be overdue, and be flagged as a late submission.
    """

    attempt: Optional[int] = Field(None, examples=[3], repr=False)
    """
    For quizzes that allow multiple attempts, this field specifies the quiz submission attempt number.
    """

    extra_attempts: Optional[int] = Field(None, examples=[1], repr=False)
    """
    Number of times the student was allowed to re-take the quiz over the multiple-attempt limit.
    """

    extra_time: Optional[int] = Field(None, examples=[60], repr=False)
    """
    Amount of extra time allowed for the quiz submission, in minutes.
    """

    manually_unlocked: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    The student can take the quiz even if it's locked for everyone else
    """

    time_spent: Optional[int] = Field(None, examples=[300], repr=False)
    """
    Amount of time spent, in seconds.
    """

    score: Optional[int] = Field(None, examples=[3], repr=False)
    """
    The score of the quiz submission, if graded.
    """

    score_before_regrade: Optional[int] = Field(None, examples=[2], repr=False)
    """
    The original score of the quiz submission prior to any re-grading.
    """

    kept_score: Optional[int] = Field(None, examples=[5], repr=False)
    """
    For quizzes that allow multiple attempts, this is the score that will be used, which might be the score of the latest, or the highest, quiz submission.
    """

    fudge_points: Optional[int] = Field(None, examples=[1], repr=False)
    """
    Number of points the quiz submission's score was fudged by.
    """

    has_seen_results: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    Whether the student has viewed their results to the quiz.
    """

    workflow_state: Optional[str] = Field(None, examples=['untaken'], repr=False)
    """
    The current state of the quiz submission. Possible values: ['untaken'|'pending_review'|'complete'|'settings_only'|'preview'].
    """

    overdue_and_needs_submission: Optional[bool] = Field(
        None, examples=['false'], repr=False
    )
    """
    Indicates whether the quiz submission is overdue and needs submission
    """

