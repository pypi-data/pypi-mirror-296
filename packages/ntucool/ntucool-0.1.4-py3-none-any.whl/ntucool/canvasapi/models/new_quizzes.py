# generated by datamodel-codegen:
#   filename:  new_quizzes.json
#   timestamp: 2024-09-02T14:02:23+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Optional

from pydantic import Field

from . import CanvasBaseModel



class MultipleAttemptsSettings(CanvasBaseModel):
    multiple_attempts_enabled: Optional[bool] = Field(None, examples=[True])
    """
    whether to allow multiple attempts
    """

    attempt_limit: Optional[bool] = Field(None, examples=[True])
    """
    whether to limit the number of attempts if 'multiple_attempts_enabled' is true. Unlimited attempts if false.
    """

    max_attempts: Optional[int] = Field(None, examples=[3])
    """
    number of attempts to allow if 'multiple_attempts_enabled' and 'attempt_limit' are true
    """

    score_to_keep: Optional[str] = Field(None, examples=['highest'])
    """
    specifies which score to keep after attempts ('average', 'first', 'highest', or 'latest')
    """

    cooling_period: Optional[bool] = Field(None, examples=[True])
    """
    whether to enforce a waiting period after an attempt (set as 'cooling_period_seconds')
    """

    cooling_period_seconds: Optional[int] = Field(None, examples=[1800])
    """
    required waiting period (in seconds) between attempts. Enforced if 'cooling_period' is true.
    """



class ResultViewSettings(CanvasBaseModel):
    result_view_restricted: Optional[bool] = Field(None, examples=[True])
    """
    whether to restrict the student result view
    """

    display_points_awarded: Optional[bool] = Field(None, examples=[True])
    """
    whether to show points awarded (overall and per question), if 'result_view_restricted' is true
    """

    display_points_possible: Optional[bool] = Field(None, examples=[True])
    """
    whether to show points possible (overall and per question), if 'result_view_restricted' is true
    """

    display_items: Optional[bool] = Field(None, examples=[True])
    """
    whether to show questions in the result view, if 'result_view_restricted' is true
    """

    display_item_response: Optional[bool] = Field(None, examples=[True])
    """
    whether to show student's responses in the result view, if 'display_items' is true
    """

    display_item_response_correctness: Optional[bool] = Field(None, examples=[True])
    """
    whether to indicate whether the student's response is correct/incorrect, if 'display_item_response' is true
    """

    display_item_correct_answer: Optional[bool] = Field(None, examples=[True])
    """
    whether to show the correct answer for each question, if 'display_item_response_correctness' is true
    """

    display_item_feedback: Optional[bool] = Field(None, examples=[True])
    """
    whether to show feedback for each item, if 'display_items' is true
    """



class QuizSettings(CanvasBaseModel):
    calculator_type: Optional[str] = Field(None, examples=['scientific'])
    """
    type of calculator the user will have access to during the quiz ('none', basic' or 'scientific')
    """

    filter_ip_address: Optional[bool] = Field(None, examples=[True])
    """
    whether access to the quiz should be restricted to the IP address ranges described in 'filters'
    """

    filters: Optional[dict[str, Any]] = Field(
        None, examples=[{'ips': [['1.1.1.1', '1.1.1.3'], ['2.2.2.3', '2.2.2.9']]}]
    )
    """
    IP address ranges from which users can take the quiz, if 'filter_ip_address' is true
    """

    one_at_a_time_type: Optional[str] = Field(None, examples=['none'])
    """
    whether questions should be shown all at once ('none') or one-at-a-time ('question')
    """

    allow_backtracking: Optional[bool] = Field(None, examples=[False])
    """
    whether to allow user to return to previous questions when 'one_at_a_time_type' is set to 'question'
    """

    shuffle_answers: Optional[bool] = Field(None, examples=[False])
    """
    whether answers should be shuffled during quiz
    """

    shuffle_questions: Optional[bool] = Field(None, examples=[False])
    """
    whether questions should be shuffled during quiz
    """

    require_student_access_code: Optional[bool] = Field(None, examples=[True])
    """
    whether to require an access code to take the quiz (set as 'student_access_code')
    """

    student_access_code: Optional[str] = Field(None, examples=['supersecret'])
    """
    access code that is required to take the quiz if 'require_student_access_code' is true
    """

    has_time_limit: Optional[bool] = Field(None, examples=[True])
    """
    whether the quiz has a time limit (set as 'session_time_limit_in_seconds')
    """

    session_time_limit_in_seconds: Optional[int] = Field(None, examples=[3600])
    """
    time limit during the quiz (in seconds)
    """

    multiple_attempts: Optional[MultipleAttemptsSettings] = None
    """
    settings to configure multiple quiz attempts (see MultipleAttemptsSettings)
    """

    result_view_settings: Optional[ResultViewSettings] = None
    """
    settings to restrict student result view (see ResultViewSettings)
    """



class NewQuiz(CanvasBaseModel):
    id: Optional[str] = Field(None, examples=['5'])
    """
    the ID of the quiz
    """

    title: Optional[str] = Field(None, examples=['Hamlet Act 3 Quiz'])
    """
    the title of the quiz
    """

    instructions: Optional[str] = Field(
        None, examples=['<p>Welcome to the final exam for...</p>'], repr=False
    )
    """
    the quiz's instructions
    """

    assignment_group_id: Optional[str] = Field(None, examples=['3'], repr=False)
    """
    the ID of the quiz's assignment group
    """

    points_possible: Optional[int] = Field(None, examples=[20], repr=False)
    """
    The total point value given to the quiz
    """

    due_at: Optional[datetime] = Field(
        None, examples=['2013-01-23T23:59:00-07:00'], repr=False
    )
    """
    when the quiz is due
    """

    lock_at: Optional[datetime] = Field(None, repr=False)
    """
    when to lock the quiz
    """

    unlock_at: Optional[datetime] = Field(
        None, examples=['2013-01-21T23:59:00-07:00'], repr=False
    )
    """
    when to unlock the quiz
    """

    published: Optional[bool] = Field(False, examples=[True], repr=False)
    """
    whether the quiz has a published or unpublished draft state
    """

    grading_type: Optional[str] = Field(None, examples=['points'], repr=False)
    """
    the type of grading the assignment receives ('pass_fail', 'percent', 'letter_grade', 'gpa_scale', or 'points')
    """

    quiz_settings: Optional[QuizSettings] = Field(None, repr=False)
    """
    additional quiz settings (see QuizSettings)
    """

