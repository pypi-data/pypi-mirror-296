# generated by datamodel-codegen:
#   filename:  content_migrations.json
#   timestamp: 2024-09-02T14:02:23+00:00

from __future__ import annotations

from datetime import datetime
from typing import Optional

from pydantic import Field

from . import CanvasBaseModel



class MigrationIssue(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=[370663])
    """
    the unique identifier for the issue
    """

    content_migration_url: Optional[str] = Field(
        None,
        examples=['https://example.com/api/v1/courses/1/content_migrations/1'],
        repr=False,
    )
    """
    API url to the content migration
    """

    description: Optional[str] = Field(
        None, examples=["Questions in this quiz couldn't be converted"]
    )
    """
    Description of the issue for the end-user
    """

    workflow_state: Optional[str] = Field(None, examples=['active'], repr=False)
    """
    Current state of the issue: active, resolved
    """

    fix_issue_html_url: Optional[str] = Field(
        None, examples=['https://example.com/courses/1/quizzes/2'], repr=False
    )
    """
    HTML Url to the Canvas page to investigate the issue
    """

    issue_type: Optional[str] = Field(None, examples=['warning'], repr=False)
    """
    Severity of the issue: todo, warning, error
    """

    error_report_html_url: Optional[str] = Field(
        None, examples=['https://example.com/error_reports/3'], repr=False
    )
    """
    Link to a Canvas error report if present (If the requesting user has permissions)
    """

    error_message: Optional[str] = Field(
        None, examples=['admin only message'], repr=False
    )
    """
    Site administrator error message (If the requesting user has permissions)
    """

    created_at: Optional[datetime] = Field(
        None, examples=['2012-06-01T00:00:00-06:00'], repr=False
    )
    """
    timestamp
    """

    updated_at: Optional[datetime] = Field(
        None, examples=['2012-06-01T00:00:00-06:00'], repr=False
    )
    """
    timestamp
    """



class ContentMigration(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=[370663])
    """
    the unique identifier for the migration
    """

    migration_type: Optional[str] = Field(
        None, examples=['common_cartridge_importer'], repr=False
    )
    """
    the type of content migration
    """

    migration_type_title: Optional[str] = Field(
        None, examples=['Canvas Cartridge Importer']
    )
    """
    the name of the content migration type
    """

    migration_issues_url: Optional[str] = Field(
        None,
        examples=[
            'https://example.com/api/v1/courses/1/content_migrations/1/migration_issues'
        ],
        repr=False,
    )
    """
    API url to the content migration's issues
    """

    attachment: Optional[str] = Field(
        None,
        examples=[
            '{"url"=>"https://example.com/api/v1/courses/1/content_migrations/1/download_archive"}'
        ],
        repr=False,
    )
    """
    attachment api object for the uploaded file may not be present for all migrations
    """

    progress_url: Optional[str] = Field(
        None, examples=['https://example.com/api/v1/progress/4'], repr=False
    )
    """
    The api endpoint for polling the current progress
    """

    user_id: Optional[int] = Field(None, examples=[4], repr=False)
    """
    The user who started the migration
    """

    workflow_state: Optional[str] = Field(None, examples=['running'], repr=False)
    """
    Current state of the content migration: pre_processing, pre_processed, running, waiting_for_select, completed, failed
    """

    started_at: Optional[datetime] = Field(
        None, examples=['2012-06-01T00:00:00-06:00'], repr=False
    )
    """
    timestamp
    """

    finished_at: Optional[datetime] = Field(
        None, examples=['2012-06-01T00:00:00-06:00'], repr=False
    )
    """
    timestamp
    """

    pre_attachment: Optional[str] = Field(
        None,
        examples=[
            '{"upload_url"=>"", "message"=>"file exceeded quota", "upload_params"=>{}}'
        ],
        repr=False,
    )
    """
    file uploading data, see {file:file_uploads.html File Upload Documentation} for file upload workflow This works a little differently in that all the file data is in the pre_attachment hash if there is no upload_url then there was an attachment pre-processing error, the error message will be in the message key This data will only be here after a create or update call
    """



class Migrator(CanvasBaseModel):
    type: Optional[str] = Field(None, examples=['common_cartridge_importer'])
    """
    The value to pass to the create endpoint
    """

    requires_file_upload: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    Whether this endpoint requires a file upload
    """

    name: Optional[str] = Field(
        None, examples=['Common Cartridge 1.0/1.1/1.2 Package'], repr=False
    )
    """
    Description of the package type expected
    """

    required_settings: Optional[list[str]] = Field(
        None, examples=[['source_course_id']], repr=False
    )
    """
    A list of fields this system requires
    """

