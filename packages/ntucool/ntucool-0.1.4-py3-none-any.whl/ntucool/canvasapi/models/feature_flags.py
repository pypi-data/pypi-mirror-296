# generated by datamodel-codegen:
#   filename:  feature_flags.json
#   timestamp: 2024-09-02T14:02:23+00:00

from __future__ import annotations

from datetime import datetime
from typing import Optional

from pydantic import Field

from . import CanvasBaseModel



class FeatureFlag(CanvasBaseModel):
    context_type: Optional[str] = Field(None, examples=['Account'])
    """
    The type of object to which this flag applies (Account, Course, or User). (This field is not present if this FeatureFlag represents the global Canvas default)
    """

    context_id: Optional[int] = Field(None, examples=[1038])
    """
    The id of the object to which this flag applies (This field is not present if this FeatureFlag represents the global Canvas default)
    """

    feature: Optional[str] = Field(None, examples=['fancy_wickets'])
    """
    The feature this flag controls
    """

    state: Optional[str] = Field(None, examples=['allowed'])
    """
    The policy for the feature at this context.  can be 'off', 'allowed', 'allowed_on', or 'on'.
    """

    locked: Optional[bool] = Field(None, examples=[False], repr=False)
    """
    If set, this feature flag cannot be changed in the caller's context because the flag is set 'off' or 'on' in a higher context
    """



class Feature(CanvasBaseModel):
    feature: Optional[str] = Field(None, examples=['fancy_wickets'], repr=False)
    """
    The symbolic name of the feature, used in FeatureFlags
    """

    display_name: Optional[str] = Field(None, examples=['Fancy Wickets'])
    """
    The user-visible name of the feature
    """

    applies_to: Optional[str] = Field(None, examples=['Course'])
    """
    The type of object the feature applies to (RootAccount, Account, Course, or User):
     * RootAccount features may only be controlled by flags on root accounts.
     * Account features may be controlled by flags on accounts and their parent accounts.
     * Course features may be controlled by flags on courses and their parent accounts.
     * User features may be controlled by flags on users and site admin only.
    """

    feature_flag: Optional[FeatureFlag] = Field(
        None, examples=[{'feature': 'fancy_wickets', 'state': 'allowed'}], repr=False
    )
    """
    The FeatureFlag that applies to the caller
    """

    root_opt_in: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    If true, a feature that is 'allowed' globally will be 'off' by default in root accounts. Otherwise, root accounts inherit the global 'allowed' setting, which allows sub-accounts and courses to turn features on with no root account action.
    """

    beta: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    Whether the feature is a feature preview. If true, opting in includes ongoing updates outside the regular release schedule.
    """

    autoexpand: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    Whether the details of the feature are autoexpanded on page load vs. the user clicking to expand.
    """

    release_notes_url: Optional[str] = Field(
        None,
        examples=['http://canvas.example.com/release_notes#fancy_wickets'],
        repr=False,
    )
    """
    A URL to the release notes describing the feature
    """

