# generated by datamodel-codegen:
#   filename:  calendar_events.json
#   timestamp: 2024-09-02T14:02:23+00:00

from __future__ import annotations

from datetime import datetime
from typing import Any, Optional

from pydantic import Field

from . import CanvasBaseModel



class CalendarEvent(CanvasBaseModel):
    id: Optional[int] = Field(None, examples=[234])
    """
    The ID of the calendar event
    """

    title: Optional[str] = Field(None, examples=['Paintball Fight!'])
    """
    The title of the calendar event
    """

    start_at: Optional[datetime] = Field(
        None, examples=['2012-07-19T15:00:00-06:00'], repr=False
    )
    """
    The start timestamp of the event
    """

    end_at: Optional[datetime] = Field(
        None, examples=['2012-07-19T16:00:00-06:00'], repr=False
    )
    """
    The end timestamp of the event
    """

    description: Optional[str] = Field(
        None, examples=["<b>It's that time again!</b>"], repr=False
    )
    """
    The HTML description of the event
    """

    location_name: Optional[str] = Field(
        None, examples=['Greendale Community College'], repr=False
    )
    """
    The location name of the event
    """

    location_address: Optional[str] = Field(
        None, examples=['Greendale, Colorado'], repr=False
    )
    """
    The address where the event is taking place
    """

    context_code: Optional[str] = Field(None, examples=['course_123'], repr=False)
    """
    the context code of the calendar this event belongs to (course, group, user, or account)
    """

    effective_context_code: Optional[str] = Field(None, repr=False)
    """
    if specified, it indicates which calendar this event should be displayed on. for example, a section-level event would have the course's context code here, while the section's context code would be returned above)
    """

    context_name: Optional[str] = Field(None, examples=['Chemistry 101'], repr=False)
    """
    the context name of the calendar this event belongs to (course, user or group)
    """

    all_context_codes: Optional[str] = Field(
        None, examples=['course_123,course_456'], repr=False
    )
    """
    a comma-separated list of all calendar contexts this event is part of
    """

    workflow_state: Optional[str] = Field(None, examples=['active'], repr=False)
    """
    Current state of the event ('active', 'locked' or 'deleted') 'locked' indicates that start_at/end_at cannot be changed (though the event could be deleted). Normally only reservations or time slots with reservations are locked (see the Appointment Groups API)
    """

    hidden: Optional[bool] = Field(None, examples=[False], repr=False)
    """
    Whether this event should be displayed on the calendar. Only true for course-level events with section-level child events.
    """

    parent_event_id: Optional[int] = Field(None, repr=False)
    """
    Normally null. If this is a reservation (see the Appointment Groups API), the id will indicate the time slot it is for. If this is a section-level event, this will be the course-level parent event.
    """

    child_events_count: Optional[int] = Field(None, examples=[0], repr=False)
    """
    The number of child_events. See child_events (and parent_event_id)
    """

    child_events: Optional[list[int]] = Field(None, repr=False)
    """
    Included by default, but may be excluded (see include[] option). If this is a time slot (see the Appointment Groups API) this will be a list of any reservations. If this is a course-level event, this will be a list of section-level events (if any)
    """

    url: Optional[str] = Field(
        None, examples=['https://example.com/api/v1/calendar_events/234'], repr=False
    )
    """
    URL for this calendar event (to update, delete, etc.)
    """

    html_url: Optional[str] = Field(
        None,
        examples=[
            'https://example.com/calendar?event_id=234&include_contexts=course_123'
        ],
        repr=False,
    )
    """
    URL for a user to view this event
    """

    all_day_date: Optional[datetime] = Field(None, examples=['2012-07-19'], repr=False)
    """
    The date of this event
    """

    all_day: Optional[bool] = Field(None, examples=[False], repr=False)
    """
    Boolean indicating whether this is an all-day event (midnight to midnight)
    """

    created_at: Optional[datetime] = Field(
        None, examples=['2012-07-12T10:55:20-06:00'], repr=False
    )
    """
    When the calendar event was created
    """

    updated_at: Optional[datetime] = Field(
        None, examples=['2012-07-12T10:55:20-06:00'], repr=False
    )
    """
    When the calendar event was last updated
    """

    appointment_group_id: Optional[int] = Field(None, repr=False)
    """
    Various Appointment-Group-related fields.These fields are only pertinent to time slots (appointments) and reservations of those time slots. See the Appointment Groups API. The id of the appointment group
    """

    appointment_group_url: Optional[str] = Field(None, repr=False)
    """
    The API URL of the appointment group
    """

    own_reservation: Optional[bool] = Field(None, examples=[False], repr=False)
    """
    If the event is a reservation, this a boolean indicating whether it is the current user's reservation, or someone else's
    """

    reserve_url: Optional[str] = Field(None, repr=False)
    """
    If the event is a time slot, the API URL for reserving it
    """

    reserved: Optional[bool] = Field(None, examples=[False], repr=False)
    """
    If the event is a time slot, a boolean indicating whether the user has already made a reservation for it
    """

    participant_type: Optional[str] = Field(None, examples=['User'], repr=False)
    """
    The type of participant to sign up for a slot: 'User' or 'Group'
    """

    participants_per_appointment: Optional[int] = Field(None, repr=False)
    """
    If the event is a time slot, this is the participant limit
    """

    available_slots: Optional[int] = Field(None, repr=False)
    """
    If the event is a time slot and it has a participant limit, an integer indicating how many slots are available
    """

    user: Optional[str] = Field(None, repr=False)
    """
    If the event is a user-level reservation, this will contain the user participant JSON (refer to the Users API).
    """

    group: Optional[str] = Field(None, repr=False)
    """
    If the event is a group-level reservation, this will contain the group participant JSON (refer to the Groups API).
    """

    important_dates: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    Boolean indicating whether this has important dates.
    """

    series_uuid: Optional[Any] = Field(None, repr=False)
    """
    Identifies the recurring event series this event may belong to.
    """

    rrule: Optional[str] = Field(None, repr=False)
    """
    An iCalendar RRULE for defining how events in a recurring event series repeat.
    """

    series_head: Optional[bool] = Field(None, repr=False)
    """
    Boolean indicating if is the first event in the series of recurring events.
    """

    series_natural_language: Optional[str] = Field(
        None, examples=['Daily 5 times'], repr=False
    )
    """
    A natural language expression of how events occur in the series.
    """

    blackout_date: Optional[bool] = Field(None, examples=[True], repr=False)
    """
    Boolean indicating whether this has blackout date.
    """



class AssignmentEvent(CanvasBaseModel):
    id: Optional[str] = Field(None, examples=['assignment_987'])
    """
    A synthetic ID for the assignment
    """

    title: Optional[str] = Field(None, examples=['Essay'])
    """
    The title of the assignment
    """

    start_at: Optional[datetime] = Field(None, examples=['2012-07-19T23:59:00-06:00'])
    """
    The due_at timestamp of the assignment
    """

    end_at: Optional[datetime] = Field(None, examples=['2012-07-19T23:59:00-06:00'])
    """
    The due_at timestamp of the assignment
    """

    description: Optional[str] = Field(
        None, examples=['<b>Write an essay. Whatever you want.</b>']
    )
    """
    The HTML description of the assignment
    """

    context_code: Optional[str] = Field(None, examples=['course_123'])
    """
    the context code of the (course) calendar this assignment belongs to
    """

    workflow_state: Optional[str] = Field(None, examples=['published'])
    """
    Current state of the assignment ('published' or 'deleted')
    """

    url: Optional[str] = Field(
        None, examples=['https://example.com/api/v1/calendar_events/assignment_987']
    )
    """
    URL for this assignment (note that updating/deleting should be done via the Assignments API)
    """

    html_url: Optional[str] = Field(
        None, examples=['http://example.com/courses/123/assignments/987']
    )
    """
    URL for a user to view this assignment
    """

    all_day_date: Optional[datetime] = Field(None, examples=['2012-07-19'])
    """
    The due date of this assignment
    """

    all_day: Optional[bool] = Field(None, examples=[True])
    """
    Boolean indicating whether this is an all-day event (e.g. assignment due at midnight)
    """

    created_at: Optional[datetime] = Field(None, examples=['2012-07-12T10:55:20-06:00'])
    """
    When the assignment was created
    """

    updated_at: Optional[datetime] = Field(None, examples=['2012-07-12T10:55:20-06:00'])
    """
    When the assignment was last updated
    """

    assignment: Optional[Assignment] = None
    """
    The full assignment JSON data (See the Assignments API)
    """

    assignment_overrides: Optional[AssignmentOverride] = None
    """
    The list of AssignmentOverrides that apply to this event (See the Assignments API). This information is useful for determining which students or sections this assignment-due event applies to.
    """

    important_dates: Optional[bool] = Field(None, examples=[True])
    """
    Boolean indicating whether this has important dates.
    """

    rrule: Optional[str] = Field(None, examples=['FREQ=DAILY;INTERVAL=1;COUNT=5'])
    """
    An iCalendar RRULE for defining how events in a recurring event series repeat.
    """

    series_head: Optional[bool] = None
    """
    Trueif this is the first event in the series of recurring events.
    """

    series_natural_language: Optional[str] = Field(None, examples=['Daily 5 times'])
    """
    A natural language expression of how events occur in the series.
    """


from .assignments import Assignment, AssignmentOverride  # noqa: E402