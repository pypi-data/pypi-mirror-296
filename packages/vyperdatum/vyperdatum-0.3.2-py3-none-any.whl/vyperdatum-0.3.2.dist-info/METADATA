Metadata-Version: 2.1
Name: vyperdatum
Version: 0.3.2
Summary: https://vyperdatum.readthedocs.io/en/latest/
Author-email: Mohammad Ashkezari <mohammad.ashkezari@noaa.gov>
License: MIT License
        
        Copyright (c) 2024 NOAA
        
        Permission is hereby granted, free of charge, to any person obtaining a copy
        of this software and associated documentation files (the "Software"), to deal
        in the Software without restriction, including without limitation the rights
        to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
        copies of the Software, and to permit persons to whom the Software is
        furnished to do so, subject to the following conditions:
        
        The above copyright notice and this permission notice shall be included in all
        copies or substantial portions of the Software.
        
        THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
        IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
        FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
        AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
        LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
        OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
        SOFTWARE.
Project-URL: Documentation, https://vyperdatum.readthedocs.io/en/latest/
Project-URL: Repository, https://github.com/mohammadashkezari-noaa/vyperdatum
Keywords: bathymetry,datum,NOAA,NBS
Classifier: Development Status :: 3 - Alpha
Classifier: Programming Language :: Python
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy
Requires-Dist: pyproj
Requires-Dist: pandas
Requires-Dist: tqdm
Requires-Dist: colorama
Requires-Dist: pydantic
Requires-Dist: networkx
Provides-Extra: docs
Requires-Dist: sphinx; extra == "docs"
Requires-Dist: sphinx-rtd-theme; extra == "docs"
Provides-Extra: lint
Requires-Dist: flake8; extra == "lint"
Requires-Dist: black; extra == "lint"
Provides-Extra: tests
Requires-Dist: pytest; extra == "tests"
Requires-Dist: pytest-cov; extra == "tests"

<img align="right" src="https://upload.wikimedia.org/wikipedia/commons/7/79/NOAA_logo.svg" width="100">
<br/>

[![PyPI version](https://badge.fury.io/py/vyperdatum.svg)](https://badge.fury.io/py/vyperdatum)
[![DOI](https://zenodo.org/badge/785898982.svg)](https://zenodo.org/doi/10.5281/zenodo.13345073)
[![Read the Docs](https://readthedocs.org/projects/vyperdatum/badge/?version=latest)](https://vyperdatum.readthedocs.io/en/latest/)

## Vyperdatum

**Vyperdatum** [definition] 

## Installation
Vyperdatum requires `GDAL` which can be installed from the conda's conda-forge channel. Below, we first create a conda environment, install `GDAL` and Vperdatum.

```bash
conda create -n vd python=3.11
conda activate vd
conda install -c conda-forge gdal=3.8.4
pip install vyperdatum
```

## Usage
Vyperdatum offers a `Transformer` class to handle the transformation of point and raster data. The `Transformer` class applies transformation from `crs_from` to `crs_to` coordinate reference systems. The transformation steps can be prescribed or let the `Pipeline` class 

```python
from vyperdatum.transformer import Transformer
from vyperdatum.pipeline import Pipeline

crs_from = "EPSG:6346"
crs_to = "EPSG:6346+NOAA:5224"
tf = Transformer(crs_from=crs_from,
                 crs_to=crs_to,
                 steps=["EPSG:6346", "EPSG:6319", "EPSG:6318+NOAA:5224", "EPSG:6346+NOAA:5224"]
                 #  steps=Pipeline(crs_from=crs_from, crs_to=crs_to).linear_steps()
                 #  steps=Pipeline(crs_from=crs_from, crs_to=crs_to).graph_steps()                 
                 )
```
### raster transform                
```python                
tf.transform_raster(input_file=<PATH_TO_INPUT_RASTER_FILE>,
                    output_file=<PATH_TO_OUTPUT_RASTER_FILE>
                    )
```

### point transform                
```python
# random values
x, y, z = 278881.198, 2719890.433, 0
xt, yt, zt = tf.transform_points(x, y, z, always_xy=True, allow_ballpark=False)
```

## Documentation

For a quick start, more detailed descriptions or search through the API, see Vyperdatums's documentation at: https://vyperdatum.readthedocs.io.
