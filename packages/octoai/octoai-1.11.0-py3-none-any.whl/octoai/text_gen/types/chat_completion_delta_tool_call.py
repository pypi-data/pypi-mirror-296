# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

from ...core.datetime_utils import serialize_datetime
from ...core.pydantic_utilities import deep_union_pydantic_dicts, pydantic_v1
from .chat_completion_delta_tool_call_function import ChatCompletionDeltaToolCallFunction


class ChatCompletionDeltaToolCall(pydantic_v1.BaseModel):
    """
    A single delta representing one partial piece of a tool call.

    Today this only supports function calls, but the schema supports
    indirection for different tool calls in the future.
    """

    function: typing.Optional[ChatCompletionDeltaToolCallFunction] = pydantic_v1.Field(default=None)
    """
    The delta of the function call generated by the model.
    """

    id: typing.Optional[str] = pydantic_v1.Field(default=None)
    """
    The ID of the tool call.
    """

    index: int = pydantic_v1.Field()
    """
    The sequence index of the tool call.
    """

    type: typing.Optional[typing.Literal["function"]] = pydantic_v1.Field(default=None)
    """
    The type of tool. Today only `function` is supported.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic_v1.Extra.allow
        json_encoders = {dt.datetime: serialize_datetime}
