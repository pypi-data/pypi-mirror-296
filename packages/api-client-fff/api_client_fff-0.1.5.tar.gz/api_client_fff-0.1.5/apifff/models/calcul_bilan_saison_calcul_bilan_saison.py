# coding: utf-8

"""

    # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CalculBilanSaisonCalculBilanSaison(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'sa_no': 'int',
        'nb_team': 'int',
        'ranking_evol': 'str',
        'nb_match': 'int',
        'nb_win_home': 'int',
        'nb_equal_home': 'int',
        'nb_lost_home': 'int',
        'nb_win_away': 'int',
        'nb_equal_away': 'int',
        'nb_lost_away': 'int',
        'goal_scored': 'int',
        'average_goal_scored': 'float',
        'goal_conceded': 'int',
        'average_goal_conceded': 'float',
        'best_match': 'AnyOfCalculBilanSaisonCalculBilanSaisonBestMatch',
        'worst_match': 'AnyOfCalculBilanSaisonCalculBilanSaisonWorstMatch',
        'team_final_position': 'str',
        'equipe': 'AnyOfCalculBilanSaisonCalculBilanSaisonEquipe'
    }

    attribute_map = {
        'sa_no': 'sa_no',
        'nb_team': 'nb_team',
        'ranking_evol': 'ranking_evol',
        'nb_match': 'nb_match',
        'nb_win_home': 'nb_win_home',
        'nb_equal_home': 'nb_equal_home',
        'nb_lost_home': 'nb_lost_home',
        'nb_win_away': 'nb_win_away',
        'nb_equal_away': 'nb_equal_away',
        'nb_lost_away': 'nb_lost_away',
        'goal_scored': 'goal_scored',
        'average_goal_scored': 'average_goal_scored',
        'goal_conceded': 'goal_conceded',
        'average_goal_conceded': 'average_goal_conceded',
        'best_match': 'best_match',
        'worst_match': 'worst_match',
        'team_final_position': 'team_final_position',
        'equipe': 'equipe'
    }

    def __init__(self, sa_no=None, nb_team=None, ranking_evol=None, nb_match=None, nb_win_home=None, nb_equal_home=None, nb_lost_home=None, nb_win_away=None, nb_equal_away=None, nb_lost_away=None, goal_scored=None, average_goal_scored=None, goal_conceded=None, average_goal_conceded=None, best_match=None, worst_match=None, team_final_position=None, equipe=None):  # noqa: E501
        """CalculBilanSaisonCalculBilanSaison - a model defined in Swagger"""  # noqa: E501
        self._sa_no = None
        self._nb_team = None
        self._ranking_evol = None
        self._nb_match = None
        self._nb_win_home = None
        self._nb_equal_home = None
        self._nb_lost_home = None
        self._nb_win_away = None
        self._nb_equal_away = None
        self._nb_lost_away = None
        self._goal_scored = None
        self._average_goal_scored = None
        self._goal_conceded = None
        self._average_goal_conceded = None
        self._best_match = None
        self._worst_match = None
        self._team_final_position = None
        self._equipe = None
        self.discriminator = None
        if sa_no is not None:
            self.sa_no = sa_no
        if nb_team is not None:
            self.nb_team = nb_team
        if ranking_evol is not None:
            self.ranking_evol = ranking_evol
        if nb_match is not None:
            self.nb_match = nb_match
        if nb_win_home is not None:
            self.nb_win_home = nb_win_home
        if nb_equal_home is not None:
            self.nb_equal_home = nb_equal_home
        if nb_lost_home is not None:
            self.nb_lost_home = nb_lost_home
        if nb_win_away is not None:
            self.nb_win_away = nb_win_away
        if nb_equal_away is not None:
            self.nb_equal_away = nb_equal_away
        if nb_lost_away is not None:
            self.nb_lost_away = nb_lost_away
        if goal_scored is not None:
            self.goal_scored = goal_scored
        if average_goal_scored is not None:
            self.average_goal_scored = average_goal_scored
        if goal_conceded is not None:
            self.goal_conceded = goal_conceded
        if average_goal_conceded is not None:
            self.average_goal_conceded = average_goal_conceded
        if best_match is not None:
            self.best_match = best_match
        if worst_match is not None:
            self.worst_match = worst_match
        if team_final_position is not None:
            self.team_final_position = team_final_position
        if equipe is not None:
            self.equipe = equipe

    @property
    def sa_no(self):
        """Gets the sa_no of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501


        :return: The sa_no of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :rtype: int
        """
        return self._sa_no

    @sa_no.setter
    def sa_no(self, sa_no):
        """Sets the sa_no of this CalculBilanSaisonCalculBilanSaison.


        :param sa_no: The sa_no of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :type: int
        """

        self._sa_no = sa_no

    @property
    def nb_team(self):
        """Gets the nb_team of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501


        :return: The nb_team of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :rtype: int
        """
        return self._nb_team

    @nb_team.setter
    def nb_team(self, nb_team):
        """Sets the nb_team of this CalculBilanSaisonCalculBilanSaison.


        :param nb_team: The nb_team of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :type: int
        """

        self._nb_team = nb_team

    @property
    def ranking_evol(self):
        """Gets the ranking_evol of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501


        :return: The ranking_evol of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :rtype: str
        """
        return self._ranking_evol

    @ranking_evol.setter
    def ranking_evol(self, ranking_evol):
        """Sets the ranking_evol of this CalculBilanSaisonCalculBilanSaison.


        :param ranking_evol: The ranking_evol of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :type: str
        """

        self._ranking_evol = ranking_evol

    @property
    def nb_match(self):
        """Gets the nb_match of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501


        :return: The nb_match of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :rtype: int
        """
        return self._nb_match

    @nb_match.setter
    def nb_match(self, nb_match):
        """Sets the nb_match of this CalculBilanSaisonCalculBilanSaison.


        :param nb_match: The nb_match of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :type: int
        """

        self._nb_match = nb_match

    @property
    def nb_win_home(self):
        """Gets the nb_win_home of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501


        :return: The nb_win_home of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :rtype: int
        """
        return self._nb_win_home

    @nb_win_home.setter
    def nb_win_home(self, nb_win_home):
        """Sets the nb_win_home of this CalculBilanSaisonCalculBilanSaison.


        :param nb_win_home: The nb_win_home of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :type: int
        """

        self._nb_win_home = nb_win_home

    @property
    def nb_equal_home(self):
        """Gets the nb_equal_home of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501


        :return: The nb_equal_home of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :rtype: int
        """
        return self._nb_equal_home

    @nb_equal_home.setter
    def nb_equal_home(self, nb_equal_home):
        """Sets the nb_equal_home of this CalculBilanSaisonCalculBilanSaison.


        :param nb_equal_home: The nb_equal_home of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :type: int
        """

        self._nb_equal_home = nb_equal_home

    @property
    def nb_lost_home(self):
        """Gets the nb_lost_home of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501


        :return: The nb_lost_home of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :rtype: int
        """
        return self._nb_lost_home

    @nb_lost_home.setter
    def nb_lost_home(self, nb_lost_home):
        """Sets the nb_lost_home of this CalculBilanSaisonCalculBilanSaison.


        :param nb_lost_home: The nb_lost_home of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :type: int
        """

        self._nb_lost_home = nb_lost_home

    @property
    def nb_win_away(self):
        """Gets the nb_win_away of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501


        :return: The nb_win_away of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :rtype: int
        """
        return self._nb_win_away

    @nb_win_away.setter
    def nb_win_away(self, nb_win_away):
        """Sets the nb_win_away of this CalculBilanSaisonCalculBilanSaison.


        :param nb_win_away: The nb_win_away of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :type: int
        """

        self._nb_win_away = nb_win_away

    @property
    def nb_equal_away(self):
        """Gets the nb_equal_away of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501


        :return: The nb_equal_away of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :rtype: int
        """
        return self._nb_equal_away

    @nb_equal_away.setter
    def nb_equal_away(self, nb_equal_away):
        """Sets the nb_equal_away of this CalculBilanSaisonCalculBilanSaison.


        :param nb_equal_away: The nb_equal_away of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :type: int
        """

        self._nb_equal_away = nb_equal_away

    @property
    def nb_lost_away(self):
        """Gets the nb_lost_away of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501


        :return: The nb_lost_away of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :rtype: int
        """
        return self._nb_lost_away

    @nb_lost_away.setter
    def nb_lost_away(self, nb_lost_away):
        """Sets the nb_lost_away of this CalculBilanSaisonCalculBilanSaison.


        :param nb_lost_away: The nb_lost_away of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :type: int
        """

        self._nb_lost_away = nb_lost_away

    @property
    def goal_scored(self):
        """Gets the goal_scored of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501


        :return: The goal_scored of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :rtype: int
        """
        return self._goal_scored

    @goal_scored.setter
    def goal_scored(self, goal_scored):
        """Sets the goal_scored of this CalculBilanSaisonCalculBilanSaison.


        :param goal_scored: The goal_scored of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :type: int
        """

        self._goal_scored = goal_scored

    @property
    def average_goal_scored(self):
        """Gets the average_goal_scored of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501


        :return: The average_goal_scored of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :rtype: float
        """
        return self._average_goal_scored

    @average_goal_scored.setter
    def average_goal_scored(self, average_goal_scored):
        """Sets the average_goal_scored of this CalculBilanSaisonCalculBilanSaison.


        :param average_goal_scored: The average_goal_scored of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :type: float
        """

        self._average_goal_scored = average_goal_scored

    @property
    def goal_conceded(self):
        """Gets the goal_conceded of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501


        :return: The goal_conceded of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :rtype: int
        """
        return self._goal_conceded

    @goal_conceded.setter
    def goal_conceded(self, goal_conceded):
        """Sets the goal_conceded of this CalculBilanSaisonCalculBilanSaison.


        :param goal_conceded: The goal_conceded of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :type: int
        """

        self._goal_conceded = goal_conceded

    @property
    def average_goal_conceded(self):
        """Gets the average_goal_conceded of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501


        :return: The average_goal_conceded of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :rtype: float
        """
        return self._average_goal_conceded

    @average_goal_conceded.setter
    def average_goal_conceded(self, average_goal_conceded):
        """Sets the average_goal_conceded of this CalculBilanSaisonCalculBilanSaison.


        :param average_goal_conceded: The average_goal_conceded of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :type: float
        """

        self._average_goal_conceded = average_goal_conceded

    @property
    def best_match(self):
        """Gets the best_match of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501


        :return: The best_match of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :rtype: AnyOfCalculBilanSaisonCalculBilanSaisonBestMatch
        """
        return self._best_match

    @best_match.setter
    def best_match(self, best_match):
        """Sets the best_match of this CalculBilanSaisonCalculBilanSaison.


        :param best_match: The best_match of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :type: AnyOfCalculBilanSaisonCalculBilanSaisonBestMatch
        """

        self._best_match = best_match

    @property
    def worst_match(self):
        """Gets the worst_match of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501


        :return: The worst_match of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :rtype: AnyOfCalculBilanSaisonCalculBilanSaisonWorstMatch
        """
        return self._worst_match

    @worst_match.setter
    def worst_match(self, worst_match):
        """Sets the worst_match of this CalculBilanSaisonCalculBilanSaison.


        :param worst_match: The worst_match of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :type: AnyOfCalculBilanSaisonCalculBilanSaisonWorstMatch
        """

        self._worst_match = worst_match

    @property
    def team_final_position(self):
        """Gets the team_final_position of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501


        :return: The team_final_position of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :rtype: str
        """
        return self._team_final_position

    @team_final_position.setter
    def team_final_position(self, team_final_position):
        """Sets the team_final_position of this CalculBilanSaisonCalculBilanSaison.


        :param team_final_position: The team_final_position of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :type: str
        """

        self._team_final_position = team_final_position

    @property
    def equipe(self):
        """Gets the equipe of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501


        :return: The equipe of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :rtype: AnyOfCalculBilanSaisonCalculBilanSaisonEquipe
        """
        return self._equipe

    @equipe.setter
    def equipe(self, equipe):
        """Sets the equipe of this CalculBilanSaisonCalculBilanSaison.


        :param equipe: The equipe of this CalculBilanSaisonCalculBilanSaison.  # noqa: E501
        :type: AnyOfCalculBilanSaisonCalculBilanSaisonEquipe
        """

        self._equipe = equipe

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CalculBilanSaisonCalculBilanSaison, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalculBilanSaisonCalculBilanSaison):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
