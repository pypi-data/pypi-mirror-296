# coding: utf-8

"""

    # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MatchEntityJsonldMatchMembre(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'OneOfMatchEntityJsonldMatchMembreContext',
        'id': 'str',
        'type': 'str',
        'ma_no': 'int',
        'competition': 'AnyOfMatchEntityJsonldMatchMembreCompetition',
        'phase': 'AnyOfMatchEntityJsonldMatchMembrePhase',
        'poule': 'AnyOfMatchEntityJsonldMatchMembrePoule',
        'poule_journee': 'AnyOfMatchEntityJsonldMatchMembrePouleJournee',
        'home': 'AnyOfMatchEntityJsonldMatchMembreHome',
        'away': 'AnyOfMatchEntityJsonldMatchMembreAway',
        'terrain': 'AnyOfMatchEntityJsonldMatchMembreTerrain',
        'season': 'int',
        'is_overtime': 'str',
        '_date': 'datetime',
        'time': 'str',
        'initial_date': 'datetime',
        'home_resu': 'str',
        'cr_nb_but': 'int',
        'home_score': 'int',
        'home_but_contre': 'int',
        'home_nb_point': 'int',
        'home_nb_tir_but': 'int',
        'home_is_forfeit': 'str',
        'away_resu': 'str',
        'away_nb_but': 'int',
        'away_score': 'int',
        'away_but_contre': 'int',
        'away_nb_point': 'int',
        'away_nb_tir_but': 'int',
        'away_nb_point_pena': 'int',
        'away_is_forfeit': 'str',
        'ma_fmi_pres': 'bool',
        'match_membres': 'list[MatchMembreJsonldMatchMembre]',
        'status_label': 'str'
    }

    attribute_map = {
        'context': '@context',
        'id': '@id',
        'type': '@type',
        'ma_no': 'ma_no',
        'competition': 'competition',
        'phase': 'phase',
        'poule': 'poule',
        'poule_journee': 'poule_journee',
        'home': 'home',
        'away': 'away',
        'terrain': 'terrain',
        'season': 'season',
        'is_overtime': 'is_overtime',
        '_date': 'date',
        'time': 'time',
        'initial_date': 'initial_date',
        'home_resu': 'home_resu',
        'cr_nb_but': 'cr_nb_but',
        'home_score': 'home_score',
        'home_but_contre': 'home_but_contre',
        'home_nb_point': 'home_nb_point',
        'home_nb_tir_but': 'home_nb_tir_but',
        'home_is_forfeit': 'home_is_forfeit',
        'away_resu': 'away_resu',
        'away_nb_but': 'away_nb_but',
        'away_score': 'away_score',
        'away_but_contre': 'away_but_contre',
        'away_nb_point': 'away_nb_point',
        'away_nb_tir_but': 'away_nb_tir_but',
        'away_nb_point_pena': 'away_nb_point_pena',
        'away_is_forfeit': 'away_is_forfeit',
        'ma_fmi_pres': 'ma_fmi_pres',
        'match_membres': 'match_membres',
        'status_label': 'status_label'
    }

    def __init__(self, context=None, id=None, type=None, ma_no=None, competition=None, phase=None, poule=None, poule_journee=None, home=None, away=None, terrain=None, season=None, is_overtime=None, _date=None, time=None, initial_date=None, home_resu=None, cr_nb_but=None, home_score=None, home_but_contre=None, home_nb_point=None, home_nb_tir_but=None, home_is_forfeit=None, away_resu=None, away_nb_but=None, away_score=None, away_but_contre=None, away_nb_point=None, away_nb_tir_but=None, away_nb_point_pena=None, away_is_forfeit=None, ma_fmi_pres=None, match_membres=None, status_label=None):  # noqa: E501
        """MatchEntityJsonldMatchMembre - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._id = None
        self._type = None
        self._ma_no = None
        self._competition = None
        self._phase = None
        self._poule = None
        self._poule_journee = None
        self._home = None
        self._away = None
        self._terrain = None
        self._season = None
        self._is_overtime = None
        self.__date = None
        self._time = None
        self._initial_date = None
        self._home_resu = None
        self._cr_nb_but = None
        self._home_score = None
        self._home_but_contre = None
        self._home_nb_point = None
        self._home_nb_tir_but = None
        self._home_is_forfeit = None
        self._away_resu = None
        self._away_nb_but = None
        self._away_score = None
        self._away_but_contre = None
        self._away_nb_point = None
        self._away_nb_tir_but = None
        self._away_nb_point_pena = None
        self._away_is_forfeit = None
        self._ma_fmi_pres = None
        self._match_membres = None
        self._status_label = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if ma_no is not None:
            self.ma_no = ma_no
        if competition is not None:
            self.competition = competition
        if phase is not None:
            self.phase = phase
        if poule is not None:
            self.poule = poule
        if poule_journee is not None:
            self.poule_journee = poule_journee
        if home is not None:
            self.home = home
        if away is not None:
            self.away = away
        if terrain is not None:
            self.terrain = terrain
        if season is not None:
            self.season = season
        if is_overtime is not None:
            self.is_overtime = is_overtime
        if _date is not None:
            self._date = _date
        if time is not None:
            self.time = time
        if initial_date is not None:
            self.initial_date = initial_date
        if home_resu is not None:
            self.home_resu = home_resu
        if cr_nb_but is not None:
            self.cr_nb_but = cr_nb_but
        if home_score is not None:
            self.home_score = home_score
        if home_but_contre is not None:
            self.home_but_contre = home_but_contre
        if home_nb_point is not None:
            self.home_nb_point = home_nb_point
        if home_nb_tir_but is not None:
            self.home_nb_tir_but = home_nb_tir_but
        if home_is_forfeit is not None:
            self.home_is_forfeit = home_is_forfeit
        if away_resu is not None:
            self.away_resu = away_resu
        if away_nb_but is not None:
            self.away_nb_but = away_nb_but
        if away_score is not None:
            self.away_score = away_score
        if away_but_contre is not None:
            self.away_but_contre = away_but_contre
        if away_nb_point is not None:
            self.away_nb_point = away_nb_point
        if away_nb_tir_but is not None:
            self.away_nb_tir_but = away_nb_tir_but
        if away_nb_point_pena is not None:
            self.away_nb_point_pena = away_nb_point_pena
        if away_is_forfeit is not None:
            self.away_is_forfeit = away_is_forfeit
        if ma_fmi_pres is not None:
            self.ma_fmi_pres = ma_fmi_pres
        if match_membres is not None:
            self.match_membres = match_membres
        if status_label is not None:
            self.status_label = status_label

    @property
    def context(self):
        """Gets the context of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The context of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: OneOfMatchEntityJsonldMatchMembreContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this MatchEntityJsonldMatchMembre.


        :param context: The context of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: OneOfMatchEntityJsonldMatchMembreContext
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The id of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MatchEntityJsonldMatchMembre.


        :param id: The id of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The type of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MatchEntityJsonldMatchMembre.


        :param type: The type of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def ma_no(self):
        """Gets the ma_no of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The ma_no of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: int
        """
        return self._ma_no

    @ma_no.setter
    def ma_no(self, ma_no):
        """Sets the ma_no of this MatchEntityJsonldMatchMembre.


        :param ma_no: The ma_no of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: int
        """

        self._ma_no = ma_no

    @property
    def competition(self):
        """Gets the competition of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The competition of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: AnyOfMatchEntityJsonldMatchMembreCompetition
        """
        return self._competition

    @competition.setter
    def competition(self, competition):
        """Sets the competition of this MatchEntityJsonldMatchMembre.


        :param competition: The competition of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: AnyOfMatchEntityJsonldMatchMembreCompetition
        """

        self._competition = competition

    @property
    def phase(self):
        """Gets the phase of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The phase of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: AnyOfMatchEntityJsonldMatchMembrePhase
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this MatchEntityJsonldMatchMembre.


        :param phase: The phase of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: AnyOfMatchEntityJsonldMatchMembrePhase
        """

        self._phase = phase

    @property
    def poule(self):
        """Gets the poule of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The poule of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: AnyOfMatchEntityJsonldMatchMembrePoule
        """
        return self._poule

    @poule.setter
    def poule(self, poule):
        """Sets the poule of this MatchEntityJsonldMatchMembre.


        :param poule: The poule of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: AnyOfMatchEntityJsonldMatchMembrePoule
        """

        self._poule = poule

    @property
    def poule_journee(self):
        """Gets the poule_journee of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The poule_journee of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: AnyOfMatchEntityJsonldMatchMembrePouleJournee
        """
        return self._poule_journee

    @poule_journee.setter
    def poule_journee(self, poule_journee):
        """Sets the poule_journee of this MatchEntityJsonldMatchMembre.


        :param poule_journee: The poule_journee of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: AnyOfMatchEntityJsonldMatchMembrePouleJournee
        """

        self._poule_journee = poule_journee

    @property
    def home(self):
        """Gets the home of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The home of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: AnyOfMatchEntityJsonldMatchMembreHome
        """
        return self._home

    @home.setter
    def home(self, home):
        """Sets the home of this MatchEntityJsonldMatchMembre.


        :param home: The home of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: AnyOfMatchEntityJsonldMatchMembreHome
        """

        self._home = home

    @property
    def away(self):
        """Gets the away of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The away of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: AnyOfMatchEntityJsonldMatchMembreAway
        """
        return self._away

    @away.setter
    def away(self, away):
        """Sets the away of this MatchEntityJsonldMatchMembre.


        :param away: The away of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: AnyOfMatchEntityJsonldMatchMembreAway
        """

        self._away = away

    @property
    def terrain(self):
        """Gets the terrain of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The terrain of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: AnyOfMatchEntityJsonldMatchMembreTerrain
        """
        return self._terrain

    @terrain.setter
    def terrain(self, terrain):
        """Sets the terrain of this MatchEntityJsonldMatchMembre.


        :param terrain: The terrain of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: AnyOfMatchEntityJsonldMatchMembreTerrain
        """

        self._terrain = terrain

    @property
    def season(self):
        """Gets the season of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The season of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this MatchEntityJsonldMatchMembre.


        :param season: The season of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: int
        """

        self._season = season

    @property
    def is_overtime(self):
        """Gets the is_overtime of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The is_overtime of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: str
        """
        return self._is_overtime

    @is_overtime.setter
    def is_overtime(self, is_overtime):
        """Sets the is_overtime of this MatchEntityJsonldMatchMembre.


        :param is_overtime: The is_overtime of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: str
        """

        self._is_overtime = is_overtime

    @property
    def _date(self):
        """Gets the _date of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The _date of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this MatchEntityJsonldMatchMembre.


        :param _date: The _date of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def time(self):
        """Gets the time of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The time of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this MatchEntityJsonldMatchMembre.


        :param time: The time of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def initial_date(self):
        """Gets the initial_date of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The initial_date of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: datetime
        """
        return self._initial_date

    @initial_date.setter
    def initial_date(self, initial_date):
        """Sets the initial_date of this MatchEntityJsonldMatchMembre.


        :param initial_date: The initial_date of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: datetime
        """

        self._initial_date = initial_date

    @property
    def home_resu(self):
        """Gets the home_resu of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The home_resu of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: str
        """
        return self._home_resu

    @home_resu.setter
    def home_resu(self, home_resu):
        """Sets the home_resu of this MatchEntityJsonldMatchMembre.


        :param home_resu: The home_resu of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: str
        """

        self._home_resu = home_resu

    @property
    def cr_nb_but(self):
        """Gets the cr_nb_but of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The cr_nb_but of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: int
        """
        return self._cr_nb_but

    @cr_nb_but.setter
    def cr_nb_but(self, cr_nb_but):
        """Sets the cr_nb_but of this MatchEntityJsonldMatchMembre.


        :param cr_nb_but: The cr_nb_but of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: int
        """

        self._cr_nb_but = cr_nb_but

    @property
    def home_score(self):
        """Gets the home_score of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The home_score of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: int
        """
        return self._home_score

    @home_score.setter
    def home_score(self, home_score):
        """Sets the home_score of this MatchEntityJsonldMatchMembre.


        :param home_score: The home_score of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: int
        """

        self._home_score = home_score

    @property
    def home_but_contre(self):
        """Gets the home_but_contre of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The home_but_contre of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: int
        """
        return self._home_but_contre

    @home_but_contre.setter
    def home_but_contre(self, home_but_contre):
        """Sets the home_but_contre of this MatchEntityJsonldMatchMembre.


        :param home_but_contre: The home_but_contre of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: int
        """

        self._home_but_contre = home_but_contre

    @property
    def home_nb_point(self):
        """Gets the home_nb_point of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The home_nb_point of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: int
        """
        return self._home_nb_point

    @home_nb_point.setter
    def home_nb_point(self, home_nb_point):
        """Sets the home_nb_point of this MatchEntityJsonldMatchMembre.


        :param home_nb_point: The home_nb_point of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: int
        """

        self._home_nb_point = home_nb_point

    @property
    def home_nb_tir_but(self):
        """Gets the home_nb_tir_but of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The home_nb_tir_but of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: int
        """
        return self._home_nb_tir_but

    @home_nb_tir_but.setter
    def home_nb_tir_but(self, home_nb_tir_but):
        """Sets the home_nb_tir_but of this MatchEntityJsonldMatchMembre.


        :param home_nb_tir_but: The home_nb_tir_but of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: int
        """

        self._home_nb_tir_but = home_nb_tir_but

    @property
    def home_is_forfeit(self):
        """Gets the home_is_forfeit of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The home_is_forfeit of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: str
        """
        return self._home_is_forfeit

    @home_is_forfeit.setter
    def home_is_forfeit(self, home_is_forfeit):
        """Sets the home_is_forfeit of this MatchEntityJsonldMatchMembre.


        :param home_is_forfeit: The home_is_forfeit of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: str
        """

        self._home_is_forfeit = home_is_forfeit

    @property
    def away_resu(self):
        """Gets the away_resu of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The away_resu of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: str
        """
        return self._away_resu

    @away_resu.setter
    def away_resu(self, away_resu):
        """Sets the away_resu of this MatchEntityJsonldMatchMembre.


        :param away_resu: The away_resu of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: str
        """

        self._away_resu = away_resu

    @property
    def away_nb_but(self):
        """Gets the away_nb_but of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The away_nb_but of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: int
        """
        return self._away_nb_but

    @away_nb_but.setter
    def away_nb_but(self, away_nb_but):
        """Sets the away_nb_but of this MatchEntityJsonldMatchMembre.


        :param away_nb_but: The away_nb_but of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: int
        """

        self._away_nb_but = away_nb_but

    @property
    def away_score(self):
        """Gets the away_score of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The away_score of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: int
        """
        return self._away_score

    @away_score.setter
    def away_score(self, away_score):
        """Sets the away_score of this MatchEntityJsonldMatchMembre.


        :param away_score: The away_score of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: int
        """

        self._away_score = away_score

    @property
    def away_but_contre(self):
        """Gets the away_but_contre of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The away_but_contre of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: int
        """
        return self._away_but_contre

    @away_but_contre.setter
    def away_but_contre(self, away_but_contre):
        """Sets the away_but_contre of this MatchEntityJsonldMatchMembre.


        :param away_but_contre: The away_but_contre of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: int
        """

        self._away_but_contre = away_but_contre

    @property
    def away_nb_point(self):
        """Gets the away_nb_point of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The away_nb_point of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: int
        """
        return self._away_nb_point

    @away_nb_point.setter
    def away_nb_point(self, away_nb_point):
        """Sets the away_nb_point of this MatchEntityJsonldMatchMembre.


        :param away_nb_point: The away_nb_point of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: int
        """

        self._away_nb_point = away_nb_point

    @property
    def away_nb_tir_but(self):
        """Gets the away_nb_tir_but of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The away_nb_tir_but of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: int
        """
        return self._away_nb_tir_but

    @away_nb_tir_but.setter
    def away_nb_tir_but(self, away_nb_tir_but):
        """Sets the away_nb_tir_but of this MatchEntityJsonldMatchMembre.


        :param away_nb_tir_but: The away_nb_tir_but of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: int
        """

        self._away_nb_tir_but = away_nb_tir_but

    @property
    def away_nb_point_pena(self):
        """Gets the away_nb_point_pena of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The away_nb_point_pena of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: int
        """
        return self._away_nb_point_pena

    @away_nb_point_pena.setter
    def away_nb_point_pena(self, away_nb_point_pena):
        """Sets the away_nb_point_pena of this MatchEntityJsonldMatchMembre.


        :param away_nb_point_pena: The away_nb_point_pena of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: int
        """

        self._away_nb_point_pena = away_nb_point_pena

    @property
    def away_is_forfeit(self):
        """Gets the away_is_forfeit of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The away_is_forfeit of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: str
        """
        return self._away_is_forfeit

    @away_is_forfeit.setter
    def away_is_forfeit(self, away_is_forfeit):
        """Sets the away_is_forfeit of this MatchEntityJsonldMatchMembre.


        :param away_is_forfeit: The away_is_forfeit of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: str
        """

        self._away_is_forfeit = away_is_forfeit

    @property
    def ma_fmi_pres(self):
        """Gets the ma_fmi_pres of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The ma_fmi_pres of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: bool
        """
        return self._ma_fmi_pres

    @ma_fmi_pres.setter
    def ma_fmi_pres(self, ma_fmi_pres):
        """Sets the ma_fmi_pres of this MatchEntityJsonldMatchMembre.


        :param ma_fmi_pres: The ma_fmi_pres of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: bool
        """

        self._ma_fmi_pres = ma_fmi_pres

    @property
    def match_membres(self):
        """Gets the match_membres of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The match_membres of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: list[MatchMembreJsonldMatchMembre]
        """
        return self._match_membres

    @match_membres.setter
    def match_membres(self, match_membres):
        """Sets the match_membres of this MatchEntityJsonldMatchMembre.


        :param match_membres: The match_membres of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: list[MatchMembreJsonldMatchMembre]
        """

        self._match_membres = match_membres

    @property
    def status_label(self):
        """Gets the status_label of this MatchEntityJsonldMatchMembre.  # noqa: E501


        :return: The status_label of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :rtype: str
        """
        return self._status_label

    @status_label.setter
    def status_label(self, status_label):
        """Sets the status_label of this MatchEntityJsonldMatchMembre.


        :param status_label: The status_label of this MatchEntityJsonldMatchMembre.  # noqa: E501
        :type: str
        """

        self._status_label = status_label

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MatchEntityJsonldMatchMembre, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchEntityJsonldMatchMembre):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
