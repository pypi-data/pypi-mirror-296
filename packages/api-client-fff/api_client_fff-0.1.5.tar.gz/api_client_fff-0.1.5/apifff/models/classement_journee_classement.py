# coding: utf-8

"""

    # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ClassementJourneeClassement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'season': 'int',
        '_date': 'datetime',
        'cj_no': 'int',
        'type': 'str',
        'point_count': 'int',
        'penalty_point_count': 'int',
        'won_games_count': 'int',
        'draw_games_count': 'int',
        'lost_games_count': 'int',
        'forfeits_games_count': 'int',
        'goals_for_count': 'int',
        'goals_against_count': 'int',
        'rank': 'int',
        'poule': 'PouleClassement',
        'equipe': 'EquipeClassement',
        'external_updated_at': 'datetime',
        'goals_diff': 'int',
        'total_games_count': 'int'
    }

    attribute_map = {
        'season': 'season',
        '_date': 'date',
        'cj_no': 'cj_no',
        'type': 'type',
        'point_count': 'point_count',
        'penalty_point_count': 'penalty_point_count',
        'won_games_count': 'won_games_count',
        'draw_games_count': 'draw_games_count',
        'lost_games_count': 'lost_games_count',
        'forfeits_games_count': 'forfeits_games_count',
        'goals_for_count': 'goals_for_count',
        'goals_against_count': 'goals_against_count',
        'rank': 'rank',
        'poule': 'poule',
        'equipe': 'equipe',
        'external_updated_at': 'external_updated_at',
        'goals_diff': 'goals_diff',
        'total_games_count': 'total_games_count'
    }

    def __init__(self, season=None, _date=None, cj_no=None, type=None, point_count=None, penalty_point_count=None, won_games_count=None, draw_games_count=None, lost_games_count=None, forfeits_games_count=None, goals_for_count=None, goals_against_count=None, rank=None, poule=None, equipe=None, external_updated_at=None, goals_diff=None, total_games_count=None):  # noqa: E501
        """ClassementJourneeClassement - a model defined in Swagger"""  # noqa: E501
        self._season = None
        self.__date = None
        self._cj_no = None
        self._type = None
        self._point_count = None
        self._penalty_point_count = None
        self._won_games_count = None
        self._draw_games_count = None
        self._lost_games_count = None
        self._forfeits_games_count = None
        self._goals_for_count = None
        self._goals_against_count = None
        self._rank = None
        self._poule = None
        self._equipe = None
        self._external_updated_at = None
        self._goals_diff = None
        self._total_games_count = None
        self.discriminator = None
        if season is not None:
            self.season = season
        if _date is not None:
            self._date = _date
        if cj_no is not None:
            self.cj_no = cj_no
        if type is not None:
            self.type = type
        if point_count is not None:
            self.point_count = point_count
        if penalty_point_count is not None:
            self.penalty_point_count = penalty_point_count
        if won_games_count is not None:
            self.won_games_count = won_games_count
        if draw_games_count is not None:
            self.draw_games_count = draw_games_count
        if lost_games_count is not None:
            self.lost_games_count = lost_games_count
        if forfeits_games_count is not None:
            self.forfeits_games_count = forfeits_games_count
        if goals_for_count is not None:
            self.goals_for_count = goals_for_count
        if goals_against_count is not None:
            self.goals_against_count = goals_against_count
        if rank is not None:
            self.rank = rank
        if poule is not None:
            self.poule = poule
        if equipe is not None:
            self.equipe = equipe
        if external_updated_at is not None:
            self.external_updated_at = external_updated_at
        if goals_diff is not None:
            self.goals_diff = goals_diff
        if total_games_count is not None:
            self.total_games_count = total_games_count

    @property
    def season(self):
        """Gets the season of this ClassementJourneeClassement.  # noqa: E501


        :return: The season of this ClassementJourneeClassement.  # noqa: E501
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this ClassementJourneeClassement.


        :param season: The season of this ClassementJourneeClassement.  # noqa: E501
        :type: int
        """

        self._season = season

    @property
    def _date(self):
        """Gets the _date of this ClassementJourneeClassement.  # noqa: E501


        :return: The _date of this ClassementJourneeClassement.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this ClassementJourneeClassement.


        :param _date: The _date of this ClassementJourneeClassement.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def cj_no(self):
        """Gets the cj_no of this ClassementJourneeClassement.  # noqa: E501


        :return: The cj_no of this ClassementJourneeClassement.  # noqa: E501
        :rtype: int
        """
        return self._cj_no

    @cj_no.setter
    def cj_no(self, cj_no):
        """Sets the cj_no of this ClassementJourneeClassement.


        :param cj_no: The cj_no of this ClassementJourneeClassement.  # noqa: E501
        :type: int
        """

        self._cj_no = cj_no

    @property
    def type(self):
        """Gets the type of this ClassementJourneeClassement.  # noqa: E501


        :return: The type of this ClassementJourneeClassement.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ClassementJourneeClassement.


        :param type: The type of this ClassementJourneeClassement.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def point_count(self):
        """Gets the point_count of this ClassementJourneeClassement.  # noqa: E501


        :return: The point_count of this ClassementJourneeClassement.  # noqa: E501
        :rtype: int
        """
        return self._point_count

    @point_count.setter
    def point_count(self, point_count):
        """Sets the point_count of this ClassementJourneeClassement.


        :param point_count: The point_count of this ClassementJourneeClassement.  # noqa: E501
        :type: int
        """

        self._point_count = point_count

    @property
    def penalty_point_count(self):
        """Gets the penalty_point_count of this ClassementJourneeClassement.  # noqa: E501


        :return: The penalty_point_count of this ClassementJourneeClassement.  # noqa: E501
        :rtype: int
        """
        return self._penalty_point_count

    @penalty_point_count.setter
    def penalty_point_count(self, penalty_point_count):
        """Sets the penalty_point_count of this ClassementJourneeClassement.


        :param penalty_point_count: The penalty_point_count of this ClassementJourneeClassement.  # noqa: E501
        :type: int
        """

        self._penalty_point_count = penalty_point_count

    @property
    def won_games_count(self):
        """Gets the won_games_count of this ClassementJourneeClassement.  # noqa: E501


        :return: The won_games_count of this ClassementJourneeClassement.  # noqa: E501
        :rtype: int
        """
        return self._won_games_count

    @won_games_count.setter
    def won_games_count(self, won_games_count):
        """Sets the won_games_count of this ClassementJourneeClassement.


        :param won_games_count: The won_games_count of this ClassementJourneeClassement.  # noqa: E501
        :type: int
        """

        self._won_games_count = won_games_count

    @property
    def draw_games_count(self):
        """Gets the draw_games_count of this ClassementJourneeClassement.  # noqa: E501


        :return: The draw_games_count of this ClassementJourneeClassement.  # noqa: E501
        :rtype: int
        """
        return self._draw_games_count

    @draw_games_count.setter
    def draw_games_count(self, draw_games_count):
        """Sets the draw_games_count of this ClassementJourneeClassement.


        :param draw_games_count: The draw_games_count of this ClassementJourneeClassement.  # noqa: E501
        :type: int
        """

        self._draw_games_count = draw_games_count

    @property
    def lost_games_count(self):
        """Gets the lost_games_count of this ClassementJourneeClassement.  # noqa: E501


        :return: The lost_games_count of this ClassementJourneeClassement.  # noqa: E501
        :rtype: int
        """
        return self._lost_games_count

    @lost_games_count.setter
    def lost_games_count(self, lost_games_count):
        """Sets the lost_games_count of this ClassementJourneeClassement.


        :param lost_games_count: The lost_games_count of this ClassementJourneeClassement.  # noqa: E501
        :type: int
        """

        self._lost_games_count = lost_games_count

    @property
    def forfeits_games_count(self):
        """Gets the forfeits_games_count of this ClassementJourneeClassement.  # noqa: E501


        :return: The forfeits_games_count of this ClassementJourneeClassement.  # noqa: E501
        :rtype: int
        """
        return self._forfeits_games_count

    @forfeits_games_count.setter
    def forfeits_games_count(self, forfeits_games_count):
        """Sets the forfeits_games_count of this ClassementJourneeClassement.


        :param forfeits_games_count: The forfeits_games_count of this ClassementJourneeClassement.  # noqa: E501
        :type: int
        """

        self._forfeits_games_count = forfeits_games_count

    @property
    def goals_for_count(self):
        """Gets the goals_for_count of this ClassementJourneeClassement.  # noqa: E501


        :return: The goals_for_count of this ClassementJourneeClassement.  # noqa: E501
        :rtype: int
        """
        return self._goals_for_count

    @goals_for_count.setter
    def goals_for_count(self, goals_for_count):
        """Sets the goals_for_count of this ClassementJourneeClassement.


        :param goals_for_count: The goals_for_count of this ClassementJourneeClassement.  # noqa: E501
        :type: int
        """

        self._goals_for_count = goals_for_count

    @property
    def goals_against_count(self):
        """Gets the goals_against_count of this ClassementJourneeClassement.  # noqa: E501


        :return: The goals_against_count of this ClassementJourneeClassement.  # noqa: E501
        :rtype: int
        """
        return self._goals_against_count

    @goals_against_count.setter
    def goals_against_count(self, goals_against_count):
        """Sets the goals_against_count of this ClassementJourneeClassement.


        :param goals_against_count: The goals_against_count of this ClassementJourneeClassement.  # noqa: E501
        :type: int
        """

        self._goals_against_count = goals_against_count

    @property
    def rank(self):
        """Gets the rank of this ClassementJourneeClassement.  # noqa: E501


        :return: The rank of this ClassementJourneeClassement.  # noqa: E501
        :rtype: int
        """
        return self._rank

    @rank.setter
    def rank(self, rank):
        """Sets the rank of this ClassementJourneeClassement.


        :param rank: The rank of this ClassementJourneeClassement.  # noqa: E501
        :type: int
        """

        self._rank = rank

    @property
    def poule(self):
        """Gets the poule of this ClassementJourneeClassement.  # noqa: E501


        :return: The poule of this ClassementJourneeClassement.  # noqa: E501
        :rtype: PouleClassement
        """
        return self._poule

    @poule.setter
    def poule(self, poule):
        """Sets the poule of this ClassementJourneeClassement.


        :param poule: The poule of this ClassementJourneeClassement.  # noqa: E501
        :type: PouleClassement
        """

        self._poule = poule

    @property
    def equipe(self):
        """Gets the equipe of this ClassementJourneeClassement.  # noqa: E501


        :return: The equipe of this ClassementJourneeClassement.  # noqa: E501
        :rtype: EquipeClassement
        """
        return self._equipe

    @equipe.setter
    def equipe(self, equipe):
        """Sets the equipe of this ClassementJourneeClassement.


        :param equipe: The equipe of this ClassementJourneeClassement.  # noqa: E501
        :type: EquipeClassement
        """

        self._equipe = equipe

    @property
    def external_updated_at(self):
        """Gets the external_updated_at of this ClassementJourneeClassement.  # noqa: E501


        :return: The external_updated_at of this ClassementJourneeClassement.  # noqa: E501
        :rtype: datetime
        """
        return self._external_updated_at

    @external_updated_at.setter
    def external_updated_at(self, external_updated_at):
        """Sets the external_updated_at of this ClassementJourneeClassement.


        :param external_updated_at: The external_updated_at of this ClassementJourneeClassement.  # noqa: E501
        :type: datetime
        """

        self._external_updated_at = external_updated_at

    @property
    def goals_diff(self):
        """Gets the goals_diff of this ClassementJourneeClassement.  # noqa: E501


        :return: The goals_diff of this ClassementJourneeClassement.  # noqa: E501
        :rtype: int
        """
        return self._goals_diff

    @goals_diff.setter
    def goals_diff(self, goals_diff):
        """Sets the goals_diff of this ClassementJourneeClassement.


        :param goals_diff: The goals_diff of this ClassementJourneeClassement.  # noqa: E501
        :type: int
        """

        self._goals_diff = goals_diff

    @property
    def total_games_count(self):
        """Gets the total_games_count of this ClassementJourneeClassement.  # noqa: E501


        :return: The total_games_count of this ClassementJourneeClassement.  # noqa: E501
        :rtype: int
        """
        return self._total_games_count

    @total_games_count.setter
    def total_games_count(self, total_games_count):
        """Sets the total_games_count of this ClassementJourneeClassement.


        :param total_games_count: The total_games_count of this ClassementJourneeClassement.  # noqa: E501
        :type: int
        """

        self._total_games_count = total_games_count

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ClassementJourneeClassement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ClassementJourneeClassement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
