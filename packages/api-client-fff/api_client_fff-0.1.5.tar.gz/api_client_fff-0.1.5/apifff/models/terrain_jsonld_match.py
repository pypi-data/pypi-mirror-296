# coding: utf-8

"""

    # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TerrainJsonldMatch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'OneOfTerrainJsonldMatchContext',
        'id': 'str',
        'type': 'str',
        'te_no': 'int',
        'name': 'str',
        'zip_code': 'str',
        'city': 'str',
        'libelle_surface': 'str',
        'external_updated_at': 'datetime',
        'address': 'str'
    }

    attribute_map = {
        'context': '@context',
        'id': '@id',
        'type': '@type',
        'te_no': 'te_no',
        'name': 'name',
        'zip_code': 'zip_code',
        'city': 'city',
        'libelle_surface': 'libelle_surface',
        'external_updated_at': 'external_updated_at',
        'address': 'address'
    }

    def __init__(self, context=None, id=None, type=None, te_no=None, name=None, zip_code=None, city=None, libelle_surface=None, external_updated_at=None, address=None):  # noqa: E501
        """TerrainJsonldMatch - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._id = None
        self._type = None
        self._te_no = None
        self._name = None
        self._zip_code = None
        self._city = None
        self._libelle_surface = None
        self._external_updated_at = None
        self._address = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if te_no is not None:
            self.te_no = te_no
        if name is not None:
            self.name = name
        if zip_code is not None:
            self.zip_code = zip_code
        if city is not None:
            self.city = city
        if libelle_surface is not None:
            self.libelle_surface = libelle_surface
        if external_updated_at is not None:
            self.external_updated_at = external_updated_at
        if address is not None:
            self.address = address

    @property
    def context(self):
        """Gets the context of this TerrainJsonldMatch.  # noqa: E501


        :return: The context of this TerrainJsonldMatch.  # noqa: E501
        :rtype: OneOfTerrainJsonldMatchContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this TerrainJsonldMatch.


        :param context: The context of this TerrainJsonldMatch.  # noqa: E501
        :type: OneOfTerrainJsonldMatchContext
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this TerrainJsonldMatch.  # noqa: E501


        :return: The id of this TerrainJsonldMatch.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TerrainJsonldMatch.


        :param id: The id of this TerrainJsonldMatch.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this TerrainJsonldMatch.  # noqa: E501


        :return: The type of this TerrainJsonldMatch.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TerrainJsonldMatch.


        :param type: The type of this TerrainJsonldMatch.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def te_no(self):
        """Gets the te_no of this TerrainJsonldMatch.  # noqa: E501


        :return: The te_no of this TerrainJsonldMatch.  # noqa: E501
        :rtype: int
        """
        return self._te_no

    @te_no.setter
    def te_no(self, te_no):
        """Sets the te_no of this TerrainJsonldMatch.


        :param te_no: The te_no of this TerrainJsonldMatch.  # noqa: E501
        :type: int
        """

        self._te_no = te_no

    @property
    def name(self):
        """Gets the name of this TerrainJsonldMatch.  # noqa: E501


        :return: The name of this TerrainJsonldMatch.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TerrainJsonldMatch.


        :param name: The name of this TerrainJsonldMatch.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def zip_code(self):
        """Gets the zip_code of this TerrainJsonldMatch.  # noqa: E501


        :return: The zip_code of this TerrainJsonldMatch.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this TerrainJsonldMatch.


        :param zip_code: The zip_code of this TerrainJsonldMatch.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    @property
    def city(self):
        """Gets the city of this TerrainJsonldMatch.  # noqa: E501


        :return: The city of this TerrainJsonldMatch.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this TerrainJsonldMatch.


        :param city: The city of this TerrainJsonldMatch.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def libelle_surface(self):
        """Gets the libelle_surface of this TerrainJsonldMatch.  # noqa: E501


        :return: The libelle_surface of this TerrainJsonldMatch.  # noqa: E501
        :rtype: str
        """
        return self._libelle_surface

    @libelle_surface.setter
    def libelle_surface(self, libelle_surface):
        """Sets the libelle_surface of this TerrainJsonldMatch.


        :param libelle_surface: The libelle_surface of this TerrainJsonldMatch.  # noqa: E501
        :type: str
        """

        self._libelle_surface = libelle_surface

    @property
    def external_updated_at(self):
        """Gets the external_updated_at of this TerrainJsonldMatch.  # noqa: E501


        :return: The external_updated_at of this TerrainJsonldMatch.  # noqa: E501
        :rtype: datetime
        """
        return self._external_updated_at

    @external_updated_at.setter
    def external_updated_at(self, external_updated_at):
        """Sets the external_updated_at of this TerrainJsonldMatch.


        :param external_updated_at: The external_updated_at of this TerrainJsonldMatch.  # noqa: E501
        :type: datetime
        """

        self._external_updated_at = external_updated_at

    @property
    def address(self):
        """Gets the address of this TerrainJsonldMatch.  # noqa: E501


        :return: The address of this TerrainJsonldMatch.  # noqa: E501
        :rtype: str
        """
        return self._address

    @address.setter
    def address(self, address):
        """Sets the address of this TerrainJsonldMatch.


        :param address: The address of this TerrainJsonldMatch.  # noqa: E501
        :type: str
        """

        self._address = address

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TerrainJsonldMatch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TerrainJsonldMatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
