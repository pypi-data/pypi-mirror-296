# coding: utf-8

"""

    # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class OfficielCategorieJsonldOfficielCategorie(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'context': 'OneOfOfficielCategorieJsonldOfficielCategorieContext',
        'sa_no': 'int',
        'ca_cod': 'str',
        'ca_lib': 'str',
        'ca_niv': 'str',
        'ca_tri': 'int',
        'id': 'int'
    }

    attribute_map = {
        'id': '@id',
        'type': '@type',
        'context': '@context',
        'sa_no': 'sa_no',
        'ca_cod': 'ca_cod',
        'ca_lib': 'ca_lib',
        'ca_niv': 'ca_niv',
        'ca_tri': 'ca_tri',
        'id': 'id'
    }

    def __init__(self, id=None, type=None, context=None, sa_no=None, ca_cod=None, ca_lib=None, ca_niv=None, ca_tri=None):  # noqa: E501
        """OfficielCategorieJsonldOfficielCategorie - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._context = None
        self._sa_no = None
        self._ca_cod = None
        self._ca_lib = None
        self._ca_niv = None
        self._ca_tri = None
        self._id = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if context is not None:
            self.context = context
        if sa_no is not None:
            self.sa_no = sa_no
        if ca_cod is not None:
            self.ca_cod = ca_cod
        if ca_lib is not None:
            self.ca_lib = ca_lib
        if ca_niv is not None:
            self.ca_niv = ca_niv
        if ca_tri is not None:
            self.ca_tri = ca_tri
        if id is not None:
            self.id = id

    @property
    def id(self):
        """Gets the id of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501


        :return: The id of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OfficielCategorieJsonldOfficielCategorie.


        :param id: The id of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501


        :return: The type of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this OfficielCategorieJsonldOfficielCategorie.


        :param type: The type of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def context(self):
        """Gets the context of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501


        :return: The context of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501
        :rtype: OneOfOfficielCategorieJsonldOfficielCategorieContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this OfficielCategorieJsonldOfficielCategorie.


        :param context: The context of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501
        :type: OneOfOfficielCategorieJsonldOfficielCategorieContext
        """

        self._context = context

    @property
    def sa_no(self):
        """Gets the sa_no of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501


        :return: The sa_no of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501
        :rtype: int
        """
        return self._sa_no

    @sa_no.setter
    def sa_no(self, sa_no):
        """Sets the sa_no of this OfficielCategorieJsonldOfficielCategorie.


        :param sa_no: The sa_no of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501
        :type: int
        """

        self._sa_no = sa_no

    @property
    def ca_cod(self):
        """Gets the ca_cod of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501


        :return: The ca_cod of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501
        :rtype: str
        """
        return self._ca_cod

    @ca_cod.setter
    def ca_cod(self, ca_cod):
        """Sets the ca_cod of this OfficielCategorieJsonldOfficielCategorie.


        :param ca_cod: The ca_cod of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501
        :type: str
        """

        self._ca_cod = ca_cod

    @property
    def ca_lib(self):
        """Gets the ca_lib of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501


        :return: The ca_lib of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501
        :rtype: str
        """
        return self._ca_lib

    @ca_lib.setter
    def ca_lib(self, ca_lib):
        """Sets the ca_lib of this OfficielCategorieJsonldOfficielCategorie.


        :param ca_lib: The ca_lib of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501
        :type: str
        """

        self._ca_lib = ca_lib

    @property
    def ca_niv(self):
        """Gets the ca_niv of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501


        :return: The ca_niv of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501
        :rtype: str
        """
        return self._ca_niv

    @ca_niv.setter
    def ca_niv(self, ca_niv):
        """Sets the ca_niv of this OfficielCategorieJsonldOfficielCategorie.


        :param ca_niv: The ca_niv of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501
        :type: str
        """

        self._ca_niv = ca_niv

    @property
    def ca_tri(self):
        """Gets the ca_tri of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501


        :return: The ca_tri of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501
        :rtype: int
        """
        return self._ca_tri

    @ca_tri.setter
    def ca_tri(self, ca_tri):
        """Sets the ca_tri of this OfficielCategorieJsonldOfficielCategorie.


        :param ca_tri: The ca_tri of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501
        :type: int
        """

        self._ca_tri = ca_tri

    @property
    def id(self):
        """Gets the id of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501


        :return: The id of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this OfficielCategorieJsonldOfficielCategorie.


        :param id: The id of this OfficielCategorieJsonldOfficielCategorie.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(OfficielCategorieJsonldOfficielCategorie, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, OfficielCategorieJsonldOfficielCategorie):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
