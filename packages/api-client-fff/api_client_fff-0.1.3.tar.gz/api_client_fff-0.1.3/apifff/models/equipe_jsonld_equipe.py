# coding: utf-8

"""

    # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class EquipeJsonldEquipe(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'context': 'OneOfEquipeJsonldEquipeContext',
        'club': 'AnyOfEquipeJsonldEquipeClub',
        'season': 'int',
        'category_code': 'str',
        'number': 'int',
        'code': 'int',
        'short_name': 'str',
        'short_name_ligue': 'str',
        'short_name_federation': 'str',
        'type': 'str',
        'engagements': 'list[EngagementJsonldEquipe]',
        'category_label': 'str',
        'category_gender': 'str',
        'diffusable': 'bool'
    }

    attribute_map = {
        'id': '@id',
        'type': '@type',
        'context': '@context',
        'club': 'club',
        'season': 'season',
        'category_code': 'category_code',
        'number': 'number',
        'code': 'code',
        'short_name': 'short_name',
        'short_name_ligue': 'short_name_ligue',
        'short_name_federation': 'short_name_federation',
        'type': 'type',
        'engagements': 'engagements',
        'category_label': 'category_label',
        'category_gender': 'category_gender',
        'diffusable': 'diffusable'
    }

    def __init__(self, id=None, type=None, context=None, club=None, season=None, category_code=None, number=None, code=None, short_name=None, short_name_ligue=None, short_name_federation=None, engagements=None, category_label=None, category_gender=None, diffusable=None):  # noqa: E501
        """EquipeJsonldEquipe - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._context = None
        self._club = None
        self._season = None
        self._category_code = None
        self._number = None
        self._code = None
        self._short_name = None
        self._short_name_ligue = None
        self._short_name_federation = None
        self._type = None
        self._engagements = None
        self._category_label = None
        self._category_gender = None
        self._diffusable = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if context is not None:
            self.context = context
        if club is not None:
            self.club = club
        if season is not None:
            self.season = season
        if category_code is not None:
            self.category_code = category_code
        if number is not None:
            self.number = number
        if code is not None:
            self.code = code
        if short_name is not None:
            self.short_name = short_name
        if short_name_ligue is not None:
            self.short_name_ligue = short_name_ligue
        if short_name_federation is not None:
            self.short_name_federation = short_name_federation
        if type is not None:
            self.type = type
        if engagements is not None:
            self.engagements = engagements
        if category_label is not None:
            self.category_label = category_label
        if category_gender is not None:
            self.category_gender = category_gender
        if diffusable is not None:
            self.diffusable = diffusable

    @property
    def id(self):
        """Gets the id of this EquipeJsonldEquipe.  # noqa: E501


        :return: The id of this EquipeJsonldEquipe.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this EquipeJsonldEquipe.


        :param id: The id of this EquipeJsonldEquipe.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this EquipeJsonldEquipe.  # noqa: E501


        :return: The type of this EquipeJsonldEquipe.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EquipeJsonldEquipe.


        :param type: The type of this EquipeJsonldEquipe.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def context(self):
        """Gets the context of this EquipeJsonldEquipe.  # noqa: E501


        :return: The context of this EquipeJsonldEquipe.  # noqa: E501
        :rtype: OneOfEquipeJsonldEquipeContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this EquipeJsonldEquipe.


        :param context: The context of this EquipeJsonldEquipe.  # noqa: E501
        :type: OneOfEquipeJsonldEquipeContext
        """

        self._context = context

    @property
    def club(self):
        """Gets the club of this EquipeJsonldEquipe.  # noqa: E501


        :return: The club of this EquipeJsonldEquipe.  # noqa: E501
        :rtype: AnyOfEquipeJsonldEquipeClub
        """
        return self._club

    @club.setter
    def club(self, club):
        """Sets the club of this EquipeJsonldEquipe.


        :param club: The club of this EquipeJsonldEquipe.  # noqa: E501
        :type: AnyOfEquipeJsonldEquipeClub
        """

        self._club = club

    @property
    def season(self):
        """Gets the season of this EquipeJsonldEquipe.  # noqa: E501


        :return: The season of this EquipeJsonldEquipe.  # noqa: E501
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this EquipeJsonldEquipe.


        :param season: The season of this EquipeJsonldEquipe.  # noqa: E501
        :type: int
        """

        self._season = season

    @property
    def category_code(self):
        """Gets the category_code of this EquipeJsonldEquipe.  # noqa: E501


        :return: The category_code of this EquipeJsonldEquipe.  # noqa: E501
        :rtype: str
        """
        return self._category_code

    @category_code.setter
    def category_code(self, category_code):
        """Sets the category_code of this EquipeJsonldEquipe.


        :param category_code: The category_code of this EquipeJsonldEquipe.  # noqa: E501
        :type: str
        """

        self._category_code = category_code

    @property
    def number(self):
        """Gets the number of this EquipeJsonldEquipe.  # noqa: E501


        :return: The number of this EquipeJsonldEquipe.  # noqa: E501
        :rtype: int
        """
        return self._number

    @number.setter
    def number(self, number):
        """Sets the number of this EquipeJsonldEquipe.


        :param number: The number of this EquipeJsonldEquipe.  # noqa: E501
        :type: int
        """

        self._number = number

    @property
    def code(self):
        """Gets the code of this EquipeJsonldEquipe.  # noqa: E501


        :return: The code of this EquipeJsonldEquipe.  # noqa: E501
        :rtype: int
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this EquipeJsonldEquipe.


        :param code: The code of this EquipeJsonldEquipe.  # noqa: E501
        :type: int
        """

        self._code = code

    @property
    def short_name(self):
        """Gets the short_name of this EquipeJsonldEquipe.  # noqa: E501


        :return: The short_name of this EquipeJsonldEquipe.  # noqa: E501
        :rtype: str
        """
        return self._short_name

    @short_name.setter
    def short_name(self, short_name):
        """Sets the short_name of this EquipeJsonldEquipe.


        :param short_name: The short_name of this EquipeJsonldEquipe.  # noqa: E501
        :type: str
        """

        self._short_name = short_name

    @property
    def short_name_ligue(self):
        """Gets the short_name_ligue of this EquipeJsonldEquipe.  # noqa: E501


        :return: The short_name_ligue of this EquipeJsonldEquipe.  # noqa: E501
        :rtype: str
        """
        return self._short_name_ligue

    @short_name_ligue.setter
    def short_name_ligue(self, short_name_ligue):
        """Sets the short_name_ligue of this EquipeJsonldEquipe.


        :param short_name_ligue: The short_name_ligue of this EquipeJsonldEquipe.  # noqa: E501
        :type: str
        """

        self._short_name_ligue = short_name_ligue

    @property
    def short_name_federation(self):
        """Gets the short_name_federation of this EquipeJsonldEquipe.  # noqa: E501


        :return: The short_name_federation of this EquipeJsonldEquipe.  # noqa: E501
        :rtype: str
        """
        return self._short_name_federation

    @short_name_federation.setter
    def short_name_federation(self, short_name_federation):
        """Sets the short_name_federation of this EquipeJsonldEquipe.


        :param short_name_federation: The short_name_federation of this EquipeJsonldEquipe.  # noqa: E501
        :type: str
        """

        self._short_name_federation = short_name_federation

    @property
    def type(self):
        """Gets the type of this EquipeJsonldEquipe.  # noqa: E501


        :return: The type of this EquipeJsonldEquipe.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this EquipeJsonldEquipe.


        :param type: The type of this EquipeJsonldEquipe.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def engagements(self):
        """Gets the engagements of this EquipeJsonldEquipe.  # noqa: E501


        :return: The engagements of this EquipeJsonldEquipe.  # noqa: E501
        :rtype: list[EngagementJsonldEquipe]
        """
        return self._engagements

    @engagements.setter
    def engagements(self, engagements):
        """Sets the engagements of this EquipeJsonldEquipe.


        :param engagements: The engagements of this EquipeJsonldEquipe.  # noqa: E501
        :type: list[EngagementJsonldEquipe]
        """

        self._engagements = engagements

    @property
    def category_label(self):
        """Gets the category_label of this EquipeJsonldEquipe.  # noqa: E501


        :return: The category_label of this EquipeJsonldEquipe.  # noqa: E501
        :rtype: str
        """
        return self._category_label

    @category_label.setter
    def category_label(self, category_label):
        """Sets the category_label of this EquipeJsonldEquipe.


        :param category_label: The category_label of this EquipeJsonldEquipe.  # noqa: E501
        :type: str
        """

        self._category_label = category_label

    @property
    def category_gender(self):
        """Gets the category_gender of this EquipeJsonldEquipe.  # noqa: E501


        :return: The category_gender of this EquipeJsonldEquipe.  # noqa: E501
        :rtype: str
        """
        return self._category_gender

    @category_gender.setter
    def category_gender(self, category_gender):
        """Sets the category_gender of this EquipeJsonldEquipe.


        :param category_gender: The category_gender of this EquipeJsonldEquipe.  # noqa: E501
        :type: str
        """

        self._category_gender = category_gender

    @property
    def diffusable(self):
        """Gets the diffusable of this EquipeJsonldEquipe.  # noqa: E501


        :return: The diffusable of this EquipeJsonldEquipe.  # noqa: E501
        :rtype: bool
        """
        return self._diffusable

    @diffusable.setter
    def diffusable(self, diffusable):
        """Sets the diffusable of this EquipeJsonldEquipe.


        :param diffusable: The diffusable of this EquipeJsonldEquipe.  # noqa: E501
        :type: bool
        """

        self._diffusable = diffusable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(EquipeJsonldEquipe, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, EquipeJsonldEquipe):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
