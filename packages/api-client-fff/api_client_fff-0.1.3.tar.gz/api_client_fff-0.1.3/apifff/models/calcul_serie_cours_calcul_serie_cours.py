# coding: utf-8

"""

    # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CalculSerieCoursCalculSerieCours(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'goal_scored': 'int',
        'goal_conceded': 'int',
        'day1': 'str',
        'day2': 'str',
        'day3': 'str',
        'day4': 'str',
        'day5': 'str',
        'match1': 'AnyOfCalculSerieCoursCalculSerieCoursMatch1',
        'match2': 'AnyOfCalculSerieCoursCalculSerieCoursMatch2',
        'match3': 'AnyOfCalculSerieCoursCalculSerieCoursMatch3',
        'match4': 'AnyOfCalculSerieCoursCalculSerieCoursMatch4',
        'match5': 'AnyOfCalculSerieCoursCalculSerieCoursMatch5',
        'nb_match': 'int',
        'nb_match_win': 'int',
        'nb_match_lost': 'int',
        'nb_match_equal': 'int',
        'nb_win_home': 'int',
        'nb_lost_home': 'int',
        'nb_equal_home': 'int',
        'nb_win_away': 'int',
        'nb_lost_away': 'int',
        'nb_equal_away': 'int'
    }

    attribute_map = {
        'goal_scored': 'goal_scored',
        'goal_conceded': 'goal_conceded',
        'day1': 'day1',
        'day2': 'day2',
        'day3': 'day3',
        'day4': 'day4',
        'day5': 'day5',
        'match1': 'match1',
        'match2': 'match2',
        'match3': 'match3',
        'match4': 'match4',
        'match5': 'match5',
        'nb_match': 'nb_match',
        'nb_match_win': 'nb_match_win',
        'nb_match_lost': 'nb_match_lost',
        'nb_match_equal': 'nb_match_equal',
        'nb_win_home': 'nb_win_home',
        'nb_lost_home': 'nb_lost_home',
        'nb_equal_home': 'nb_equal_home',
        'nb_win_away': 'nb_win_away',
        'nb_lost_away': 'nb_lost_away',
        'nb_equal_away': 'nb_equal_away'
    }

    def __init__(self, goal_scored=None, goal_conceded=None, day1=None, day2=None, day3=None, day4=None, day5=None, match1=None, match2=None, match3=None, match4=None, match5=None, nb_match=None, nb_match_win=None, nb_match_lost=None, nb_match_equal=None, nb_win_home=None, nb_lost_home=None, nb_equal_home=None, nb_win_away=None, nb_lost_away=None, nb_equal_away=None):  # noqa: E501
        """CalculSerieCoursCalculSerieCours - a model defined in Swagger"""  # noqa: E501
        self._goal_scored = None
        self._goal_conceded = None
        self._day1 = None
        self._day2 = None
        self._day3 = None
        self._day4 = None
        self._day5 = None
        self._match1 = None
        self._match2 = None
        self._match3 = None
        self._match4 = None
        self._match5 = None
        self._nb_match = None
        self._nb_match_win = None
        self._nb_match_lost = None
        self._nb_match_equal = None
        self._nb_win_home = None
        self._nb_lost_home = None
        self._nb_equal_home = None
        self._nb_win_away = None
        self._nb_lost_away = None
        self._nb_equal_away = None
        self.discriminator = None
        if goal_scored is not None:
            self.goal_scored = goal_scored
        if goal_conceded is not None:
            self.goal_conceded = goal_conceded
        if day1 is not None:
            self.day1 = day1
        if day2 is not None:
            self.day2 = day2
        if day3 is not None:
            self.day3 = day3
        if day4 is not None:
            self.day4 = day4
        if day5 is not None:
            self.day5 = day5
        if match1 is not None:
            self.match1 = match1
        if match2 is not None:
            self.match2 = match2
        if match3 is not None:
            self.match3 = match3
        if match4 is not None:
            self.match4 = match4
        if match5 is not None:
            self.match5 = match5
        if nb_match is not None:
            self.nb_match = nb_match
        if nb_match_win is not None:
            self.nb_match_win = nb_match_win
        if nb_match_lost is not None:
            self.nb_match_lost = nb_match_lost
        if nb_match_equal is not None:
            self.nb_match_equal = nb_match_equal
        if nb_win_home is not None:
            self.nb_win_home = nb_win_home
        if nb_lost_home is not None:
            self.nb_lost_home = nb_lost_home
        if nb_equal_home is not None:
            self.nb_equal_home = nb_equal_home
        if nb_win_away is not None:
            self.nb_win_away = nb_win_away
        if nb_lost_away is not None:
            self.nb_lost_away = nb_lost_away
        if nb_equal_away is not None:
            self.nb_equal_away = nb_equal_away

    @property
    def goal_scored(self):
        """Gets the goal_scored of this CalculSerieCoursCalculSerieCours.  # noqa: E501


        :return: The goal_scored of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :rtype: int
        """
        return self._goal_scored

    @goal_scored.setter
    def goal_scored(self, goal_scored):
        """Sets the goal_scored of this CalculSerieCoursCalculSerieCours.


        :param goal_scored: The goal_scored of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :type: int
        """

        self._goal_scored = goal_scored

    @property
    def goal_conceded(self):
        """Gets the goal_conceded of this CalculSerieCoursCalculSerieCours.  # noqa: E501


        :return: The goal_conceded of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :rtype: int
        """
        return self._goal_conceded

    @goal_conceded.setter
    def goal_conceded(self, goal_conceded):
        """Sets the goal_conceded of this CalculSerieCoursCalculSerieCours.


        :param goal_conceded: The goal_conceded of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :type: int
        """

        self._goal_conceded = goal_conceded

    @property
    def day1(self):
        """Gets the day1 of this CalculSerieCoursCalculSerieCours.  # noqa: E501


        :return: The day1 of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :rtype: str
        """
        return self._day1

    @day1.setter
    def day1(self, day1):
        """Sets the day1 of this CalculSerieCoursCalculSerieCours.


        :param day1: The day1 of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :type: str
        """

        self._day1 = day1

    @property
    def day2(self):
        """Gets the day2 of this CalculSerieCoursCalculSerieCours.  # noqa: E501


        :return: The day2 of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :rtype: str
        """
        return self._day2

    @day2.setter
    def day2(self, day2):
        """Sets the day2 of this CalculSerieCoursCalculSerieCours.


        :param day2: The day2 of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :type: str
        """

        self._day2 = day2

    @property
    def day3(self):
        """Gets the day3 of this CalculSerieCoursCalculSerieCours.  # noqa: E501


        :return: The day3 of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :rtype: str
        """
        return self._day3

    @day3.setter
    def day3(self, day3):
        """Sets the day3 of this CalculSerieCoursCalculSerieCours.


        :param day3: The day3 of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :type: str
        """

        self._day3 = day3

    @property
    def day4(self):
        """Gets the day4 of this CalculSerieCoursCalculSerieCours.  # noqa: E501


        :return: The day4 of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :rtype: str
        """
        return self._day4

    @day4.setter
    def day4(self, day4):
        """Sets the day4 of this CalculSerieCoursCalculSerieCours.


        :param day4: The day4 of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :type: str
        """

        self._day4 = day4

    @property
    def day5(self):
        """Gets the day5 of this CalculSerieCoursCalculSerieCours.  # noqa: E501


        :return: The day5 of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :rtype: str
        """
        return self._day5

    @day5.setter
    def day5(self, day5):
        """Sets the day5 of this CalculSerieCoursCalculSerieCours.


        :param day5: The day5 of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :type: str
        """

        self._day5 = day5

    @property
    def match1(self):
        """Gets the match1 of this CalculSerieCoursCalculSerieCours.  # noqa: E501


        :return: The match1 of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :rtype: AnyOfCalculSerieCoursCalculSerieCoursMatch1
        """
        return self._match1

    @match1.setter
    def match1(self, match1):
        """Sets the match1 of this CalculSerieCoursCalculSerieCours.


        :param match1: The match1 of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :type: AnyOfCalculSerieCoursCalculSerieCoursMatch1
        """

        self._match1 = match1

    @property
    def match2(self):
        """Gets the match2 of this CalculSerieCoursCalculSerieCours.  # noqa: E501


        :return: The match2 of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :rtype: AnyOfCalculSerieCoursCalculSerieCoursMatch2
        """
        return self._match2

    @match2.setter
    def match2(self, match2):
        """Sets the match2 of this CalculSerieCoursCalculSerieCours.


        :param match2: The match2 of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :type: AnyOfCalculSerieCoursCalculSerieCoursMatch2
        """

        self._match2 = match2

    @property
    def match3(self):
        """Gets the match3 of this CalculSerieCoursCalculSerieCours.  # noqa: E501


        :return: The match3 of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :rtype: AnyOfCalculSerieCoursCalculSerieCoursMatch3
        """
        return self._match3

    @match3.setter
    def match3(self, match3):
        """Sets the match3 of this CalculSerieCoursCalculSerieCours.


        :param match3: The match3 of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :type: AnyOfCalculSerieCoursCalculSerieCoursMatch3
        """

        self._match3 = match3

    @property
    def match4(self):
        """Gets the match4 of this CalculSerieCoursCalculSerieCours.  # noqa: E501


        :return: The match4 of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :rtype: AnyOfCalculSerieCoursCalculSerieCoursMatch4
        """
        return self._match4

    @match4.setter
    def match4(self, match4):
        """Sets the match4 of this CalculSerieCoursCalculSerieCours.


        :param match4: The match4 of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :type: AnyOfCalculSerieCoursCalculSerieCoursMatch4
        """

        self._match4 = match4

    @property
    def match5(self):
        """Gets the match5 of this CalculSerieCoursCalculSerieCours.  # noqa: E501


        :return: The match5 of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :rtype: AnyOfCalculSerieCoursCalculSerieCoursMatch5
        """
        return self._match5

    @match5.setter
    def match5(self, match5):
        """Sets the match5 of this CalculSerieCoursCalculSerieCours.


        :param match5: The match5 of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :type: AnyOfCalculSerieCoursCalculSerieCoursMatch5
        """

        self._match5 = match5

    @property
    def nb_match(self):
        """Gets the nb_match of this CalculSerieCoursCalculSerieCours.  # noqa: E501


        :return: The nb_match of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :rtype: int
        """
        return self._nb_match

    @nb_match.setter
    def nb_match(self, nb_match):
        """Sets the nb_match of this CalculSerieCoursCalculSerieCours.


        :param nb_match: The nb_match of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :type: int
        """

        self._nb_match = nb_match

    @property
    def nb_match_win(self):
        """Gets the nb_match_win of this CalculSerieCoursCalculSerieCours.  # noqa: E501


        :return: The nb_match_win of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :rtype: int
        """
        return self._nb_match_win

    @nb_match_win.setter
    def nb_match_win(self, nb_match_win):
        """Sets the nb_match_win of this CalculSerieCoursCalculSerieCours.


        :param nb_match_win: The nb_match_win of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :type: int
        """

        self._nb_match_win = nb_match_win

    @property
    def nb_match_lost(self):
        """Gets the nb_match_lost of this CalculSerieCoursCalculSerieCours.  # noqa: E501


        :return: The nb_match_lost of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :rtype: int
        """
        return self._nb_match_lost

    @nb_match_lost.setter
    def nb_match_lost(self, nb_match_lost):
        """Sets the nb_match_lost of this CalculSerieCoursCalculSerieCours.


        :param nb_match_lost: The nb_match_lost of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :type: int
        """

        self._nb_match_lost = nb_match_lost

    @property
    def nb_match_equal(self):
        """Gets the nb_match_equal of this CalculSerieCoursCalculSerieCours.  # noqa: E501


        :return: The nb_match_equal of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :rtype: int
        """
        return self._nb_match_equal

    @nb_match_equal.setter
    def nb_match_equal(self, nb_match_equal):
        """Sets the nb_match_equal of this CalculSerieCoursCalculSerieCours.


        :param nb_match_equal: The nb_match_equal of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :type: int
        """

        self._nb_match_equal = nb_match_equal

    @property
    def nb_win_home(self):
        """Gets the nb_win_home of this CalculSerieCoursCalculSerieCours.  # noqa: E501


        :return: The nb_win_home of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :rtype: int
        """
        return self._nb_win_home

    @nb_win_home.setter
    def nb_win_home(self, nb_win_home):
        """Sets the nb_win_home of this CalculSerieCoursCalculSerieCours.


        :param nb_win_home: The nb_win_home of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :type: int
        """

        self._nb_win_home = nb_win_home

    @property
    def nb_lost_home(self):
        """Gets the nb_lost_home of this CalculSerieCoursCalculSerieCours.  # noqa: E501


        :return: The nb_lost_home of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :rtype: int
        """
        return self._nb_lost_home

    @nb_lost_home.setter
    def nb_lost_home(self, nb_lost_home):
        """Sets the nb_lost_home of this CalculSerieCoursCalculSerieCours.


        :param nb_lost_home: The nb_lost_home of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :type: int
        """

        self._nb_lost_home = nb_lost_home

    @property
    def nb_equal_home(self):
        """Gets the nb_equal_home of this CalculSerieCoursCalculSerieCours.  # noqa: E501


        :return: The nb_equal_home of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :rtype: int
        """
        return self._nb_equal_home

    @nb_equal_home.setter
    def nb_equal_home(self, nb_equal_home):
        """Sets the nb_equal_home of this CalculSerieCoursCalculSerieCours.


        :param nb_equal_home: The nb_equal_home of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :type: int
        """

        self._nb_equal_home = nb_equal_home

    @property
    def nb_win_away(self):
        """Gets the nb_win_away of this CalculSerieCoursCalculSerieCours.  # noqa: E501


        :return: The nb_win_away of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :rtype: int
        """
        return self._nb_win_away

    @nb_win_away.setter
    def nb_win_away(self, nb_win_away):
        """Sets the nb_win_away of this CalculSerieCoursCalculSerieCours.


        :param nb_win_away: The nb_win_away of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :type: int
        """

        self._nb_win_away = nb_win_away

    @property
    def nb_lost_away(self):
        """Gets the nb_lost_away of this CalculSerieCoursCalculSerieCours.  # noqa: E501


        :return: The nb_lost_away of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :rtype: int
        """
        return self._nb_lost_away

    @nb_lost_away.setter
    def nb_lost_away(self, nb_lost_away):
        """Sets the nb_lost_away of this CalculSerieCoursCalculSerieCours.


        :param nb_lost_away: The nb_lost_away of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :type: int
        """

        self._nb_lost_away = nb_lost_away

    @property
    def nb_equal_away(self):
        """Gets the nb_equal_away of this CalculSerieCoursCalculSerieCours.  # noqa: E501


        :return: The nb_equal_away of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :rtype: int
        """
        return self._nb_equal_away

    @nb_equal_away.setter
    def nb_equal_away(self, nb_equal_away):
        """Sets the nb_equal_away of this CalculSerieCoursCalculSerieCours.


        :param nb_equal_away: The nb_equal_away of this CalculSerieCoursCalculSerieCours.  # noqa: E501
        :type: int
        """

        self._nb_equal_away = nb_equal_away

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CalculSerieCoursCalculSerieCours, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalculSerieCoursCalculSerieCours):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
