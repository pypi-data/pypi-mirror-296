# coding: utf-8

"""

    # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TerrainJsonldMatchMembre(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'OneOfTerrainJsonldMatchMembreContext',
        'id': 'str',
        'type': 'str',
        'te_no': 'int',
        'name': 'str',
        'te_adr1': 'str',
        'adress2': 'str',
        'adress3': 'str',
        'zip_code': 'str',
        'city': 'str',
        'latitude': 'float',
        'longitude': 'float',
        'libelle_surface': 'str'
    }

    attribute_map = {
        'context': '@context',
        'id': '@id',
        'type': '@type',
        'te_no': 'te_no',
        'name': 'name',
        'te_adr1': 'te_adr1',
        'adress2': 'adress2',
        'adress3': 'adress3',
        'zip_code': 'zip_code',
        'city': 'city',
        'latitude': 'latitude',
        'longitude': 'longitude',
        'libelle_surface': 'libelle_surface'
    }

    def __init__(self, context=None, id=None, type=None, te_no=None, name=None, te_adr1=None, adress2=None, adress3=None, zip_code=None, city=None, latitude=None, longitude=None, libelle_surface=None):  # noqa: E501
        """TerrainJsonldMatchMembre - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._id = None
        self._type = None
        self._te_no = None
        self._name = None
        self._te_adr1 = None
        self._adress2 = None
        self._adress3 = None
        self._zip_code = None
        self._city = None
        self._latitude = None
        self._longitude = None
        self._libelle_surface = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if te_no is not None:
            self.te_no = te_no
        if name is not None:
            self.name = name
        if te_adr1 is not None:
            self.te_adr1 = te_adr1
        if adress2 is not None:
            self.adress2 = adress2
        if adress3 is not None:
            self.adress3 = adress3
        if zip_code is not None:
            self.zip_code = zip_code
        if city is not None:
            self.city = city
        if latitude is not None:
            self.latitude = latitude
        if longitude is not None:
            self.longitude = longitude
        if libelle_surface is not None:
            self.libelle_surface = libelle_surface

    @property
    def context(self):
        """Gets the context of this TerrainJsonldMatchMembre.  # noqa: E501


        :return: The context of this TerrainJsonldMatchMembre.  # noqa: E501
        :rtype: OneOfTerrainJsonldMatchMembreContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this TerrainJsonldMatchMembre.


        :param context: The context of this TerrainJsonldMatchMembre.  # noqa: E501
        :type: OneOfTerrainJsonldMatchMembreContext
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this TerrainJsonldMatchMembre.  # noqa: E501


        :return: The id of this TerrainJsonldMatchMembre.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this TerrainJsonldMatchMembre.


        :param id: The id of this TerrainJsonldMatchMembre.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this TerrainJsonldMatchMembre.  # noqa: E501


        :return: The type of this TerrainJsonldMatchMembre.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this TerrainJsonldMatchMembre.


        :param type: The type of this TerrainJsonldMatchMembre.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def te_no(self):
        """Gets the te_no of this TerrainJsonldMatchMembre.  # noqa: E501


        :return: The te_no of this TerrainJsonldMatchMembre.  # noqa: E501
        :rtype: int
        """
        return self._te_no

    @te_no.setter
    def te_no(self, te_no):
        """Sets the te_no of this TerrainJsonldMatchMembre.


        :param te_no: The te_no of this TerrainJsonldMatchMembre.  # noqa: E501
        :type: int
        """

        self._te_no = te_no

    @property
    def name(self):
        """Gets the name of this TerrainJsonldMatchMembre.  # noqa: E501


        :return: The name of this TerrainJsonldMatchMembre.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this TerrainJsonldMatchMembre.


        :param name: The name of this TerrainJsonldMatchMembre.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def te_adr1(self):
        """Gets the te_adr1 of this TerrainJsonldMatchMembre.  # noqa: E501


        :return: The te_adr1 of this TerrainJsonldMatchMembre.  # noqa: E501
        :rtype: str
        """
        return self._te_adr1

    @te_adr1.setter
    def te_adr1(self, te_adr1):
        """Sets the te_adr1 of this TerrainJsonldMatchMembre.


        :param te_adr1: The te_adr1 of this TerrainJsonldMatchMembre.  # noqa: E501
        :type: str
        """

        self._te_adr1 = te_adr1

    @property
    def adress2(self):
        """Gets the adress2 of this TerrainJsonldMatchMembre.  # noqa: E501


        :return: The adress2 of this TerrainJsonldMatchMembre.  # noqa: E501
        :rtype: str
        """
        return self._adress2

    @adress2.setter
    def adress2(self, adress2):
        """Sets the adress2 of this TerrainJsonldMatchMembre.


        :param adress2: The adress2 of this TerrainJsonldMatchMembre.  # noqa: E501
        :type: str
        """

        self._adress2 = adress2

    @property
    def adress3(self):
        """Gets the adress3 of this TerrainJsonldMatchMembre.  # noqa: E501


        :return: The adress3 of this TerrainJsonldMatchMembre.  # noqa: E501
        :rtype: str
        """
        return self._adress3

    @adress3.setter
    def adress3(self, adress3):
        """Sets the adress3 of this TerrainJsonldMatchMembre.


        :param adress3: The adress3 of this TerrainJsonldMatchMembre.  # noqa: E501
        :type: str
        """

        self._adress3 = adress3

    @property
    def zip_code(self):
        """Gets the zip_code of this TerrainJsonldMatchMembre.  # noqa: E501


        :return: The zip_code of this TerrainJsonldMatchMembre.  # noqa: E501
        :rtype: str
        """
        return self._zip_code

    @zip_code.setter
    def zip_code(self, zip_code):
        """Sets the zip_code of this TerrainJsonldMatchMembre.


        :param zip_code: The zip_code of this TerrainJsonldMatchMembre.  # noqa: E501
        :type: str
        """

        self._zip_code = zip_code

    @property
    def city(self):
        """Gets the city of this TerrainJsonldMatchMembre.  # noqa: E501


        :return: The city of this TerrainJsonldMatchMembre.  # noqa: E501
        :rtype: str
        """
        return self._city

    @city.setter
    def city(self, city):
        """Sets the city of this TerrainJsonldMatchMembre.


        :param city: The city of this TerrainJsonldMatchMembre.  # noqa: E501
        :type: str
        """

        self._city = city

    @property
    def latitude(self):
        """Gets the latitude of this TerrainJsonldMatchMembre.  # noqa: E501


        :return: The latitude of this TerrainJsonldMatchMembre.  # noqa: E501
        :rtype: float
        """
        return self._latitude

    @latitude.setter
    def latitude(self, latitude):
        """Sets the latitude of this TerrainJsonldMatchMembre.


        :param latitude: The latitude of this TerrainJsonldMatchMembre.  # noqa: E501
        :type: float
        """

        self._latitude = latitude

    @property
    def longitude(self):
        """Gets the longitude of this TerrainJsonldMatchMembre.  # noqa: E501


        :return: The longitude of this TerrainJsonldMatchMembre.  # noqa: E501
        :rtype: float
        """
        return self._longitude

    @longitude.setter
    def longitude(self, longitude):
        """Sets the longitude of this TerrainJsonldMatchMembre.


        :param longitude: The longitude of this TerrainJsonldMatchMembre.  # noqa: E501
        :type: float
        """

        self._longitude = longitude

    @property
    def libelle_surface(self):
        """Gets the libelle_surface of this TerrainJsonldMatchMembre.  # noqa: E501


        :return: The libelle_surface of this TerrainJsonldMatchMembre.  # noqa: E501
        :rtype: str
        """
        return self._libelle_surface

    @libelle_surface.setter
    def libelle_surface(self, libelle_surface):
        """Sets the libelle_surface of this TerrainJsonldMatchMembre.


        :param libelle_surface: The libelle_surface of this TerrainJsonldMatchMembre.  # noqa: E501
        :type: str
        """

        self._libelle_surface = libelle_surface

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TerrainJsonldMatchMembre, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TerrainJsonldMatchMembre):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
