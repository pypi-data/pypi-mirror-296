# coding: utf-8

"""

    # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IndividuClub(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'in_no': 'str',
        'adresses': 'list[AdresseClub]',
        'contacts': 'list[str]'
    }

    attribute_map = {
        'in_no': 'in_no',
        'adresses': 'adresses',
        'contacts': 'contacts'
    }

    def __init__(self, in_no=None, adresses=None, contacts=None):  # noqa: E501
        """IndividuClub - a model defined in Swagger"""  # noqa: E501
        self._in_no = None
        self._adresses = None
        self._contacts = None
        self.discriminator = None
        if in_no is not None:
            self.in_no = in_no
        if adresses is not None:
            self.adresses = adresses
        if contacts is not None:
            self.contacts = contacts

    @property
    def in_no(self):
        """Gets the in_no of this IndividuClub.  # noqa: E501


        :return: The in_no of this IndividuClub.  # noqa: E501
        :rtype: str
        """
        return self._in_no

    @in_no.setter
    def in_no(self, in_no):
        """Sets the in_no of this IndividuClub.


        :param in_no: The in_no of this IndividuClub.  # noqa: E501
        :type: str
        """

        self._in_no = in_no

    @property
    def adresses(self):
        """Gets the adresses of this IndividuClub.  # noqa: E501


        :return: The adresses of this IndividuClub.  # noqa: E501
        :rtype: list[AdresseClub]
        """
        return self._adresses

    @adresses.setter
    def adresses(self, adresses):
        """Sets the adresses of this IndividuClub.


        :param adresses: The adresses of this IndividuClub.  # noqa: E501
        :type: list[AdresseClub]
        """

        self._adresses = adresses

    @property
    def contacts(self):
        """Gets the contacts of this IndividuClub.  # noqa: E501


        :return: The contacts of this IndividuClub.  # noqa: E501
        :rtype: list[str]
        """
        return self._contacts

    @contacts.setter
    def contacts(self, contacts):
        """Sets the contacts of this IndividuClub.


        :param contacts: The contacts of this IndividuClub.  # noqa: E501
        :type: list[str]
        """

        self._contacts = contacts

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IndividuClub, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndividuClub):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
