# coding: utf-8

"""

    # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PoulePoule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stage_number': 'int',
        'season': 'int',
        'name': 'str',
        'code': 'str',
        'status': 'str',
        'gp_diff_info': 'str',
        'gp_diff_no_tour': 'int',
        'phase': 'PhasePoule',
        'competition': 'CompetPoule',
        'cdg': 'CdgPoule',
        'rounds': 'list[PouleJourneePoule]',
        'poule_unique': 'bool',
        'at_least_one_match_resultat': 'bool'
    }

    attribute_map = {
        'stage_number': 'stage_number',
        'season': 'season',
        'name': 'name',
        'code': 'code',
        'status': 'status',
        'gp_diff_info': 'gp_diff_info',
        'gp_diff_no_tour': 'gp_diff_no_tour',
        'phase': 'phase',
        'competition': 'competition',
        'cdg': 'cdg',
        'rounds': 'rounds',
        'poule_unique': 'poule_unique',
        'at_least_one_match_resultat': 'at_least_one_match_resultat'
    }

    def __init__(self, stage_number=None, season=None, name=None, code=None, status=None, gp_diff_info=None, gp_diff_no_tour=None, phase=None, competition=None, cdg=None, rounds=None, poule_unique=None, at_least_one_match_resultat=None):  # noqa: E501
        """PoulePoule - a model defined in Swagger"""  # noqa: E501
        self._stage_number = None
        self._season = None
        self._name = None
        self._code = None
        self._status = None
        self._gp_diff_info = None
        self._gp_diff_no_tour = None
        self._phase = None
        self._competition = None
        self._cdg = None
        self._rounds = None
        self._poule_unique = None
        self._at_least_one_match_resultat = None
        self.discriminator = None
        if stage_number is not None:
            self.stage_number = stage_number
        if season is not None:
            self.season = season
        if name is not None:
            self.name = name
        if code is not None:
            self.code = code
        if status is not None:
            self.status = status
        if gp_diff_info is not None:
            self.gp_diff_info = gp_diff_info
        if gp_diff_no_tour is not None:
            self.gp_diff_no_tour = gp_diff_no_tour
        if phase is not None:
            self.phase = phase
        if competition is not None:
            self.competition = competition
        if cdg is not None:
            self.cdg = cdg
        if rounds is not None:
            self.rounds = rounds
        if poule_unique is not None:
            self.poule_unique = poule_unique
        if at_least_one_match_resultat is not None:
            self.at_least_one_match_resultat = at_least_one_match_resultat

    @property
    def stage_number(self):
        """Gets the stage_number of this PoulePoule.  # noqa: E501


        :return: The stage_number of this PoulePoule.  # noqa: E501
        :rtype: int
        """
        return self._stage_number

    @stage_number.setter
    def stage_number(self, stage_number):
        """Sets the stage_number of this PoulePoule.


        :param stage_number: The stage_number of this PoulePoule.  # noqa: E501
        :type: int
        """

        self._stage_number = stage_number

    @property
    def season(self):
        """Gets the season of this PoulePoule.  # noqa: E501


        :return: The season of this PoulePoule.  # noqa: E501
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this PoulePoule.


        :param season: The season of this PoulePoule.  # noqa: E501
        :type: int
        """

        self._season = season

    @property
    def name(self):
        """Gets the name of this PoulePoule.  # noqa: E501


        :return: The name of this PoulePoule.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PoulePoule.


        :param name: The name of this PoulePoule.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def code(self):
        """Gets the code of this PoulePoule.  # noqa: E501


        :return: The code of this PoulePoule.  # noqa: E501
        :rtype: str
        """
        return self._code

    @code.setter
    def code(self, code):
        """Sets the code of this PoulePoule.


        :param code: The code of this PoulePoule.  # noqa: E501
        :type: str
        """

        self._code = code

    @property
    def status(self):
        """Gets the status of this PoulePoule.  # noqa: E501


        :return: The status of this PoulePoule.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PoulePoule.


        :param status: The status of this PoulePoule.  # noqa: E501
        :type: str
        """

        self._status = status

    @property
    def gp_diff_info(self):
        """Gets the gp_diff_info of this PoulePoule.  # noqa: E501


        :return: The gp_diff_info of this PoulePoule.  # noqa: E501
        :rtype: str
        """
        return self._gp_diff_info

    @gp_diff_info.setter
    def gp_diff_info(self, gp_diff_info):
        """Sets the gp_diff_info of this PoulePoule.


        :param gp_diff_info: The gp_diff_info of this PoulePoule.  # noqa: E501
        :type: str
        """

        self._gp_diff_info = gp_diff_info

    @property
    def gp_diff_no_tour(self):
        """Gets the gp_diff_no_tour of this PoulePoule.  # noqa: E501


        :return: The gp_diff_no_tour of this PoulePoule.  # noqa: E501
        :rtype: int
        """
        return self._gp_diff_no_tour

    @gp_diff_no_tour.setter
    def gp_diff_no_tour(self, gp_diff_no_tour):
        """Sets the gp_diff_no_tour of this PoulePoule.


        :param gp_diff_no_tour: The gp_diff_no_tour of this PoulePoule.  # noqa: E501
        :type: int
        """

        self._gp_diff_no_tour = gp_diff_no_tour

    @property
    def phase(self):
        """Gets the phase of this PoulePoule.  # noqa: E501


        :return: The phase of this PoulePoule.  # noqa: E501
        :rtype: PhasePoule
        """
        return self._phase

    @phase.setter
    def phase(self, phase):
        """Sets the phase of this PoulePoule.


        :param phase: The phase of this PoulePoule.  # noqa: E501
        :type: PhasePoule
        """

        self._phase = phase

    @property
    def competition(self):
        """Gets the competition of this PoulePoule.  # noqa: E501


        :return: The competition of this PoulePoule.  # noqa: E501
        :rtype: CompetPoule
        """
        return self._competition

    @competition.setter
    def competition(self, competition):
        """Sets the competition of this PoulePoule.


        :param competition: The competition of this PoulePoule.  # noqa: E501
        :type: CompetPoule
        """

        self._competition = competition

    @property
    def cdg(self):
        """Gets the cdg of this PoulePoule.  # noqa: E501


        :return: The cdg of this PoulePoule.  # noqa: E501
        :rtype: CdgPoule
        """
        return self._cdg

    @cdg.setter
    def cdg(self, cdg):
        """Sets the cdg of this PoulePoule.


        :param cdg: The cdg of this PoulePoule.  # noqa: E501
        :type: CdgPoule
        """

        self._cdg = cdg

    @property
    def rounds(self):
        """Gets the rounds of this PoulePoule.  # noqa: E501


        :return: The rounds of this PoulePoule.  # noqa: E501
        :rtype: list[PouleJourneePoule]
        """
        return self._rounds

    @rounds.setter
    def rounds(self, rounds):
        """Sets the rounds of this PoulePoule.


        :param rounds: The rounds of this PoulePoule.  # noqa: E501
        :type: list[PouleJourneePoule]
        """

        self._rounds = rounds

    @property
    def poule_unique(self):
        """Gets the poule_unique of this PoulePoule.  # noqa: E501


        :return: The poule_unique of this PoulePoule.  # noqa: E501
        :rtype: bool
        """
        return self._poule_unique

    @poule_unique.setter
    def poule_unique(self, poule_unique):
        """Sets the poule_unique of this PoulePoule.


        :param poule_unique: The poule_unique of this PoulePoule.  # noqa: E501
        :type: bool
        """

        self._poule_unique = poule_unique

    @property
    def at_least_one_match_resultat(self):
        """Gets the at_least_one_match_resultat of this PoulePoule.  # noqa: E501


        :return: The at_least_one_match_resultat of this PoulePoule.  # noqa: E501
        :rtype: bool
        """
        return self._at_least_one_match_resultat

    @at_least_one_match_resultat.setter
    def at_least_one_match_resultat(self, at_least_one_match_resultat):
        """Sets the at_least_one_match_resultat of this PoulePoule.


        :param at_least_one_match_resultat: The at_least_one_match_resultat of this PoulePoule.  # noqa: E501
        :type: bool
        """

        self._at_least_one_match_resultat = at_least_one_match_resultat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PoulePoule, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PoulePoule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
