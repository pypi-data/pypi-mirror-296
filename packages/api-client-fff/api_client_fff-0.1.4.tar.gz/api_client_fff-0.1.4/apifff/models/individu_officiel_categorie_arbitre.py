# coding: utf-8

"""

    # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class IndividuOfficielCategorieArbitre(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'in_nom': 'str',
        'in_prenom': 'str',
        'in_sexe': 'str',
        'in_dat_nais': 'datetime'
    }

    attribute_map = {
        'in_nom': 'in_nom',
        'in_prenom': 'in_prenom',
        'in_sexe': 'in_sexe',
        'in_dat_nais': 'in_dat_nais'
    }

    def __init__(self, in_nom=None, in_prenom=None, in_sexe=None, in_dat_nais=None):  # noqa: E501
        """IndividuOfficielCategorieArbitre - a model defined in Swagger"""  # noqa: E501
        self._in_nom = None
        self._in_prenom = None
        self._in_sexe = None
        self._in_dat_nais = None
        self.discriminator = None
        if in_nom is not None:
            self.in_nom = in_nom
        if in_prenom is not None:
            self.in_prenom = in_prenom
        if in_sexe is not None:
            self.in_sexe = in_sexe
        if in_dat_nais is not None:
            self.in_dat_nais = in_dat_nais

    @property
    def in_nom(self):
        """Gets the in_nom of this IndividuOfficielCategorieArbitre.  # noqa: E501


        :return: The in_nom of this IndividuOfficielCategorieArbitre.  # noqa: E501
        :rtype: str
        """
        return self._in_nom

    @in_nom.setter
    def in_nom(self, in_nom):
        """Sets the in_nom of this IndividuOfficielCategorieArbitre.


        :param in_nom: The in_nom of this IndividuOfficielCategorieArbitre.  # noqa: E501
        :type: str
        """

        self._in_nom = in_nom

    @property
    def in_prenom(self):
        """Gets the in_prenom of this IndividuOfficielCategorieArbitre.  # noqa: E501


        :return: The in_prenom of this IndividuOfficielCategorieArbitre.  # noqa: E501
        :rtype: str
        """
        return self._in_prenom

    @in_prenom.setter
    def in_prenom(self, in_prenom):
        """Sets the in_prenom of this IndividuOfficielCategorieArbitre.


        :param in_prenom: The in_prenom of this IndividuOfficielCategorieArbitre.  # noqa: E501
        :type: str
        """

        self._in_prenom = in_prenom

    @property
    def in_sexe(self):
        """Gets the in_sexe of this IndividuOfficielCategorieArbitre.  # noqa: E501


        :return: The in_sexe of this IndividuOfficielCategorieArbitre.  # noqa: E501
        :rtype: str
        """
        return self._in_sexe

    @in_sexe.setter
    def in_sexe(self, in_sexe):
        """Sets the in_sexe of this IndividuOfficielCategorieArbitre.


        :param in_sexe: The in_sexe of this IndividuOfficielCategorieArbitre.  # noqa: E501
        :type: str
        """

        self._in_sexe = in_sexe

    @property
    def in_dat_nais(self):
        """Gets the in_dat_nais of this IndividuOfficielCategorieArbitre.  # noqa: E501


        :return: The in_dat_nais of this IndividuOfficielCategorieArbitre.  # noqa: E501
        :rtype: datetime
        """
        return self._in_dat_nais

    @in_dat_nais.setter
    def in_dat_nais(self, in_dat_nais):
        """Sets the in_dat_nais of this IndividuOfficielCategorieArbitre.


        :param in_dat_nais: The in_dat_nais of this IndividuOfficielCategorieArbitre.  # noqa: E501
        :type: datetime
        """

        self._in_dat_nais = in_dat_nais

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(IndividuOfficielCategorieArbitre, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, IndividuOfficielCategorieArbitre):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
