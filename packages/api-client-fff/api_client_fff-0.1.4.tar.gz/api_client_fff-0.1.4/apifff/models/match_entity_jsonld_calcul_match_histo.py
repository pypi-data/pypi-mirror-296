# coding: utf-8

"""

    # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MatchEntityJsonldCalculMatchHisto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'OneOfMatchEntityJsonldCalculMatchHistoContext',
        'id': 'str',
        'type': 'str',
        'competition': 'AnyOfMatchEntityJsonldCalculMatchHistoCompetition',
        'home': 'AnyOfMatchEntityJsonldCalculMatchHistoHome',
        'away': 'AnyOfMatchEntityJsonldCalculMatchHistoAway',
        '_date': 'datetime',
        'time': 'str',
        'cr_nb_but': 'int',
        'home_score': 'int',
        'away_nb_but': 'int',
        'away_score': 'int'
    }

    attribute_map = {
        'context': '@context',
        'id': '@id',
        'type': '@type',
        'competition': 'competition',
        'home': 'home',
        'away': 'away',
        '_date': 'date',
        'time': 'time',
        'cr_nb_but': 'cr_nb_but',
        'home_score': 'home_score',
        'away_nb_but': 'away_nb_but',
        'away_score': 'away_score'
    }

    def __init__(self, context=None, id=None, type=None, competition=None, home=None, away=None, _date=None, time=None, cr_nb_but=None, home_score=None, away_nb_but=None, away_score=None):  # noqa: E501
        """MatchEntityJsonldCalculMatchHisto - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._id = None
        self._type = None
        self._competition = None
        self._home = None
        self._away = None
        self.__date = None
        self._time = None
        self._cr_nb_but = None
        self._home_score = None
        self._away_nb_but = None
        self._away_score = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if competition is not None:
            self.competition = competition
        if home is not None:
            self.home = home
        if away is not None:
            self.away = away
        if _date is not None:
            self._date = _date
        if time is not None:
            self.time = time
        if cr_nb_but is not None:
            self.cr_nb_but = cr_nb_but
        if home_score is not None:
            self.home_score = home_score
        if away_nb_but is not None:
            self.away_nb_but = away_nb_but
        if away_score is not None:
            self.away_score = away_score

    @property
    def context(self):
        """Gets the context of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501


        :return: The context of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :rtype: OneOfMatchEntityJsonldCalculMatchHistoContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this MatchEntityJsonldCalculMatchHisto.


        :param context: The context of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :type: OneOfMatchEntityJsonldCalculMatchHistoContext
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501


        :return: The id of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MatchEntityJsonldCalculMatchHisto.


        :param id: The id of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501


        :return: The type of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this MatchEntityJsonldCalculMatchHisto.


        :param type: The type of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def competition(self):
        """Gets the competition of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501


        :return: The competition of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :rtype: AnyOfMatchEntityJsonldCalculMatchHistoCompetition
        """
        return self._competition

    @competition.setter
    def competition(self, competition):
        """Sets the competition of this MatchEntityJsonldCalculMatchHisto.


        :param competition: The competition of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :type: AnyOfMatchEntityJsonldCalculMatchHistoCompetition
        """

        self._competition = competition

    @property
    def home(self):
        """Gets the home of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501


        :return: The home of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :rtype: AnyOfMatchEntityJsonldCalculMatchHistoHome
        """
        return self._home

    @home.setter
    def home(self, home):
        """Sets the home of this MatchEntityJsonldCalculMatchHisto.


        :param home: The home of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :type: AnyOfMatchEntityJsonldCalculMatchHistoHome
        """

        self._home = home

    @property
    def away(self):
        """Gets the away of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501


        :return: The away of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :rtype: AnyOfMatchEntityJsonldCalculMatchHistoAway
        """
        return self._away

    @away.setter
    def away(self, away):
        """Sets the away of this MatchEntityJsonldCalculMatchHisto.


        :param away: The away of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :type: AnyOfMatchEntityJsonldCalculMatchHistoAway
        """

        self._away = away

    @property
    def _date(self):
        """Gets the _date of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501


        :return: The _date of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :rtype: datetime
        """
        return self.__date

    @_date.setter
    def _date(self, _date):
        """Sets the _date of this MatchEntityJsonldCalculMatchHisto.


        :param _date: The _date of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :type: datetime
        """

        self.__date = _date

    @property
    def time(self):
        """Gets the time of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501


        :return: The time of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :rtype: str
        """
        return self._time

    @time.setter
    def time(self, time):
        """Sets the time of this MatchEntityJsonldCalculMatchHisto.


        :param time: The time of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :type: str
        """

        self._time = time

    @property
    def cr_nb_but(self):
        """Gets the cr_nb_but of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501


        :return: The cr_nb_but of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :rtype: int
        """
        return self._cr_nb_but

    @cr_nb_but.setter
    def cr_nb_but(self, cr_nb_but):
        """Sets the cr_nb_but of this MatchEntityJsonldCalculMatchHisto.


        :param cr_nb_but: The cr_nb_but of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :type: int
        """

        self._cr_nb_but = cr_nb_but

    @property
    def home_score(self):
        """Gets the home_score of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501


        :return: The home_score of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :rtype: int
        """
        return self._home_score

    @home_score.setter
    def home_score(self, home_score):
        """Sets the home_score of this MatchEntityJsonldCalculMatchHisto.


        :param home_score: The home_score of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :type: int
        """

        self._home_score = home_score

    @property
    def away_nb_but(self):
        """Gets the away_nb_but of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501


        :return: The away_nb_but of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :rtype: int
        """
        return self._away_nb_but

    @away_nb_but.setter
    def away_nb_but(self, away_nb_but):
        """Sets the away_nb_but of this MatchEntityJsonldCalculMatchHisto.


        :param away_nb_but: The away_nb_but of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :type: int
        """

        self._away_nb_but = away_nb_but

    @property
    def away_score(self):
        """Gets the away_score of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501


        :return: The away_score of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :rtype: int
        """
        return self._away_score

    @away_score.setter
    def away_score(self, away_score):
        """Sets the away_score of this MatchEntityJsonldCalculMatchHisto.


        :param away_score: The away_score of this MatchEntityJsonldCalculMatchHisto.  # noqa: E501
        :type: int
        """

        self._away_score = away_score

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MatchEntityJsonldCalculMatchHisto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MatchEntityJsonldCalculMatchHisto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
