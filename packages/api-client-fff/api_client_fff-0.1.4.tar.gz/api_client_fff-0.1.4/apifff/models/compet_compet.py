# coding: utf-8

"""

    # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CompetCompet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cp_no': 'int',
        'season': 'int',
        'license_code': 'str',
        'type': 'str',
        'name': 'str',
        'shortname': 'str',
        'cp_niv': 'str',
        'level': 'str',
        'cdg': 'CdgCompet',
        'phases': 'list[PhaseCompet]'
    }

    attribute_map = {
        'cp_no': 'cp_no',
        'season': 'season',
        'license_code': 'license_code',
        'type': 'type',
        'name': 'name',
        'shortname': 'shortname',
        'cp_niv': 'cp_niv',
        'level': 'level',
        'cdg': 'cdg',
        'phases': 'phases'
    }

    def __init__(self, cp_no=None, season=None, license_code=None, type=None, name=None, shortname=None, cp_niv=None, level=None, cdg=None, phases=None):  # noqa: E501
        """CompetCompet - a model defined in Swagger"""  # noqa: E501
        self._cp_no = None
        self._season = None
        self._license_code = None
        self._type = None
        self._name = None
        self._shortname = None
        self._cp_niv = None
        self._level = None
        self._cdg = None
        self._phases = None
        self.discriminator = None
        if cp_no is not None:
            self.cp_no = cp_no
        if season is not None:
            self.season = season
        if license_code is not None:
            self.license_code = license_code
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if shortname is not None:
            self.shortname = shortname
        if cp_niv is not None:
            self.cp_niv = cp_niv
        if level is not None:
            self.level = level
        if cdg is not None:
            self.cdg = cdg
        if phases is not None:
            self.phases = phases

    @property
    def cp_no(self):
        """Gets the cp_no of this CompetCompet.  # noqa: E501


        :return: The cp_no of this CompetCompet.  # noqa: E501
        :rtype: int
        """
        return self._cp_no

    @cp_no.setter
    def cp_no(self, cp_no):
        """Sets the cp_no of this CompetCompet.


        :param cp_no: The cp_no of this CompetCompet.  # noqa: E501
        :type: int
        """

        self._cp_no = cp_no

    @property
    def season(self):
        """Gets the season of this CompetCompet.  # noqa: E501


        :return: The season of this CompetCompet.  # noqa: E501
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this CompetCompet.


        :param season: The season of this CompetCompet.  # noqa: E501
        :type: int
        """

        self._season = season

    @property
    def license_code(self):
        """Gets the license_code of this CompetCompet.  # noqa: E501


        :return: The license_code of this CompetCompet.  # noqa: E501
        :rtype: str
        """
        return self._license_code

    @license_code.setter
    def license_code(self, license_code):
        """Sets the license_code of this CompetCompet.


        :param license_code: The license_code of this CompetCompet.  # noqa: E501
        :type: str
        """

        self._license_code = license_code

    @property
    def type(self):
        """Gets the type of this CompetCompet.  # noqa: E501


        :return: The type of this CompetCompet.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CompetCompet.


        :param type: The type of this CompetCompet.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this CompetCompet.  # noqa: E501


        :return: The name of this CompetCompet.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CompetCompet.


        :param name: The name of this CompetCompet.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def shortname(self):
        """Gets the shortname of this CompetCompet.  # noqa: E501


        :return: The shortname of this CompetCompet.  # noqa: E501
        :rtype: str
        """
        return self._shortname

    @shortname.setter
    def shortname(self, shortname):
        """Sets the shortname of this CompetCompet.


        :param shortname: The shortname of this CompetCompet.  # noqa: E501
        :type: str
        """

        self._shortname = shortname

    @property
    def cp_niv(self):
        """Gets the cp_niv of this CompetCompet.  # noqa: E501


        :return: The cp_niv of this CompetCompet.  # noqa: E501
        :rtype: str
        """
        return self._cp_niv

    @cp_niv.setter
    def cp_niv(self, cp_niv):
        """Sets the cp_niv of this CompetCompet.


        :param cp_niv: The cp_niv of this CompetCompet.  # noqa: E501
        :type: str
        """

        self._cp_niv = cp_niv

    @property
    def level(self):
        """Gets the level of this CompetCompet.  # noqa: E501


        :return: The level of this CompetCompet.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this CompetCompet.


        :param level: The level of this CompetCompet.  # noqa: E501
        :type: str
        """

        self._level = level

    @property
    def cdg(self):
        """Gets the cdg of this CompetCompet.  # noqa: E501


        :return: The cdg of this CompetCompet.  # noqa: E501
        :rtype: CdgCompet
        """
        return self._cdg

    @cdg.setter
    def cdg(self, cdg):
        """Sets the cdg of this CompetCompet.


        :param cdg: The cdg of this CompetCompet.  # noqa: E501
        :type: CdgCompet
        """

        self._cdg = cdg

    @property
    def phases(self):
        """Gets the phases of this CompetCompet.  # noqa: E501


        :return: The phases of this CompetCompet.  # noqa: E501
        :rtype: list[PhaseCompet]
        """
        return self._phases

    @phases.setter
    def phases(self, phases):
        """Sets the phases of this CompetCompet.


        :param phases: The phases of this CompetCompet.  # noqa: E501
        :type: list[PhaseCompet]
        """

        self._phases = phases

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompetCompet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompetCompet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
