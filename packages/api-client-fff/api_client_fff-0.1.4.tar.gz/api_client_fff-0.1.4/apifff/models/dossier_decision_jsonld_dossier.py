# coding: utf-8

"""

    # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class DossierDecisionJsonldDossier(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'OneOfDossierDecisionJsonldDossierContext',
        'id': 'str',
        'type': 'str',
        'dd_no': 'int',
        'cc_cod': 'str',
        'dd_statut': 'str',
        'dd_dat_effet': 'datetime',
        'dd_dat_fin': 'datetime',
        'dd_dat_delai_recid': 'datetime',
        'dd_a_vie': 'str',
        'dd_lib_motif': 'str',
        'dd_lib_decis': 'str',
        'dd_epur': 'str',
        'dd_purg': 'str',
        'dd_niv': 'int',
        'lb_no': 'int',
        'dc_diff_info': 'str',
        'lb_dat': 'datetime',
        'fc_mt': 'str',
        'cr_dat': 'datetime'
    }

    attribute_map = {
        'context': '@context',
        'id': '@id',
        'type': '@type',
        'dd_no': 'dd_no',
        'cc_cod': 'cc_cod',
        'dd_statut': 'dd_statut',
        'dd_dat_effet': 'dd_dat_effet',
        'dd_dat_fin': 'dd_dat_fin',
        'dd_dat_delai_recid': 'dd_dat_delai_recid',
        'dd_a_vie': 'dd_a_vie',
        'dd_lib_motif': 'dd_lib_motif',
        'dd_lib_decis': 'dd_lib_decis',
        'dd_epur': 'dd_epur',
        'dd_purg': 'dd_purg',
        'dd_niv': 'dd_niv',
        'lb_no': 'lb_no',
        'dc_diff_info': 'dc_diff_info',
        'lb_dat': 'lb_dat',
        'fc_mt': 'fc_mt',
        'cr_dat': 'cr_dat'
    }

    def __init__(self, context=None, id=None, type=None, dd_no=None, cc_cod=None, dd_statut=None, dd_dat_effet=None, dd_dat_fin=None, dd_dat_delai_recid=None, dd_a_vie=None, dd_lib_motif=None, dd_lib_decis=None, dd_epur=None, dd_purg=None, dd_niv=None, lb_no=None, dc_diff_info=None, lb_dat=None, fc_mt=None, cr_dat=None):  # noqa: E501
        """DossierDecisionJsonldDossier - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._id = None
        self._type = None
        self._dd_no = None
        self._cc_cod = None
        self._dd_statut = None
        self._dd_dat_effet = None
        self._dd_dat_fin = None
        self._dd_dat_delai_recid = None
        self._dd_a_vie = None
        self._dd_lib_motif = None
        self._dd_lib_decis = None
        self._dd_epur = None
        self._dd_purg = None
        self._dd_niv = None
        self._lb_no = None
        self._dc_diff_info = None
        self._lb_dat = None
        self._fc_mt = None
        self._cr_dat = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if dd_no is not None:
            self.dd_no = dd_no
        if cc_cod is not None:
            self.cc_cod = cc_cod
        if dd_statut is not None:
            self.dd_statut = dd_statut
        if dd_dat_effet is not None:
            self.dd_dat_effet = dd_dat_effet
        if dd_dat_fin is not None:
            self.dd_dat_fin = dd_dat_fin
        if dd_dat_delai_recid is not None:
            self.dd_dat_delai_recid = dd_dat_delai_recid
        if dd_a_vie is not None:
            self.dd_a_vie = dd_a_vie
        if dd_lib_motif is not None:
            self.dd_lib_motif = dd_lib_motif
        if dd_lib_decis is not None:
            self.dd_lib_decis = dd_lib_decis
        if dd_epur is not None:
            self.dd_epur = dd_epur
        if dd_purg is not None:
            self.dd_purg = dd_purg
        if dd_niv is not None:
            self.dd_niv = dd_niv
        if lb_no is not None:
            self.lb_no = lb_no
        if dc_diff_info is not None:
            self.dc_diff_info = dc_diff_info
        if lb_dat is not None:
            self.lb_dat = lb_dat
        if fc_mt is not None:
            self.fc_mt = fc_mt
        if cr_dat is not None:
            self.cr_dat = cr_dat

    @property
    def context(self):
        """Gets the context of this DossierDecisionJsonldDossier.  # noqa: E501


        :return: The context of this DossierDecisionJsonldDossier.  # noqa: E501
        :rtype: OneOfDossierDecisionJsonldDossierContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this DossierDecisionJsonldDossier.


        :param context: The context of this DossierDecisionJsonldDossier.  # noqa: E501
        :type: OneOfDossierDecisionJsonldDossierContext
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this DossierDecisionJsonldDossier.  # noqa: E501


        :return: The id of this DossierDecisionJsonldDossier.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DossierDecisionJsonldDossier.


        :param id: The id of this DossierDecisionJsonldDossier.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this DossierDecisionJsonldDossier.  # noqa: E501


        :return: The type of this DossierDecisionJsonldDossier.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this DossierDecisionJsonldDossier.


        :param type: The type of this DossierDecisionJsonldDossier.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def dd_no(self):
        """Gets the dd_no of this DossierDecisionJsonldDossier.  # noqa: E501


        :return: The dd_no of this DossierDecisionJsonldDossier.  # noqa: E501
        :rtype: int
        """
        return self._dd_no

    @dd_no.setter
    def dd_no(self, dd_no):
        """Sets the dd_no of this DossierDecisionJsonldDossier.


        :param dd_no: The dd_no of this DossierDecisionJsonldDossier.  # noqa: E501
        :type: int
        """

        self._dd_no = dd_no

    @property
    def cc_cod(self):
        """Gets the cc_cod of this DossierDecisionJsonldDossier.  # noqa: E501


        :return: The cc_cod of this DossierDecisionJsonldDossier.  # noqa: E501
        :rtype: str
        """
        return self._cc_cod

    @cc_cod.setter
    def cc_cod(self, cc_cod):
        """Sets the cc_cod of this DossierDecisionJsonldDossier.


        :param cc_cod: The cc_cod of this DossierDecisionJsonldDossier.  # noqa: E501
        :type: str
        """

        self._cc_cod = cc_cod

    @property
    def dd_statut(self):
        """Gets the dd_statut of this DossierDecisionJsonldDossier.  # noqa: E501


        :return: The dd_statut of this DossierDecisionJsonldDossier.  # noqa: E501
        :rtype: str
        """
        return self._dd_statut

    @dd_statut.setter
    def dd_statut(self, dd_statut):
        """Sets the dd_statut of this DossierDecisionJsonldDossier.


        :param dd_statut: The dd_statut of this DossierDecisionJsonldDossier.  # noqa: E501
        :type: str
        """

        self._dd_statut = dd_statut

    @property
    def dd_dat_effet(self):
        """Gets the dd_dat_effet of this DossierDecisionJsonldDossier.  # noqa: E501


        :return: The dd_dat_effet of this DossierDecisionJsonldDossier.  # noqa: E501
        :rtype: datetime
        """
        return self._dd_dat_effet

    @dd_dat_effet.setter
    def dd_dat_effet(self, dd_dat_effet):
        """Sets the dd_dat_effet of this DossierDecisionJsonldDossier.


        :param dd_dat_effet: The dd_dat_effet of this DossierDecisionJsonldDossier.  # noqa: E501
        :type: datetime
        """

        self._dd_dat_effet = dd_dat_effet

    @property
    def dd_dat_fin(self):
        """Gets the dd_dat_fin of this DossierDecisionJsonldDossier.  # noqa: E501


        :return: The dd_dat_fin of this DossierDecisionJsonldDossier.  # noqa: E501
        :rtype: datetime
        """
        return self._dd_dat_fin

    @dd_dat_fin.setter
    def dd_dat_fin(self, dd_dat_fin):
        """Sets the dd_dat_fin of this DossierDecisionJsonldDossier.


        :param dd_dat_fin: The dd_dat_fin of this DossierDecisionJsonldDossier.  # noqa: E501
        :type: datetime
        """

        self._dd_dat_fin = dd_dat_fin

    @property
    def dd_dat_delai_recid(self):
        """Gets the dd_dat_delai_recid of this DossierDecisionJsonldDossier.  # noqa: E501


        :return: The dd_dat_delai_recid of this DossierDecisionJsonldDossier.  # noqa: E501
        :rtype: datetime
        """
        return self._dd_dat_delai_recid

    @dd_dat_delai_recid.setter
    def dd_dat_delai_recid(self, dd_dat_delai_recid):
        """Sets the dd_dat_delai_recid of this DossierDecisionJsonldDossier.


        :param dd_dat_delai_recid: The dd_dat_delai_recid of this DossierDecisionJsonldDossier.  # noqa: E501
        :type: datetime
        """

        self._dd_dat_delai_recid = dd_dat_delai_recid

    @property
    def dd_a_vie(self):
        """Gets the dd_a_vie of this DossierDecisionJsonldDossier.  # noqa: E501


        :return: The dd_a_vie of this DossierDecisionJsonldDossier.  # noqa: E501
        :rtype: str
        """
        return self._dd_a_vie

    @dd_a_vie.setter
    def dd_a_vie(self, dd_a_vie):
        """Sets the dd_a_vie of this DossierDecisionJsonldDossier.


        :param dd_a_vie: The dd_a_vie of this DossierDecisionJsonldDossier.  # noqa: E501
        :type: str
        """

        self._dd_a_vie = dd_a_vie

    @property
    def dd_lib_motif(self):
        """Gets the dd_lib_motif of this DossierDecisionJsonldDossier.  # noqa: E501


        :return: The dd_lib_motif of this DossierDecisionJsonldDossier.  # noqa: E501
        :rtype: str
        """
        return self._dd_lib_motif

    @dd_lib_motif.setter
    def dd_lib_motif(self, dd_lib_motif):
        """Sets the dd_lib_motif of this DossierDecisionJsonldDossier.


        :param dd_lib_motif: The dd_lib_motif of this DossierDecisionJsonldDossier.  # noqa: E501
        :type: str
        """

        self._dd_lib_motif = dd_lib_motif

    @property
    def dd_lib_decis(self):
        """Gets the dd_lib_decis of this DossierDecisionJsonldDossier.  # noqa: E501


        :return: The dd_lib_decis of this DossierDecisionJsonldDossier.  # noqa: E501
        :rtype: str
        """
        return self._dd_lib_decis

    @dd_lib_decis.setter
    def dd_lib_decis(self, dd_lib_decis):
        """Sets the dd_lib_decis of this DossierDecisionJsonldDossier.


        :param dd_lib_decis: The dd_lib_decis of this DossierDecisionJsonldDossier.  # noqa: E501
        :type: str
        """

        self._dd_lib_decis = dd_lib_decis

    @property
    def dd_epur(self):
        """Gets the dd_epur of this DossierDecisionJsonldDossier.  # noqa: E501


        :return: The dd_epur of this DossierDecisionJsonldDossier.  # noqa: E501
        :rtype: str
        """
        return self._dd_epur

    @dd_epur.setter
    def dd_epur(self, dd_epur):
        """Sets the dd_epur of this DossierDecisionJsonldDossier.


        :param dd_epur: The dd_epur of this DossierDecisionJsonldDossier.  # noqa: E501
        :type: str
        """

        self._dd_epur = dd_epur

    @property
    def dd_purg(self):
        """Gets the dd_purg of this DossierDecisionJsonldDossier.  # noqa: E501


        :return: The dd_purg of this DossierDecisionJsonldDossier.  # noqa: E501
        :rtype: str
        """
        return self._dd_purg

    @dd_purg.setter
    def dd_purg(self, dd_purg):
        """Sets the dd_purg of this DossierDecisionJsonldDossier.


        :param dd_purg: The dd_purg of this DossierDecisionJsonldDossier.  # noqa: E501
        :type: str
        """

        self._dd_purg = dd_purg

    @property
    def dd_niv(self):
        """Gets the dd_niv of this DossierDecisionJsonldDossier.  # noqa: E501


        :return: The dd_niv of this DossierDecisionJsonldDossier.  # noqa: E501
        :rtype: int
        """
        return self._dd_niv

    @dd_niv.setter
    def dd_niv(self, dd_niv):
        """Sets the dd_niv of this DossierDecisionJsonldDossier.


        :param dd_niv: The dd_niv of this DossierDecisionJsonldDossier.  # noqa: E501
        :type: int
        """

        self._dd_niv = dd_niv

    @property
    def lb_no(self):
        """Gets the lb_no of this DossierDecisionJsonldDossier.  # noqa: E501


        :return: The lb_no of this DossierDecisionJsonldDossier.  # noqa: E501
        :rtype: int
        """
        return self._lb_no

    @lb_no.setter
    def lb_no(self, lb_no):
        """Sets the lb_no of this DossierDecisionJsonldDossier.


        :param lb_no: The lb_no of this DossierDecisionJsonldDossier.  # noqa: E501
        :type: int
        """

        self._lb_no = lb_no

    @property
    def dc_diff_info(self):
        """Gets the dc_diff_info of this DossierDecisionJsonldDossier.  # noqa: E501


        :return: The dc_diff_info of this DossierDecisionJsonldDossier.  # noqa: E501
        :rtype: str
        """
        return self._dc_diff_info

    @dc_diff_info.setter
    def dc_diff_info(self, dc_diff_info):
        """Sets the dc_diff_info of this DossierDecisionJsonldDossier.


        :param dc_diff_info: The dc_diff_info of this DossierDecisionJsonldDossier.  # noqa: E501
        :type: str
        """

        self._dc_diff_info = dc_diff_info

    @property
    def lb_dat(self):
        """Gets the lb_dat of this DossierDecisionJsonldDossier.  # noqa: E501


        :return: The lb_dat of this DossierDecisionJsonldDossier.  # noqa: E501
        :rtype: datetime
        """
        return self._lb_dat

    @lb_dat.setter
    def lb_dat(self, lb_dat):
        """Sets the lb_dat of this DossierDecisionJsonldDossier.


        :param lb_dat: The lb_dat of this DossierDecisionJsonldDossier.  # noqa: E501
        :type: datetime
        """

        self._lb_dat = lb_dat

    @property
    def fc_mt(self):
        """Gets the fc_mt of this DossierDecisionJsonldDossier.  # noqa: E501


        :return: The fc_mt of this DossierDecisionJsonldDossier.  # noqa: E501
        :rtype: str
        """
        return self._fc_mt

    @fc_mt.setter
    def fc_mt(self, fc_mt):
        """Sets the fc_mt of this DossierDecisionJsonldDossier.


        :param fc_mt: The fc_mt of this DossierDecisionJsonldDossier.  # noqa: E501
        :type: str
        """

        self._fc_mt = fc_mt

    @property
    def cr_dat(self):
        """Gets the cr_dat of this DossierDecisionJsonldDossier.  # noqa: E501


        :return: The cr_dat of this DossierDecisionJsonldDossier.  # noqa: E501
        :rtype: datetime
        """
        return self._cr_dat

    @cr_dat.setter
    def cr_dat(self, cr_dat):
        """Sets the cr_dat of this DossierDecisionJsonldDossier.


        :param cr_dat: The cr_dat of this DossierDecisionJsonldDossier.  # noqa: E501
        :type: datetime
        """

        self._cr_dat = cr_dat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(DossierDecisionJsonldDossier, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DossierDecisionJsonldDossier):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
