# coding: utf-8

"""

    # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from apifff.api_client import ApiClient


class EngagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def api_clubs_equipes_engagements_get_subresource_club_subresource(self, cl_no, equipes, **kwargs):  # noqa: E501
        """Retrieves a Club resource.  # noqa: E501

        Retrieves a Club resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_clubs_equipes_engagements_get_subresource_club_subresource(cl_no, equipes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cl_no: Club identifier (required)
        :param str equipes: Equipe identifier (required)
        :param int page: The collection page number
        :param int competition_cp_no:
        :param list[int] competition_cp_no:
        :param int phase_ph_no:
        :param list[int] phase_ph_no:
        :param int poule_gp_no:
        :param list[int] poule_gp_no:
        :param int club_cl_no:
        :param list[int] club_cl_no:
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.api_clubs_equipes_engagements_get_subresource_club_subresource_with_http_info(cl_no, equipes, **kwargs)  # noqa: E501
        else:
            (data) = self.api_clubs_equipes_engagements_get_subresource_club_subresource_with_http_info(cl_no, equipes, **kwargs)  # noqa: E501
            return data

    def api_clubs_equipes_engagements_get_subresource_club_subresource_with_http_info(self, cl_no, equipes, **kwargs):  # noqa: E501
        """Retrieves a Club resource.  # noqa: E501

        Retrieves a Club resource.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.api_clubs_equipes_engagements_get_subresource_club_subresource_with_http_info(cl_no, equipes, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param str cl_no: Club identifier (required)
        :param str equipes: Equipe identifier (required)
        :param int page: The collection page number
        :param int competition_cp_no:
        :param list[int] competition_cp_no:
        :param int phase_ph_no:
        :param list[int] phase_ph_no:
        :param int poule_gp_no:
        :param list[int] poule_gp_no:
        :param int club_cl_no:
        :param list[int] club_cl_no:
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cl_no', 'equipes', 'page', 'competition_cp_no', 'competition_cp_no', 'phase_ph_no', 'phase_ph_no', 'poule_gp_no', 'poule_gp_no', 'club_cl_no', 'club_cl_no']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method api_clubs_equipes_engagements_get_subresource_club_subresource" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cl_no' is set
        if ('cl_no' not in params or
                params['cl_no'] is None):
            raise ValueError("Missing the required parameter `cl_no` when calling `api_clubs_equipes_engagements_get_subresource_club_subresource`")  # noqa: E501
        # verify the required parameter 'equipes' is set
        if ('equipes' not in params or
                params['equipes'] is None):
            raise ValueError("Missing the required parameter `equipes` when calling `api_clubs_equipes_engagements_get_subresource_club_subresource`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cl_no' in params:
            path_params['clNo'] = params['cl_no']  # noqa: E501
        if 'equipes' in params:
            path_params['equipes'] = params['equipes']  # noqa: E501

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'competition_cp_no' in params:
            query_params.append(('competition.cp_no', params['competition_cp_no']))  # noqa: E501
        if 'competition_cp_no' in params:
            query_params.append(('competition.cp_no[]', params['competition_cp_no']))  # noqa: E501
            collection_formats['competition.cp_no[]'] = 'multi'  # noqa: E501
        if 'phase_ph_no' in params:
            query_params.append(('phase.ph_no', params['phase_ph_no']))  # noqa: E501
        if 'phase_ph_no' in params:
            query_params.append(('phase.ph_no[]', params['phase_ph_no']))  # noqa: E501
            collection_formats['phase.ph_no[]'] = 'multi'  # noqa: E501
        if 'poule_gp_no' in params:
            query_params.append(('poule.gp_no', params['poule_gp_no']))  # noqa: E501
        if 'poule_gp_no' in params:
            query_params.append(('poule.gp_no[]', params['poule_gp_no']))  # noqa: E501
            collection_formats['poule.gp_no[]'] = 'multi'  # noqa: E501
        if 'club_cl_no' in params:
            query_params.append(('club.cl_no', params['club_cl_no']))  # noqa: E501
        if 'club_cl_no' in params:
            query_params.append(('club.cl_no[]', params['club_cl_no']))  # noqa: E501
            collection_formats['club.cl_no[]'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/clubs/{clNo}/equipes/{equipes}/engagements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_engagement_collection(self, **kwargs):  # noqa: E501
        """Retrieves the collection of Engagement resources.  # noqa: E501

        Retrieves the collection of Engagement resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_engagement_collection(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The collection page number
        :param int competition_cp_no:
        :param list[int] competition_cp_no:
        :param int phase_ph_no:
        :param list[int] phase_ph_no:
        :param int poule_gp_no:
        :param list[int] poule_gp_no:
        :param int club_cl_no:
        :param list[int] club_cl_no:
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_engagement_collection_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_engagement_collection_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_engagement_collection_with_http_info(self, **kwargs):  # noqa: E501
        """Retrieves the collection of Engagement resources.  # noqa: E501

        Retrieves the collection of Engagement resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_engagement_collection_with_http_info(async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param int page: The collection page number
        :param int competition_cp_no:
        :param list[int] competition_cp_no:
        :param int phase_ph_no:
        :param list[int] phase_ph_no:
        :param int poule_gp_no:
        :param list[int] poule_gp_no:
        :param int club_cl_no:
        :param list[int] club_cl_no:
        :return: InlineResponse2009
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['page', 'competition_cp_no', 'competition_cp_no', 'phase_ph_no', 'phase_ph_no', 'poule_gp_no', 'poule_gp_no', 'club_cl_no', 'club_cl_no']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_engagement_collection" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'page' in params:
            query_params.append(('page', params['page']))  # noqa: E501
        if 'competition_cp_no' in params:
            query_params.append(('competition.cp_no', params['competition_cp_no']))  # noqa: E501
        if 'competition_cp_no' in params:
            query_params.append(('competition.cp_no[]', params['competition_cp_no']))  # noqa: E501
            collection_formats['competition.cp_no[]'] = 'multi'  # noqa: E501
        if 'phase_ph_no' in params:
            query_params.append(('phase.ph_no', params['phase_ph_no']))  # noqa: E501
        if 'phase_ph_no' in params:
            query_params.append(('phase.ph_no[]', params['phase_ph_no']))  # noqa: E501
            collection_formats['phase.ph_no[]'] = 'multi'  # noqa: E501
        if 'poule_gp_no' in params:
            query_params.append(('poule.gp_no', params['poule_gp_no']))  # noqa: E501
        if 'poule_gp_no' in params:
            query_params.append(('poule.gp_no[]', params['poule_gp_no']))  # noqa: E501
            collection_formats['poule.gp_no[]'] = 'multi'  # noqa: E501
        if 'club_cl_no' in params:
            query_params.append(('club.cl_no', params['club_cl_no']))  # noqa: E501
        if 'club_cl_no' in params:
            query_params.append(('club.cl_no[]', params['club_cl_no']))  # noqa: E501
            collection_formats['club.cl_no[]'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/ld+json', 'application/json', 'text/html'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/api/engagements', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2009',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
