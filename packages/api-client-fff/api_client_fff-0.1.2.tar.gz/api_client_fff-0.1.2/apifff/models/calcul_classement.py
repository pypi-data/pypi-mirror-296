# coding: utf-8

"""

    # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CalculClassement(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'poule': 'str',
        'cj_no': 'int',
        'cj_place': 'int',
        'cj_nb_but_pour': 'int',
        'cj_nb_but_contre': 'int',
        'cj_place_but_pour': 'int',
        'cj_place_but_contre': 'int',
        'date_match': 'datetime',
        'equipe': 'str',
        'competition': 'str',
        'id': 'int'
    }

    attribute_map = {
        'poule': 'poule',
        'cj_no': 'cj_no',
        'cj_place': 'cj_place',
        'cj_nb_but_pour': 'cj_nb_but_pour',
        'cj_nb_but_contre': 'cj_nb_but_contre',
        'cj_place_but_pour': 'cj_place_but_pour',
        'cj_place_but_contre': 'cj_place_but_contre',
        'date_match': 'date_match',
        'equipe': 'equipe',
        'competition': 'competition',
        'id': 'id'
    }

    def __init__(self, poule=None, cj_no=None, cj_place=None, cj_nb_but_pour=None, cj_nb_but_contre=None, cj_place_but_pour=None, cj_place_but_contre=None, date_match=None, equipe=None, competition=None, id=None):  # noqa: E501
        """CalculClassement - a model defined in Swagger"""  # noqa: E501
        self._poule = None
        self._cj_no = None
        self._cj_place = None
        self._cj_nb_but_pour = None
        self._cj_nb_but_contre = None
        self._cj_place_but_pour = None
        self._cj_place_but_contre = None
        self._date_match = None
        self._equipe = None
        self._competition = None
        self._id = None
        self.discriminator = None
        if poule is not None:
            self.poule = poule
        if cj_no is not None:
            self.cj_no = cj_no
        if cj_place is not None:
            self.cj_place = cj_place
        if cj_nb_but_pour is not None:
            self.cj_nb_but_pour = cj_nb_but_pour
        if cj_nb_but_contre is not None:
            self.cj_nb_but_contre = cj_nb_but_contre
        if cj_place_but_pour is not None:
            self.cj_place_but_pour = cj_place_but_pour
        if cj_place_but_contre is not None:
            self.cj_place_but_contre = cj_place_but_contre
        if date_match is not None:
            self.date_match = date_match
        if equipe is not None:
            self.equipe = equipe
        if competition is not None:
            self.competition = competition
        if id is not None:
            self.id = id

    @property
    def poule(self):
        """Gets the poule of this CalculClassement.  # noqa: E501


        :return: The poule of this CalculClassement.  # noqa: E501
        :rtype: str
        """
        return self._poule

    @poule.setter
    def poule(self, poule):
        """Sets the poule of this CalculClassement.


        :param poule: The poule of this CalculClassement.  # noqa: E501
        :type: str
        """

        self._poule = poule

    @property
    def cj_no(self):
        """Gets the cj_no of this CalculClassement.  # noqa: E501


        :return: The cj_no of this CalculClassement.  # noqa: E501
        :rtype: int
        """
        return self._cj_no

    @cj_no.setter
    def cj_no(self, cj_no):
        """Sets the cj_no of this CalculClassement.


        :param cj_no: The cj_no of this CalculClassement.  # noqa: E501
        :type: int
        """

        self._cj_no = cj_no

    @property
    def cj_place(self):
        """Gets the cj_place of this CalculClassement.  # noqa: E501


        :return: The cj_place of this CalculClassement.  # noqa: E501
        :rtype: int
        """
        return self._cj_place

    @cj_place.setter
    def cj_place(self, cj_place):
        """Sets the cj_place of this CalculClassement.


        :param cj_place: The cj_place of this CalculClassement.  # noqa: E501
        :type: int
        """

        self._cj_place = cj_place

    @property
    def cj_nb_but_pour(self):
        """Gets the cj_nb_but_pour of this CalculClassement.  # noqa: E501


        :return: The cj_nb_but_pour of this CalculClassement.  # noqa: E501
        :rtype: int
        """
        return self._cj_nb_but_pour

    @cj_nb_but_pour.setter
    def cj_nb_but_pour(self, cj_nb_but_pour):
        """Sets the cj_nb_but_pour of this CalculClassement.


        :param cj_nb_but_pour: The cj_nb_but_pour of this CalculClassement.  # noqa: E501
        :type: int
        """

        self._cj_nb_but_pour = cj_nb_but_pour

    @property
    def cj_nb_but_contre(self):
        """Gets the cj_nb_but_contre of this CalculClassement.  # noqa: E501


        :return: The cj_nb_but_contre of this CalculClassement.  # noqa: E501
        :rtype: int
        """
        return self._cj_nb_but_contre

    @cj_nb_but_contre.setter
    def cj_nb_but_contre(self, cj_nb_but_contre):
        """Sets the cj_nb_but_contre of this CalculClassement.


        :param cj_nb_but_contre: The cj_nb_but_contre of this CalculClassement.  # noqa: E501
        :type: int
        """

        self._cj_nb_but_contre = cj_nb_but_contre

    @property
    def cj_place_but_pour(self):
        """Gets the cj_place_but_pour of this CalculClassement.  # noqa: E501


        :return: The cj_place_but_pour of this CalculClassement.  # noqa: E501
        :rtype: int
        """
        return self._cj_place_but_pour

    @cj_place_but_pour.setter
    def cj_place_but_pour(self, cj_place_but_pour):
        """Sets the cj_place_but_pour of this CalculClassement.


        :param cj_place_but_pour: The cj_place_but_pour of this CalculClassement.  # noqa: E501
        :type: int
        """

        self._cj_place_but_pour = cj_place_but_pour

    @property
    def cj_place_but_contre(self):
        """Gets the cj_place_but_contre of this CalculClassement.  # noqa: E501


        :return: The cj_place_but_contre of this CalculClassement.  # noqa: E501
        :rtype: int
        """
        return self._cj_place_but_contre

    @cj_place_but_contre.setter
    def cj_place_but_contre(self, cj_place_but_contre):
        """Sets the cj_place_but_contre of this CalculClassement.


        :param cj_place_but_contre: The cj_place_but_contre of this CalculClassement.  # noqa: E501
        :type: int
        """

        self._cj_place_but_contre = cj_place_but_contre

    @property
    def date_match(self):
        """Gets the date_match of this CalculClassement.  # noqa: E501


        :return: The date_match of this CalculClassement.  # noqa: E501
        :rtype: datetime
        """
        return self._date_match

    @date_match.setter
    def date_match(self, date_match):
        """Sets the date_match of this CalculClassement.


        :param date_match: The date_match of this CalculClassement.  # noqa: E501
        :type: datetime
        """

        self._date_match = date_match

    @property
    def equipe(self):
        """Gets the equipe of this CalculClassement.  # noqa: E501


        :return: The equipe of this CalculClassement.  # noqa: E501
        :rtype: str
        """
        return self._equipe

    @equipe.setter
    def equipe(self, equipe):
        """Sets the equipe of this CalculClassement.


        :param equipe: The equipe of this CalculClassement.  # noqa: E501
        :type: str
        """

        self._equipe = equipe

    @property
    def competition(self):
        """Gets the competition of this CalculClassement.  # noqa: E501


        :return: The competition of this CalculClassement.  # noqa: E501
        :rtype: str
        """
        return self._competition

    @competition.setter
    def competition(self, competition):
        """Sets the competition of this CalculClassement.


        :param competition: The competition of this CalculClassement.  # noqa: E501
        :type: str
        """

        self._competition = competition

    @property
    def id(self):
        """Gets the id of this CalculClassement.  # noqa: E501


        :return: The id of this CalculClassement.  # noqa: E501
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CalculClassement.


        :param id: The id of this CalculClassement.  # noqa: E501
        :type: int
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CalculClassement, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalculClassement):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
