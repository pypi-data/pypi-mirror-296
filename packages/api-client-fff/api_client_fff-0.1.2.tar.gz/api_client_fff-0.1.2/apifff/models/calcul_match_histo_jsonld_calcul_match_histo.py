# coding: utf-8

"""

    # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CalculMatchHistoJsonldCalculMatchHisto(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'type': 'str',
        'context': 'OneOfCalculMatchHistoJsonldCalculMatchHistoContext',
        'nb_ma_win': 'int',
        'nb_ma_win_eq2': 'int',
        'nb_ma_equal': 'int',
        'match1': 'MatchEntityJsonldCalculMatchHisto',
        'match2': 'AnyOfCalculMatchHistoJsonldCalculMatchHistoMatch2',
        'match3': 'AnyOfCalculMatchHistoJsonldCalculMatchHistoMatch3',
        'match4': 'AnyOfCalculMatchHistoJsonldCalculMatchHistoMatch4',
        'match5': 'AnyOfCalculMatchHistoJsonldCalculMatchHistoMatch5'
    }

    attribute_map = {
        'id': '@id',
        'type': '@type',
        'context': '@context',
        'nb_ma_win': 'nb_ma_win',
        'nb_ma_win_eq2': 'nb_ma_win_eq2',
        'nb_ma_equal': 'nb_ma_equal',
        'match1': 'match1',
        'match2': 'match2',
        'match3': 'match3',
        'match4': 'match4',
        'match5': 'match5'
    }

    def __init__(self, id=None, type=None, context=None, nb_ma_win=None, nb_ma_win_eq2=None, nb_ma_equal=None, match1=None, match2=None, match3=None, match4=None, match5=None):  # noqa: E501
        """CalculMatchHistoJsonldCalculMatchHisto - a model defined in Swagger"""  # noqa: E501
        self._id = None
        self._type = None
        self._context = None
        self._nb_ma_win = None
        self._nb_ma_win_eq2 = None
        self._nb_ma_equal = None
        self._match1 = None
        self._match2 = None
        self._match3 = None
        self._match4 = None
        self._match5 = None
        self.discriminator = None
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if context is not None:
            self.context = context
        if nb_ma_win is not None:
            self.nb_ma_win = nb_ma_win
        if nb_ma_win_eq2 is not None:
            self.nb_ma_win_eq2 = nb_ma_win_eq2
        if nb_ma_equal is not None:
            self.nb_ma_equal = nb_ma_equal
        if match1 is not None:
            self.match1 = match1
        if match2 is not None:
            self.match2 = match2
        if match3 is not None:
            self.match3 = match3
        if match4 is not None:
            self.match4 = match4
        if match5 is not None:
            self.match5 = match5

    @property
    def id(self):
        """Gets the id of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501


        :return: The id of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CalculMatchHistoJsonldCalculMatchHisto.


        :param id: The id of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501


        :return: The type of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CalculMatchHistoJsonldCalculMatchHisto.


        :param type: The type of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def context(self):
        """Gets the context of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501


        :return: The context of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501
        :rtype: OneOfCalculMatchHistoJsonldCalculMatchHistoContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this CalculMatchHistoJsonldCalculMatchHisto.


        :param context: The context of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501
        :type: OneOfCalculMatchHistoJsonldCalculMatchHistoContext
        """

        self._context = context

    @property
    def nb_ma_win(self):
        """Gets the nb_ma_win of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501


        :return: The nb_ma_win of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501
        :rtype: int
        """
        return self._nb_ma_win

    @nb_ma_win.setter
    def nb_ma_win(self, nb_ma_win):
        """Sets the nb_ma_win of this CalculMatchHistoJsonldCalculMatchHisto.


        :param nb_ma_win: The nb_ma_win of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501
        :type: int
        """

        self._nb_ma_win = nb_ma_win

    @property
    def nb_ma_win_eq2(self):
        """Gets the nb_ma_win_eq2 of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501


        :return: The nb_ma_win_eq2 of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501
        :rtype: int
        """
        return self._nb_ma_win_eq2

    @nb_ma_win_eq2.setter
    def nb_ma_win_eq2(self, nb_ma_win_eq2):
        """Sets the nb_ma_win_eq2 of this CalculMatchHistoJsonldCalculMatchHisto.


        :param nb_ma_win_eq2: The nb_ma_win_eq2 of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501
        :type: int
        """

        self._nb_ma_win_eq2 = nb_ma_win_eq2

    @property
    def nb_ma_equal(self):
        """Gets the nb_ma_equal of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501


        :return: The nb_ma_equal of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501
        :rtype: int
        """
        return self._nb_ma_equal

    @nb_ma_equal.setter
    def nb_ma_equal(self, nb_ma_equal):
        """Sets the nb_ma_equal of this CalculMatchHistoJsonldCalculMatchHisto.


        :param nb_ma_equal: The nb_ma_equal of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501
        :type: int
        """

        self._nb_ma_equal = nb_ma_equal

    @property
    def match1(self):
        """Gets the match1 of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501


        :return: The match1 of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501
        :rtype: MatchEntityJsonldCalculMatchHisto
        """
        return self._match1

    @match1.setter
    def match1(self, match1):
        """Sets the match1 of this CalculMatchHistoJsonldCalculMatchHisto.


        :param match1: The match1 of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501
        :type: MatchEntityJsonldCalculMatchHisto
        """

        self._match1 = match1

    @property
    def match2(self):
        """Gets the match2 of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501


        :return: The match2 of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501
        :rtype: AnyOfCalculMatchHistoJsonldCalculMatchHistoMatch2
        """
        return self._match2

    @match2.setter
    def match2(self, match2):
        """Sets the match2 of this CalculMatchHistoJsonldCalculMatchHisto.


        :param match2: The match2 of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501
        :type: AnyOfCalculMatchHistoJsonldCalculMatchHistoMatch2
        """

        self._match2 = match2

    @property
    def match3(self):
        """Gets the match3 of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501


        :return: The match3 of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501
        :rtype: AnyOfCalculMatchHistoJsonldCalculMatchHistoMatch3
        """
        return self._match3

    @match3.setter
    def match3(self, match3):
        """Sets the match3 of this CalculMatchHistoJsonldCalculMatchHisto.


        :param match3: The match3 of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501
        :type: AnyOfCalculMatchHistoJsonldCalculMatchHistoMatch3
        """

        self._match3 = match3

    @property
    def match4(self):
        """Gets the match4 of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501


        :return: The match4 of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501
        :rtype: AnyOfCalculMatchHistoJsonldCalculMatchHistoMatch4
        """
        return self._match4

    @match4.setter
    def match4(self, match4):
        """Sets the match4 of this CalculMatchHistoJsonldCalculMatchHisto.


        :param match4: The match4 of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501
        :type: AnyOfCalculMatchHistoJsonldCalculMatchHistoMatch4
        """

        self._match4 = match4

    @property
    def match5(self):
        """Gets the match5 of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501


        :return: The match5 of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501
        :rtype: AnyOfCalculMatchHistoJsonldCalculMatchHistoMatch5
        """
        return self._match5

    @match5.setter
    def match5(self, match5):
        """Sets the match5 of this CalculMatchHistoJsonldCalculMatchHisto.


        :param match5: The match5 of this CalculMatchHistoJsonldCalculMatchHisto.  # noqa: E501
        :type: AnyOfCalculMatchHistoJsonldCalculMatchHistoMatch5
        """

        self._match5 = match5

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CalculMatchHistoJsonldCalculMatchHisto, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CalculMatchHistoJsonldCalculMatchHisto):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
