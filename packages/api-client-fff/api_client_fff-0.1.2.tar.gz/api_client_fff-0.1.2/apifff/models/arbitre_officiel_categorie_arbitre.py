# coding: utf-8

"""

    # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class ArbitreOfficielCategorieArbitre(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'ac_dat_deb': 'datetime',
        'ac_dat_fin': 'datetime',
        'officiel_categorie': 'OfficielCategorieArbitre'
    }

    attribute_map = {
        'ac_dat_deb': 'ac_dat_deb',
        'ac_dat_fin': 'ac_dat_fin',
        'officiel_categorie': 'officiel_categorie'
    }

    def __init__(self, ac_dat_deb=None, ac_dat_fin=None, officiel_categorie=None):  # noqa: E501
        """ArbitreOfficielCategorieArbitre - a model defined in Swagger"""  # noqa: E501
        self._ac_dat_deb = None
        self._ac_dat_fin = None
        self._officiel_categorie = None
        self.discriminator = None
        if ac_dat_deb is not None:
            self.ac_dat_deb = ac_dat_deb
        if ac_dat_fin is not None:
            self.ac_dat_fin = ac_dat_fin
        if officiel_categorie is not None:
            self.officiel_categorie = officiel_categorie

    @property
    def ac_dat_deb(self):
        """Gets the ac_dat_deb of this ArbitreOfficielCategorieArbitre.  # noqa: E501


        :return: The ac_dat_deb of this ArbitreOfficielCategorieArbitre.  # noqa: E501
        :rtype: datetime
        """
        return self._ac_dat_deb

    @ac_dat_deb.setter
    def ac_dat_deb(self, ac_dat_deb):
        """Sets the ac_dat_deb of this ArbitreOfficielCategorieArbitre.


        :param ac_dat_deb: The ac_dat_deb of this ArbitreOfficielCategorieArbitre.  # noqa: E501
        :type: datetime
        """

        self._ac_dat_deb = ac_dat_deb

    @property
    def ac_dat_fin(self):
        """Gets the ac_dat_fin of this ArbitreOfficielCategorieArbitre.  # noqa: E501


        :return: The ac_dat_fin of this ArbitreOfficielCategorieArbitre.  # noqa: E501
        :rtype: datetime
        """
        return self._ac_dat_fin

    @ac_dat_fin.setter
    def ac_dat_fin(self, ac_dat_fin):
        """Sets the ac_dat_fin of this ArbitreOfficielCategorieArbitre.


        :param ac_dat_fin: The ac_dat_fin of this ArbitreOfficielCategorieArbitre.  # noqa: E501
        :type: datetime
        """

        self._ac_dat_fin = ac_dat_fin

    @property
    def officiel_categorie(self):
        """Gets the officiel_categorie of this ArbitreOfficielCategorieArbitre.  # noqa: E501


        :return: The officiel_categorie of this ArbitreOfficielCategorieArbitre.  # noqa: E501
        :rtype: OfficielCategorieArbitre
        """
        return self._officiel_categorie

    @officiel_categorie.setter
    def officiel_categorie(self, officiel_categorie):
        """Sets the officiel_categorie of this ArbitreOfficielCategorieArbitre.


        :param officiel_categorie: The officiel_categorie of this ArbitreOfficielCategorieArbitre.  # noqa: E501
        :type: OfficielCategorieArbitre
        """

        self._officiel_categorie = officiel_categorie

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(ArbitreOfficielCategorieArbitre, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ArbitreOfficielCategorieArbitre):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
