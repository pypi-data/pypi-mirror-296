# coding: utf-8

"""

    # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PouleCompet(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stage_number': 'int',
        'name': 'str',
        'cdg': 'CdgCompet',
        'diffusable': 'bool',
        'matchs': 'bool'
    }

    attribute_map = {
        'stage_number': 'stage_number',
        'name': 'name',
        'cdg': 'cdg',
        'diffusable': 'diffusable',
        'matchs': 'matchs'
    }

    def __init__(self, stage_number=None, name=None, cdg=None, diffusable=None, matchs=None):  # noqa: E501
        """PouleCompet - a model defined in Swagger"""  # noqa: E501
        self._stage_number = None
        self._name = None
        self._cdg = None
        self._diffusable = None
        self._matchs = None
        self.discriminator = None
        if stage_number is not None:
            self.stage_number = stage_number
        if name is not None:
            self.name = name
        if cdg is not None:
            self.cdg = cdg
        if diffusable is not None:
            self.diffusable = diffusable
        if matchs is not None:
            self.matchs = matchs

    @property
    def stage_number(self):
        """Gets the stage_number of this PouleCompet.  # noqa: E501


        :return: The stage_number of this PouleCompet.  # noqa: E501
        :rtype: int
        """
        return self._stage_number

    @stage_number.setter
    def stage_number(self, stage_number):
        """Sets the stage_number of this PouleCompet.


        :param stage_number: The stage_number of this PouleCompet.  # noqa: E501
        :type: int
        """

        self._stage_number = stage_number

    @property
    def name(self):
        """Gets the name of this PouleCompet.  # noqa: E501


        :return: The name of this PouleCompet.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PouleCompet.


        :param name: The name of this PouleCompet.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def cdg(self):
        """Gets the cdg of this PouleCompet.  # noqa: E501


        :return: The cdg of this PouleCompet.  # noqa: E501
        :rtype: CdgCompet
        """
        return self._cdg

    @cdg.setter
    def cdg(self, cdg):
        """Sets the cdg of this PouleCompet.


        :param cdg: The cdg of this PouleCompet.  # noqa: E501
        :type: CdgCompet
        """

        self._cdg = cdg

    @property
    def diffusable(self):
        """Gets the diffusable of this PouleCompet.  # noqa: E501


        :return: The diffusable of this PouleCompet.  # noqa: E501
        :rtype: bool
        """
        return self._diffusable

    @diffusable.setter
    def diffusable(self, diffusable):
        """Sets the diffusable of this PouleCompet.


        :param diffusable: The diffusable of this PouleCompet.  # noqa: E501
        :type: bool
        """

        self._diffusable = diffusable

    @property
    def matchs(self):
        """Gets the matchs of this PouleCompet.  # noqa: E501


        :return: The matchs of this PouleCompet.  # noqa: E501
        :rtype: bool
        """
        return self._matchs

    @matchs.setter
    def matchs(self, matchs):
        """Sets the matchs of this PouleCompet.


        :param matchs: The matchs of this PouleCompet.  # noqa: E501
        :type: bool
        """

        self._matchs = matchs

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PouleCompet, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PouleCompet):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
