# coding: utf-8

"""

    # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class CompetMatch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'cp_no': 'int',
        'season': 'int',
        'type': 'str',
        'name': 'str',
        'level': 'str',
        'cdg': 'CdgMatch',
        'external_updated_at': 'datetime'
    }

    attribute_map = {
        'cp_no': 'cp_no',
        'season': 'season',
        'type': 'type',
        'name': 'name',
        'level': 'level',
        'cdg': 'cdg',
        'external_updated_at': 'external_updated_at'
    }

    def __init__(self, cp_no=None, season=None, type=None, name=None, level=None, cdg=None, external_updated_at=None):  # noqa: E501
        """CompetMatch - a model defined in Swagger"""  # noqa: E501
        self._cp_no = None
        self._season = None
        self._type = None
        self._name = None
        self._level = None
        self._cdg = None
        self._external_updated_at = None
        self.discriminator = None
        if cp_no is not None:
            self.cp_no = cp_no
        if season is not None:
            self.season = season
        if type is not None:
            self.type = type
        if name is not None:
            self.name = name
        if level is not None:
            self.level = level
        if cdg is not None:
            self.cdg = cdg
        if external_updated_at is not None:
            self.external_updated_at = external_updated_at

    @property
    def cp_no(self):
        """Gets the cp_no of this CompetMatch.  # noqa: E501


        :return: The cp_no of this CompetMatch.  # noqa: E501
        :rtype: int
        """
        return self._cp_no

    @cp_no.setter
    def cp_no(self, cp_no):
        """Sets the cp_no of this CompetMatch.


        :param cp_no: The cp_no of this CompetMatch.  # noqa: E501
        :type: int
        """

        self._cp_no = cp_no

    @property
    def season(self):
        """Gets the season of this CompetMatch.  # noqa: E501


        :return: The season of this CompetMatch.  # noqa: E501
        :rtype: int
        """
        return self._season

    @season.setter
    def season(self, season):
        """Sets the season of this CompetMatch.


        :param season: The season of this CompetMatch.  # noqa: E501
        :type: int
        """

        self._season = season

    @property
    def type(self):
        """Gets the type of this CompetMatch.  # noqa: E501


        :return: The type of this CompetMatch.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this CompetMatch.


        :param type: The type of this CompetMatch.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def name(self):
        """Gets the name of this CompetMatch.  # noqa: E501


        :return: The name of this CompetMatch.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CompetMatch.


        :param name: The name of this CompetMatch.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def level(self):
        """Gets the level of this CompetMatch.  # noqa: E501


        :return: The level of this CompetMatch.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this CompetMatch.


        :param level: The level of this CompetMatch.  # noqa: E501
        :type: str
        """

        self._level = level

    @property
    def cdg(self):
        """Gets the cdg of this CompetMatch.  # noqa: E501


        :return: The cdg of this CompetMatch.  # noqa: E501
        :rtype: CdgMatch
        """
        return self._cdg

    @cdg.setter
    def cdg(self, cdg):
        """Sets the cdg of this CompetMatch.


        :param cdg: The cdg of this CompetMatch.  # noqa: E501
        :type: CdgMatch
        """

        self._cdg = cdg

    @property
    def external_updated_at(self):
        """Gets the external_updated_at of this CompetMatch.  # noqa: E501


        :return: The external_updated_at of this CompetMatch.  # noqa: E501
        :rtype: datetime
        """
        return self._external_updated_at

    @external_updated_at.setter
    def external_updated_at(self, external_updated_at):
        """Sets the external_updated_at of this CompetMatch.


        :param external_updated_at: The external_updated_at of this CompetMatch.  # noqa: E501
        :type: datetime
        """

        self._external_updated_at = external_updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(CompetMatch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CompetMatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
