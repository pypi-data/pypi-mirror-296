# coding: utf-8

"""

    # Authentication  <!-- ReDoc-Inject: <security-definitions> -->  # noqa: E501

    OpenAPI spec version: 0.0.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PouleJsonldMatch(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'context': 'OneOfPouleJsonldMatchContext',
        'id': 'str',
        'type': 'str',
        'stage_number': 'int',
        'name': 'str',
        'external_updated_at': 'datetime',
        'poule_unique': 'bool',
        'at_least_one_match_resultat': 'bool'
    }

    attribute_map = {
        'context': '@context',
        'id': '@id',
        'type': '@type',
        'stage_number': 'stage_number',
        'name': 'name',
        'external_updated_at': 'external_updated_at',
        'poule_unique': 'poule_unique',
        'at_least_one_match_resultat': 'at_least_one_match_resultat'
    }

    def __init__(self, context=None, id=None, type=None, stage_number=None, name=None, external_updated_at=None, poule_unique=None, at_least_one_match_resultat=None):  # noqa: E501
        """PouleJsonldMatch - a model defined in Swagger"""  # noqa: E501
        self._context = None
        self._id = None
        self._type = None
        self._stage_number = None
        self._name = None
        self._external_updated_at = None
        self._poule_unique = None
        self._at_least_one_match_resultat = None
        self.discriminator = None
        if context is not None:
            self.context = context
        if id is not None:
            self.id = id
        if type is not None:
            self.type = type
        if stage_number is not None:
            self.stage_number = stage_number
        if name is not None:
            self.name = name
        if external_updated_at is not None:
            self.external_updated_at = external_updated_at
        if poule_unique is not None:
            self.poule_unique = poule_unique
        if at_least_one_match_resultat is not None:
            self.at_least_one_match_resultat = at_least_one_match_resultat

    @property
    def context(self):
        """Gets the context of this PouleJsonldMatch.  # noqa: E501


        :return: The context of this PouleJsonldMatch.  # noqa: E501
        :rtype: OneOfPouleJsonldMatchContext
        """
        return self._context

    @context.setter
    def context(self, context):
        """Sets the context of this PouleJsonldMatch.


        :param context: The context of this PouleJsonldMatch.  # noqa: E501
        :type: OneOfPouleJsonldMatchContext
        """

        self._context = context

    @property
    def id(self):
        """Gets the id of this PouleJsonldMatch.  # noqa: E501


        :return: The id of this PouleJsonldMatch.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this PouleJsonldMatch.


        :param id: The id of this PouleJsonldMatch.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def type(self):
        """Gets the type of this PouleJsonldMatch.  # noqa: E501


        :return: The type of this PouleJsonldMatch.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PouleJsonldMatch.


        :param type: The type of this PouleJsonldMatch.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def stage_number(self):
        """Gets the stage_number of this PouleJsonldMatch.  # noqa: E501


        :return: The stage_number of this PouleJsonldMatch.  # noqa: E501
        :rtype: int
        """
        return self._stage_number

    @stage_number.setter
    def stage_number(self, stage_number):
        """Sets the stage_number of this PouleJsonldMatch.


        :param stage_number: The stage_number of this PouleJsonldMatch.  # noqa: E501
        :type: int
        """

        self._stage_number = stage_number

    @property
    def name(self):
        """Gets the name of this PouleJsonldMatch.  # noqa: E501


        :return: The name of this PouleJsonldMatch.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PouleJsonldMatch.


        :param name: The name of this PouleJsonldMatch.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def external_updated_at(self):
        """Gets the external_updated_at of this PouleJsonldMatch.  # noqa: E501


        :return: The external_updated_at of this PouleJsonldMatch.  # noqa: E501
        :rtype: datetime
        """
        return self._external_updated_at

    @external_updated_at.setter
    def external_updated_at(self, external_updated_at):
        """Sets the external_updated_at of this PouleJsonldMatch.


        :param external_updated_at: The external_updated_at of this PouleJsonldMatch.  # noqa: E501
        :type: datetime
        """

        self._external_updated_at = external_updated_at

    @property
    def poule_unique(self):
        """Gets the poule_unique of this PouleJsonldMatch.  # noqa: E501


        :return: The poule_unique of this PouleJsonldMatch.  # noqa: E501
        :rtype: bool
        """
        return self._poule_unique

    @poule_unique.setter
    def poule_unique(self, poule_unique):
        """Sets the poule_unique of this PouleJsonldMatch.


        :param poule_unique: The poule_unique of this PouleJsonldMatch.  # noqa: E501
        :type: bool
        """

        self._poule_unique = poule_unique

    @property
    def at_least_one_match_resultat(self):
        """Gets the at_least_one_match_resultat of this PouleJsonldMatch.  # noqa: E501


        :return: The at_least_one_match_resultat of this PouleJsonldMatch.  # noqa: E501
        :rtype: bool
        """
        return self._at_least_one_match_resultat

    @at_least_one_match_resultat.setter
    def at_least_one_match_resultat(self, at_least_one_match_resultat):
        """Sets the at_least_one_match_resultat of this PouleJsonldMatch.


        :param at_least_one_match_resultat: The at_least_one_match_resultat of this PouleJsonldMatch.  # noqa: E501
        :type: bool
        """

        self._at_least_one_match_resultat = at_least_one_match_resultat

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PouleJsonldMatch, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PouleJsonldMatch):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
