

# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

from __future__ import annotations
import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import threading
import itertools
import traceback
import typing
import platform

# Used for default argument values
_DEFAULT = object() # type: typing.Any


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_uint64),
        ("len", ctypes.c_uint64),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def default():
        return _UniffiRustBuffer(0, 0, None)

    @staticmethod
    def alloc(size):
        return _uniffi_rust_call(_UniffiLib.ffi_wukong_sdk_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _uniffi_rust_call(_UniffiLib.ffi_wukong_sdk_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _uniffi_rust_call(_UniffiLib.ffi_wukong_sdk_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_UNEXPECTED_ERROR = 2

    @staticmethod
    def default():
        return _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer.default())

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
            return "_UniffiRustCallStatus(CALL_UNEXPECTED_ERROR)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _uniffi_rust_call(fn, *args):
    # Call a rust function
    return _uniffi_rust_call_with_error(None, fn, *args)

def _uniffi_rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus.default()

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_uniffi_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

def _uniffi_trait_interface_call(call_status, make_call, write_return_value):
    try:
        return write_return_value(make_call())
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))

def _uniffi_trait_interface_call_with_error(call_status, make_call, write_return_value, error_type, lower_error):
    try:
        try:
            return write_return_value(make_call())
        except error_type as e:
            call_status.code = _UniffiRustCallStatus.CALL_ERROR
            call_status.error_buf = lower_error(e)
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))
class _UniffiHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._map = {}  # type: Dict[Handle, Any]
        self._lock = threading.Lock()
        self._counter = itertools.count()

    def insert(self, obj):
        with self._lock:
            handle = next(self._counter)
            self._map[handle] = obj
            return handle

    def get(self, handle):
        try:
            with self._lock:
                return self._map[handle]
        except KeyError:
            raise InternalError("_UniffiHandleMap.get: Invalid handle")

    def remove(self, handle):
        try:
            with self._lock:
                return self._map.pop(handle)
        except KeyError:
            raise InternalError("_UniffiHandleMap.remove: Invalid handle")

    def __len__(self):
        return len(self._map)
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_uint64, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("wukong_sdk")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 26
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_wukong_sdk_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_wukong_sdk_checksum_func_hello_ffi() != 6235:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_running() != 5762:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_stop() != 48808:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_account() != 7446:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_position() != 13245:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_config_symbols() != 19041:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_get_benchmark() != 62974:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_get_symbols() != 13710:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_get_trade_time() != 54425:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_get_klines() != 27679:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_get_mark_price() != 63526:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_get_funding_rate() != 22728:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_adjust_leverage() != 18422:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_limit_long_buy() != 7848:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_limit_long_sell() != 58476:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_limit_short_buy() != 52391:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_limit_short_sell() != 7446:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_market_long_buy() != 12975:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_market_long_sell() != 63719:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_market_short_buy() != 64242:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_market_short_sell() != 47914:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_cancel_order() != 35121:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_debug() != 29607:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_info() != 47589:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_warn() != 58646:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_engine_error() != 41802:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_strategy_initialize() != 32456:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_strategy_day_begin() != 25198:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_strategy_hour_begin() != 21506:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_strategy_minute_begin() != 48400:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_strategy_minute_end() != 39161:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_strategy_hour_end() != 55736:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_strategy_day_end() != 23739:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_strategy_stop() != 54700:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_wukong_sdk_checksum_method_strategy_callme() != 20138:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int8,
)
_UNIFFI_FOREIGN_FUTURE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
_UNIFFI_CALLBACK_INTERFACE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
class _UniffiForeignFuture(ctypes.Structure):
    _fields_ = [
        ("handle", ctypes.c_uint64),
        ("free", _UNIFFI_FOREIGN_FUTURE_FREE),
    ]
class _UniffiForeignFutureStructU8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU8,
)
class _UniffiForeignFutureStructI8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI8,
)
class _UniffiForeignFutureStructU16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU16,
)
class _UniffiForeignFutureStructI16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI16,
)
class _UniffiForeignFutureStructU32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU32,
)
class _UniffiForeignFutureStructI32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI32,
)
class _UniffiForeignFutureStructU64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU64,
)
class _UniffiForeignFutureStructI64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI64,
)
class _UniffiForeignFutureStructF32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_float),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF32,
)
class _UniffiForeignFutureStructF64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_double),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF64,
)
class _UniffiForeignFutureStructPointer(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_void_p),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_POINTER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructPointer,
)
class _UniffiForeignFutureStructRustBuffer(ctypes.Structure):
    _fields_ = [
        ("return_value", _UniffiRustBuffer),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructRustBuffer,
)
class _UniffiForeignFutureStructVoid(ctypes.Structure):
    _fields_ = [
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructVoid,
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.POINTER(ctypes.c_int8),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD1 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD2 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD3 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD4 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,_UniffiRustBuffer,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD5 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD6 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD7 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.POINTER(ctypes.c_int64),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_int64,ctypes.c_int64,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD9 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.POINTER(ctypes.c_double),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD10 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.POINTER(ctypes.c_double),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD11 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_int64,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD12 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_double,ctypes.c_double,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD13 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_double,ctypes.c_double,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD14 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_double,ctypes.c_double,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD15 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_double,ctypes.c_double,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_double,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD17 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_double,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD18 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_double,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD19 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_double,ctypes.POINTER(_UniffiRustBuffer),
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD20 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,_UniffiRustBuffer,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD21 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD22 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD23 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD24 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiRustBuffer,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD0 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD1 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD2 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD3 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD4 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD5 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD6 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD7 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
class _UniffiVTableCallbackInterfaceEngine(ctypes.Structure):
    _fields_ = [
        ("running", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD0),
        ("stop", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD1),
        ("account", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD2),
        ("position", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD3),
        ("config_symbols", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD4),
        ("get_benchmark", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD5),
        ("get_symbols", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD6),
        ("get_trade_time", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD7),
        ("get_klines", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD8),
        ("get_mark_price", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD9),
        ("get_funding_rate", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD10),
        ("adjust_leverage", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD11),
        ("limit_long_buy", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD12),
        ("limit_long_sell", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD13),
        ("limit_short_buy", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD14),
        ("limit_short_sell", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD15),
        ("market_long_buy", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD16),
        ("market_long_sell", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD17),
        ("market_short_buy", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD18),
        ("market_short_sell", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD19),
        ("cancel_order", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD20),
        ("debug", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD21),
        ("info", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD22),
        ("warn", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD23),
        ("error", _UNIFFI_CALLBACK_INTERFACE_ENGINE_METHOD24),
        ("uniffi_free", _UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
class _UniffiVTableCallbackInterfaceStrategy(ctypes.Structure):
    _fields_ = [
        ("initialize", _UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD0),
        ("day_begin", _UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD1),
        ("hour_begin", _UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD2),
        ("minute_begin", _UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD3),
        ("minute_end", _UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD4),
        ("hour_end", _UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD5),
        ("day_end", _UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD6),
        ("stop", _UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD7),
        ("callme", _UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD8),
        ("uniffi_free", _UNIFFI_CALLBACK_INTERFACE_FREE),
    ]
_UniffiLib.uniffi_wukong_sdk_fn_clone_engine.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_clone_engine.restype = ctypes.c_void_p
_UniffiLib.uniffi_wukong_sdk_fn_free_engine.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_free_engine.restype = None
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_running.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_running.restype = ctypes.c_int8
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_stop.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_stop.restype = None
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_account.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_account.restype = _UniffiRustBuffer
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_position.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_position.restype = _UniffiRustBuffer
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_config_symbols.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_config_symbols.restype = None
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_get_benchmark.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_get_benchmark.restype = _UniffiRustBuffer
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_get_symbols.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_get_symbols.restype = _UniffiRustBuffer
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_get_trade_time.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_get_trade_time.restype = ctypes.c_int64
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_get_klines.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_int64,
    ctypes.c_int64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_get_klines.restype = _UniffiRustBuffer
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_get_mark_price.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_get_mark_price.restype = ctypes.c_double
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_get_funding_rate.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_get_funding_rate.restype = ctypes.c_double
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_adjust_leverage.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_int64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_adjust_leverage.restype = None
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_limit_long_buy.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_double,
    ctypes.c_double,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_limit_long_buy.restype = _UniffiRustBuffer
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_limit_long_sell.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_double,
    ctypes.c_double,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_limit_long_sell.restype = _UniffiRustBuffer
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_limit_short_buy.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_double,
    ctypes.c_double,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_limit_short_buy.restype = _UniffiRustBuffer
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_limit_short_sell.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_double,
    ctypes.c_double,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_limit_short_sell.restype = _UniffiRustBuffer
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_market_long_buy.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_double,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_market_long_buy.restype = _UniffiRustBuffer
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_market_long_sell.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_double,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_market_long_sell.restype = _UniffiRustBuffer
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_market_short_buy.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_double,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_market_short_buy.restype = _UniffiRustBuffer
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_market_short_sell.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.c_double,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_market_short_sell.restype = _UniffiRustBuffer
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_cancel_order.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_cancel_order.restype = None
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_debug.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_debug.restype = None
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_info.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_info.restype = None
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_warn.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_warn.restype = None
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_error.argtypes = (
    ctypes.c_void_p,
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_engine_error.restype = None
_UniffiLib.uniffi_wukong_sdk_fn_clone_strategy.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_clone_strategy.restype = ctypes.c_void_p
_UniffiLib.uniffi_wukong_sdk_fn_free_strategy.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_free_strategy.restype = None
_UniffiLib.uniffi_wukong_sdk_fn_init_callback_vtable_strategy.argtypes = (
    ctypes.POINTER(_UniffiVTableCallbackInterfaceStrategy),
)
_UniffiLib.uniffi_wukong_sdk_fn_init_callback_vtable_strategy.restype = None
_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_initialize.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_initialize.restype = None
_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_day_begin.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_day_begin.restype = None
_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_hour_begin.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_hour_begin.restype = None
_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_minute_begin.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_minute_begin.restype = None
_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_minute_end.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_minute_end.restype = None
_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_hour_end.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_hour_end.restype = None
_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_day_end.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_day_end.restype = None
_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_stop.argtypes = (
    ctypes.c_void_p,
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_stop.restype = None
_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_callme.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_callme.restype = None
_UniffiLib.uniffi_wukong_sdk_fn_func_hello_ffi.argtypes = (
    ctypes.c_void_p,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_wukong_sdk_fn_func_hello_ffi.restype = None
_UniffiLib.ffi_wukong_sdk_rustbuffer_alloc.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_wukong_sdk_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_wukong_sdk_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_wukong_sdk_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_wukong_sdk_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_wukong_sdk_rustbuffer_free.restype = None
_UniffiLib.ffi_wukong_sdk_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_wukong_sdk_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_wukong_sdk_rust_future_poll_u8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_poll_u8.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_free_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_free_u8.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_complete_u8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_wukong_sdk_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_wukong_sdk_rust_future_poll_i8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_poll_i8.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_free_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_free_i8.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_complete_i8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_wukong_sdk_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_wukong_sdk_rust_future_poll_u16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_poll_u16.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_free_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_free_u16.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_complete_u16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_wukong_sdk_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_wukong_sdk_rust_future_poll_i16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_poll_i16.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_free_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_free_i16.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_complete_i16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_wukong_sdk_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_wukong_sdk_rust_future_poll_u32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_poll_u32.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_free_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_free_u32.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_complete_u32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_wukong_sdk_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_wukong_sdk_rust_future_poll_i32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_poll_i32.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_free_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_free_i32.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_complete_i32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_wukong_sdk_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_wukong_sdk_rust_future_poll_u64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_poll_u64.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_free_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_free_u64.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_complete_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_wukong_sdk_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_wukong_sdk_rust_future_poll_i64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_poll_i64.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_free_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_free_i64.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_complete_i64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_wukong_sdk_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_wukong_sdk_rust_future_poll_f32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_poll_f32.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_free_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_free_f32.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_complete_f32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_wukong_sdk_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_wukong_sdk_rust_future_poll_f64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_poll_f64.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_free_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_free_f64.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_complete_f64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_wukong_sdk_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_wukong_sdk_rust_future_poll_pointer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_free_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_free_pointer.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_complete_pointer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_wukong_sdk_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_wukong_sdk_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_wukong_sdk_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_wukong_sdk_rust_future_poll_void.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_poll_void.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_cancel_void.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_free_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_wukong_sdk_rust_future_free_void.restype = None
_UniffiLib.ffi_wukong_sdk_rust_future_complete_void.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_wukong_sdk_rust_future_complete_void.restype = None
_UniffiLib.uniffi_wukong_sdk_checksum_func_hello_ffi.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_func_hello_ffi.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_running.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_running.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_stop.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_stop.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_account.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_account.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_position.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_position.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_config_symbols.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_config_symbols.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_get_benchmark.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_get_benchmark.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_get_symbols.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_get_symbols.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_get_trade_time.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_get_trade_time.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_get_klines.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_get_klines.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_get_mark_price.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_get_mark_price.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_get_funding_rate.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_get_funding_rate.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_adjust_leverage.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_adjust_leverage.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_limit_long_buy.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_limit_long_buy.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_limit_long_sell.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_limit_long_sell.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_limit_short_buy.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_limit_short_buy.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_limit_short_sell.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_limit_short_sell.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_market_long_buy.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_market_long_buy.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_market_long_sell.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_market_long_sell.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_market_short_buy.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_market_short_buy.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_market_short_sell.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_market_short_sell.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_cancel_order.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_cancel_order.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_debug.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_debug.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_info.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_info.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_warn.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_warn.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_error.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_engine_error.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_strategy_initialize.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_strategy_initialize.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_strategy_day_begin.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_strategy_day_begin.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_strategy_hour_begin.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_strategy_hour_begin.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_strategy_minute_begin.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_strategy_minute_begin.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_strategy_minute_end.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_strategy_minute_end.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_strategy_hour_end.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_strategy_hour_end.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_strategy_day_end.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_strategy_day_end.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_strategy_stop.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_strategy_stop.restype = ctypes.c_uint16
_UniffiLib.uniffi_wukong_sdk_checksum_method_strategy_callme.argtypes = (
)
_UniffiLib.uniffi_wukong_sdk_checksum_method_strategy_callme.restype = ctypes.c_uint16
_UniffiLib.ffi_wukong_sdk_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_wukong_sdk_uniffi_contract_version.restype = ctypes.c_uint32

_uniffi_check_contract_api_version(_UniffiLib)
_uniffi_check_api_checksums(_UniffiLib)

# Public interface members begin here.


class _UniffiConverterInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "i64"
    VALUE_MIN = -2**63
    VALUE_MAX = 2**63

    @staticmethod
    def read(buf):
        return buf.read_i64()

    @staticmethod
    def write(value, buf):
        buf.write_i64(value)

class _UniffiConverterDouble(_UniffiConverterPrimitiveFloat):
    @staticmethod
    def read(buf):
        return buf.read_double()

    @staticmethod
    def write(value, buf):
        buf.write_double(value)

class _UniffiConverterBool:
    @classmethod
    def check_lower(cls, value):
        return not not value

    @classmethod
    def lower(cls, value):
        return 1 if value else 0

    @staticmethod
    def lift(value):
        return value != 0

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write(cls, value, buf):
        buf.write_u8(value)

class _UniffiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()



class EngineProtocol(typing.Protocol):
    def running(self, ):
        raise NotImplementedError
    def stop(self, ):
        raise NotImplementedError
    def account(self, ):
        raise NotImplementedError
    def position(self, symbol: "str"):
        raise NotImplementedError
    def config_symbols(self, benchmark: "str",symbols: "typing.List[str]"):
        raise NotImplementedError
    def get_benchmark(self, ):
        raise NotImplementedError
    def get_symbols(self, ):
        raise NotImplementedError
    def get_trade_time(self, ):
        raise NotImplementedError
    def get_klines(self, symbol: "str",begin: "int",end: "int"):
        raise NotImplementedError
    def get_mark_price(self, symbol: "str"):
        raise NotImplementedError
    def get_funding_rate(self, symbol: "str"):
        raise NotImplementedError
    def adjust_leverage(self, symbol: "str",leverage: "int"):
        raise NotImplementedError
    def limit_long_buy(self, symbol: "str",price: "float",volume: "float"):
        raise NotImplementedError
    def limit_long_sell(self, symbol: "str",price: "float",volume: "float"):
        raise NotImplementedError
    def limit_short_buy(self, symbol: "str",price: "float",volume: "float"):
        raise NotImplementedError
    def limit_short_sell(self, symbol: "str",price: "float",volume: "float"):
        raise NotImplementedError
    def market_long_buy(self, symbol: "str",amount: "float"):
        raise NotImplementedError
    def market_long_sell(self, symbol: "str",volume: "float"):
        raise NotImplementedError
    def market_short_buy(self, symbol: "str",amount: "float"):
        raise NotImplementedError
    def market_short_sell(self, symbol: "str",volume: "float"):
        raise NotImplementedError
    def cancel_order(self, symbol: "str",id: "str"):
        raise NotImplementedError
    def debug(self, msg: "str"):
        raise NotImplementedError
    def info(self, msg: "str"):
        raise NotImplementedError
    def warn(self, msg: "str"):
        raise NotImplementedError
    def error(self, msg: "str"):
        raise NotImplementedError


class Engine:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_wukong_sdk_fn_free_engine, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_wukong_sdk_fn_clone_engine, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def running(self, ) -> "bool":
        return _UniffiConverterBool.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_wukong_sdk_fn_method_engine_running,self._uniffi_clone_pointer(),)
        )





    def stop(self, ) -> None:
        _uniffi_rust_call(_UniffiLib.uniffi_wukong_sdk_fn_method_engine_stop,self._uniffi_clone_pointer(),)






    def account(self, ) -> "Account":
        return _UniffiConverterTypeAccount.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_wukong_sdk_fn_method_engine_account,self._uniffi_clone_pointer(),)
        )





    def position(self, symbol: "str") -> "Position":
        _UniffiConverterString.check_lower(symbol)
        
        return _UniffiConverterTypePosition.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_wukong_sdk_fn_method_engine_position,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(symbol))
        )





    def config_symbols(self, benchmark: "str",symbols: "typing.List[str]") -> None:
        _UniffiConverterString.check_lower(benchmark)
        
        _UniffiConverterSequenceString.check_lower(symbols)
        
        _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_engine_config_symbols,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(benchmark),
        _UniffiConverterSequenceString.lower(symbols))






    def get_benchmark(self, ) -> "str":
        return _UniffiConverterString.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_wukong_sdk_fn_method_engine_get_benchmark,self._uniffi_clone_pointer(),)
        )





    def get_symbols(self, ) -> "typing.List[str]":
        return _UniffiConverterSequenceString.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_wukong_sdk_fn_method_engine_get_symbols,self._uniffi_clone_pointer(),)
        )





    def get_trade_time(self, ) -> "int":
        return _UniffiConverterInt64.lift(
            _uniffi_rust_call(_UniffiLib.uniffi_wukong_sdk_fn_method_engine_get_trade_time,self._uniffi_clone_pointer(),)
        )





    def get_klines(self, symbol: "str",begin: "int",end: "int") -> "typing.List[KLine]":
        _UniffiConverterString.check_lower(symbol)
        
        _UniffiConverterInt64.check_lower(begin)
        
        _UniffiConverterInt64.check_lower(end)
        
        return _UniffiConverterSequenceTypeKLine.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_engine_get_klines,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(symbol),
        _UniffiConverterInt64.lower(begin),
        _UniffiConverterInt64.lower(end))
        )





    def get_mark_price(self, symbol: "str") -> "float":
        _UniffiConverterString.check_lower(symbol)
        
        return _UniffiConverterDouble.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_engine_get_mark_price,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(symbol))
        )





    def get_funding_rate(self, symbol: "str") -> "float":
        _UniffiConverterString.check_lower(symbol)
        
        return _UniffiConverterDouble.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_engine_get_funding_rate,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(symbol))
        )





    def adjust_leverage(self, symbol: "str",leverage: "int") -> None:
        _UniffiConverterString.check_lower(symbol)
        
        _UniffiConverterInt64.check_lower(leverage)
        
        _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_engine_adjust_leverage,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(symbol),
        _UniffiConverterInt64.lower(leverage))






    def limit_long_buy(self, symbol: "str",price: "float",volume: "float") -> "str":
        _UniffiConverterString.check_lower(symbol)
        
        _UniffiConverterDouble.check_lower(price)
        
        _UniffiConverterDouble.check_lower(volume)
        
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_engine_limit_long_buy,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(symbol),
        _UniffiConverterDouble.lower(price),
        _UniffiConverterDouble.lower(volume))
        )





    def limit_long_sell(self, symbol: "str",price: "float",volume: "float") -> "str":
        _UniffiConverterString.check_lower(symbol)
        
        _UniffiConverterDouble.check_lower(price)
        
        _UniffiConverterDouble.check_lower(volume)
        
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_engine_limit_long_sell,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(symbol),
        _UniffiConverterDouble.lower(price),
        _UniffiConverterDouble.lower(volume))
        )





    def limit_short_buy(self, symbol: "str",price: "float",volume: "float") -> "str":
        _UniffiConverterString.check_lower(symbol)
        
        _UniffiConverterDouble.check_lower(price)
        
        _UniffiConverterDouble.check_lower(volume)
        
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_engine_limit_short_buy,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(symbol),
        _UniffiConverterDouble.lower(price),
        _UniffiConverterDouble.lower(volume))
        )





    def limit_short_sell(self, symbol: "str",price: "float",volume: "float") -> "str":
        _UniffiConverterString.check_lower(symbol)
        
        _UniffiConverterDouble.check_lower(price)
        
        _UniffiConverterDouble.check_lower(volume)
        
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_engine_limit_short_sell,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(symbol),
        _UniffiConverterDouble.lower(price),
        _UniffiConverterDouble.lower(volume))
        )





    def market_long_buy(self, symbol: "str",amount: "float") -> "str":
        _UniffiConverterString.check_lower(symbol)
        
        _UniffiConverterDouble.check_lower(amount)
        
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_engine_market_long_buy,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(symbol),
        _UniffiConverterDouble.lower(amount))
        )





    def market_long_sell(self, symbol: "str",volume: "float") -> "str":
        _UniffiConverterString.check_lower(symbol)
        
        _UniffiConverterDouble.check_lower(volume)
        
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_engine_market_long_sell,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(symbol),
        _UniffiConverterDouble.lower(volume))
        )





    def market_short_buy(self, symbol: "str",amount: "float") -> "str":
        _UniffiConverterString.check_lower(symbol)
        
        _UniffiConverterDouble.check_lower(amount)
        
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_engine_market_short_buy,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(symbol),
        _UniffiConverterDouble.lower(amount))
        )





    def market_short_sell(self, symbol: "str",volume: "float") -> "str":
        _UniffiConverterString.check_lower(symbol)
        
        _UniffiConverterDouble.check_lower(volume)
        
        return _UniffiConverterString.lift(
            _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_engine_market_short_sell,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(symbol),
        _UniffiConverterDouble.lower(volume))
        )





    def cancel_order(self, symbol: "str",id: "str") -> None:
        _UniffiConverterString.check_lower(symbol)
        
        _UniffiConverterString.check_lower(id)
        
        _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_engine_cancel_order,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(symbol),
        _UniffiConverterString.lower(id))






    def debug(self, msg: "str") -> None:
        _UniffiConverterString.check_lower(msg)
        
        _uniffi_rust_call(_UniffiLib.uniffi_wukong_sdk_fn_method_engine_debug,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(msg))






    def info(self, msg: "str") -> None:
        _UniffiConverterString.check_lower(msg)
        
        _uniffi_rust_call(_UniffiLib.uniffi_wukong_sdk_fn_method_engine_info,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(msg))






    def warn(self, msg: "str") -> None:
        _UniffiConverterString.check_lower(msg)
        
        _uniffi_rust_call(_UniffiLib.uniffi_wukong_sdk_fn_method_engine_warn,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(msg))






    def error(self, msg: "str") -> None:
        _UniffiConverterString.check_lower(msg)
        
        _uniffi_rust_call(_UniffiLib.uniffi_wukong_sdk_fn_method_engine_error,self._uniffi_clone_pointer(),
        _UniffiConverterString.lower(msg))







class _UniffiConverterTypeEngine:

    @staticmethod
    def lift(value: int):
        return Engine._make_instance_(value)

    @staticmethod
    def check_lower(value: Engine):
        if not isinstance(value, Engine):
            raise TypeError("Expected Engine instance, {} found".format(type(value).__name__))

    @staticmethod
    def lower(value: EngineProtocol):
        if not isinstance(value, Engine):
            raise TypeError("Expected Engine instance, {} found".format(type(value).__name__))
        return value._uniffi_clone_pointer()

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: EngineProtocol, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))



class Strategy(typing.Protocol):
    def initialize(self, engine: "Engine"):
        raise NotImplementedError
    def day_begin(self, engine: "Engine"):
        raise NotImplementedError
    def hour_begin(self, engine: "Engine"):
        raise NotImplementedError
    def minute_begin(self, engine: "Engine"):
        raise NotImplementedError
    def minute_end(self, engine: "Engine"):
        raise NotImplementedError
    def hour_end(self, engine: "Engine"):
        raise NotImplementedError
    def day_end(self, engine: "Engine"):
        raise NotImplementedError
    def stop(self, engine: "Engine"):
        raise NotImplementedError
    def callme(self, ):
        raise NotImplementedError


class StrategyImpl:
    _pointer: ctypes.c_void_p
    
    def __init__(self, *args, **kwargs):
        raise ValueError("This class has no default constructor")

    def __del__(self):
        # In case of partial initialization of instances.
        pointer = getattr(self, "_pointer", None)
        if pointer is not None:
            _uniffi_rust_call(_UniffiLib.uniffi_wukong_sdk_fn_free_strategy, pointer)

    def _uniffi_clone_pointer(self):
        return _uniffi_rust_call(_UniffiLib.uniffi_wukong_sdk_fn_clone_strategy, self._pointer)

    # Used by alternative constructors or any methods which return this type.
    @classmethod
    def _make_instance_(cls, pointer):
        # Lightly yucky way to bypass the usual __init__ logic
        # and just create a new instance with the required pointer.
        inst = cls.__new__(cls)
        inst._pointer = pointer
        return inst


    def initialize(self, engine: "Engine") -> None:
        _UniffiConverterTypeEngine.check_lower(engine)
        
        _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_initialize,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEngine.lower(engine))






    def day_begin(self, engine: "Engine") -> None:
        _UniffiConverterTypeEngine.check_lower(engine)
        
        _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_day_begin,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEngine.lower(engine))






    def hour_begin(self, engine: "Engine") -> None:
        _UniffiConverterTypeEngine.check_lower(engine)
        
        _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_hour_begin,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEngine.lower(engine))






    def minute_begin(self, engine: "Engine") -> None:
        _UniffiConverterTypeEngine.check_lower(engine)
        
        _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_minute_begin,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEngine.lower(engine))






    def minute_end(self, engine: "Engine") -> None:
        _UniffiConverterTypeEngine.check_lower(engine)
        
        _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_minute_end,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEngine.lower(engine))






    def hour_end(self, engine: "Engine") -> None:
        _UniffiConverterTypeEngine.check_lower(engine)
        
        _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_hour_end,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEngine.lower(engine))






    def day_end(self, engine: "Engine") -> None:
        _UniffiConverterTypeEngine.check_lower(engine)
        
        _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_day_end,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEngine.lower(engine))






    def stop(self, engine: "Engine") -> None:
        _UniffiConverterTypeEngine.check_lower(engine)
        
        _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_stop,self._uniffi_clone_pointer(),
        _UniffiConverterTypeEngine.lower(engine))






    def callme(self, ) -> None:
        _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_method_strategy_callme,self._uniffi_clone_pointer(),)




# Magic number for the Rust proxy to call using the same mechanism as every other method,
# to free the callback once it's dropped by Rust.
_UNIFFI_IDX_CALLBACK_FREE = 0
# Return codes for callback calls
_UNIFFI_CALLBACK_SUCCESS = 0
_UNIFFI_CALLBACK_ERROR = 1
_UNIFFI_CALLBACK_UNEXPECTED_ERROR = 2

class _UniffiCallbackInterfaceFfiConverter:
    _handle_map = _UniffiHandleMap()

    @classmethod
    def lift(cls, handle):
        return cls._handle_map.get(handle)

    @classmethod
    def read(cls, buf):
        handle = buf.read_u64()
        cls.lift(handle)

    @classmethod
    def check_lower(cls, cb):
        pass

    @classmethod
    def lower(cls, cb):
        handle = cls._handle_map.insert(cb)
        return handle

    @classmethod
    def write(cls, cb, buf):
        buf.write_u64(cls.lower(cb))

# Put all the bits inside a class to keep the top-level namespace clean
class _UniffiTraitImplStrategy:
    # For each method, generate a callback function to pass to Rust

    @_UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD0
    def initialize(
            uniffi_handle,
            engine,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterTypeStrategy._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeEngine.lift(engine), )
            method = uniffi_obj.initialize
            return method(*args)

        
        write_return_value = lambda v: None
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                Errors,
                _UniffiConverterTypeErrors.lower,
        )

    @_UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD1
    def day_begin(
            uniffi_handle,
            engine,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterTypeStrategy._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeEngine.lift(engine), )
            method = uniffi_obj.day_begin
            return method(*args)

        
        write_return_value = lambda v: None
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                Errors,
                _UniffiConverterTypeErrors.lower,
        )

    @_UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD2
    def hour_begin(
            uniffi_handle,
            engine,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterTypeStrategy._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeEngine.lift(engine), )
            method = uniffi_obj.hour_begin
            return method(*args)

        
        write_return_value = lambda v: None
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                Errors,
                _UniffiConverterTypeErrors.lower,
        )

    @_UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD3
    def minute_begin(
            uniffi_handle,
            engine,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterTypeStrategy._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeEngine.lift(engine), )
            method = uniffi_obj.minute_begin
            return method(*args)

        
        write_return_value = lambda v: None
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                Errors,
                _UniffiConverterTypeErrors.lower,
        )

    @_UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD4
    def minute_end(
            uniffi_handle,
            engine,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterTypeStrategy._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeEngine.lift(engine), )
            method = uniffi_obj.minute_end
            return method(*args)

        
        write_return_value = lambda v: None
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                Errors,
                _UniffiConverterTypeErrors.lower,
        )

    @_UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD5
    def hour_end(
            uniffi_handle,
            engine,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterTypeStrategy._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeEngine.lift(engine), )
            method = uniffi_obj.hour_end
            return method(*args)

        
        write_return_value = lambda v: None
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                Errors,
                _UniffiConverterTypeErrors.lower,
        )

    @_UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD6
    def day_end(
            uniffi_handle,
            engine,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterTypeStrategy._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeEngine.lift(engine), )
            method = uniffi_obj.day_end
            return method(*args)

        
        write_return_value = lambda v: None
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                Errors,
                _UniffiConverterTypeErrors.lower,
        )

    @_UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD7
    def stop(
            uniffi_handle,
            engine,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterTypeStrategy._handle_map.get(uniffi_handle)
        def make_call():
            args = (_UniffiConverterTypeEngine.lift(engine), )
            method = uniffi_obj.stop
            return method(*args)

        
        write_return_value = lambda v: None
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                Errors,
                _UniffiConverterTypeErrors.lower,
        )

    @_UNIFFI_CALLBACK_INTERFACE_STRATEGY_METHOD8
    def callme(
            uniffi_handle,
            uniffi_out_return,
            uniffi_call_status_ptr,
        ):
        uniffi_obj = _UniffiConverterTypeStrategy._handle_map.get(uniffi_handle)
        def make_call():
            args = ()
            method = uniffi_obj.callme
            return method(*args)

        
        write_return_value = lambda v: None
        _uniffi_trait_interface_call_with_error(
                uniffi_call_status_ptr.contents,
                make_call,
                write_return_value,
                Errors,
                _UniffiConverterTypeErrors.lower,
        )

    @_UNIFFI_CALLBACK_INTERFACE_FREE
    def _uniffi_free(uniffi_handle):
        _UniffiConverterTypeStrategy._handle_map.remove(uniffi_handle)

    # Generate the FFI VTable.  This has a field for each callback interface method.
    _uniffi_vtable = _UniffiVTableCallbackInterfaceStrategy(
        initialize,
        day_begin,
        hour_begin,
        minute_begin,
        minute_end,
        hour_end,
        day_end,
        stop,
        callme,
        _uniffi_free
    )
    # Send Rust a pointer to the VTable.  Note: this means we need to keep the struct alive forever,
    # or else bad things will happen when Rust tries to access it.
    _UniffiLib.uniffi_wukong_sdk_fn_init_callback_vtable_strategy(ctypes.byref(_uniffi_vtable))



class _UniffiConverterTypeStrategy:
    _handle_map = _UniffiHandleMap()

    @staticmethod
    def lift(value: int):
        return StrategyImpl._make_instance_(value)

    @staticmethod
    def check_lower(value: Strategy):
        pass

    @staticmethod
    def lower(value: Strategy):
        return _UniffiConverterTypeStrategy._handle_map.insert(value)

    @classmethod
    def read(cls, buf: _UniffiRustBuffer):
        ptr = buf.read_u64()
        if ptr == 0:
            raise InternalError("Raw pointer value was null")
        return cls.lift(ptr)

    @classmethod
    def write(cls, value: Strategy, buf: _UniffiRustBuffer):
        buf.write_u64(cls.lower(value))


class Account:
    """
    账户
    """

    balance: "float"
    """
    余额
    """

    available: "float"
    """
    可用余额
    """

    upl: "float"
    """
    未实现盈亏
    """

    def __init__(self, *, balance: "float", available: "float", upl: "float"):
        self.balance = balance
        self.available = available
        self.upl = upl

    def __str__(self):
        return "Account(balance={}, available={}, upl={})".format(self.balance, self.available, self.upl)

    def __eq__(self, other):
        if self.balance != other.balance:
            return False
        if self.available != other.available:
            return False
        if self.upl != other.upl:
            return False
        return True

class _UniffiConverterTypeAccount(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Account(
            balance=_UniffiConverterDouble.read(buf),
            available=_UniffiConverterDouble.read(buf),
            upl=_UniffiConverterDouble.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterDouble.check_lower(value.balance)
        _UniffiConverterDouble.check_lower(value.available)
        _UniffiConverterDouble.check_lower(value.upl)

    @staticmethod
    def write(value, buf):
        _UniffiConverterDouble.write(value.balance, buf)
        _UniffiConverterDouble.write(value.available, buf)
        _UniffiConverterDouble.write(value.upl, buf)


class KLine:
    """
    K线
    """

    symbol: "str"
    """
    交易对
    """

    time: "int"
    """
    开盘时间
    """

    open: "float"
    """
    开盘价
    """

    high: "float"
    """
    最高价
    """

    low: "float"
    """
    最低价
    """

    close: "float"
    """
    收盘价
    """

    volume: "float"
    """
    成交量
    """

    amount: "float"
    """
    成交额
    """

    trades: "int"
    """
    成交笔数
    """

    taker_volume: "float"
    """
    吃单方数量
    """

    taker_amount: "float"
    """
    吃单方金额
    """

    finish: "bool"
    """
    是否完结
    """

    def __init__(self, *, symbol: "str", time: "int", open: "float", high: "float", low: "float", close: "float", volume: "float", amount: "float", trades: "int", taker_volume: "float", taker_amount: "float", finish: "bool"):
        self.symbol = symbol
        self.time = time
        self.open = open
        self.high = high
        self.low = low
        self.close = close
        self.volume = volume
        self.amount = amount
        self.trades = trades
        self.taker_volume = taker_volume
        self.taker_amount = taker_amount
        self.finish = finish

    def __str__(self):
        return "KLine(symbol={}, time={}, open={}, high={}, low={}, close={}, volume={}, amount={}, trades={}, taker_volume={}, taker_amount={}, finish={})".format(self.symbol, self.time, self.open, self.high, self.low, self.close, self.volume, self.amount, self.trades, self.taker_volume, self.taker_amount, self.finish)

    def __eq__(self, other):
        if self.symbol != other.symbol:
            return False
        if self.time != other.time:
            return False
        if self.open != other.open:
            return False
        if self.high != other.high:
            return False
        if self.low != other.low:
            return False
        if self.close != other.close:
            return False
        if self.volume != other.volume:
            return False
        if self.amount != other.amount:
            return False
        if self.trades != other.trades:
            return False
        if self.taker_volume != other.taker_volume:
            return False
        if self.taker_amount != other.taker_amount:
            return False
        if self.finish != other.finish:
            return False
        return True

class _UniffiConverterTypeKLine(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return KLine(
            symbol=_UniffiConverterString.read(buf),
            time=_UniffiConverterInt64.read(buf),
            open=_UniffiConverterDouble.read(buf),
            high=_UniffiConverterDouble.read(buf),
            low=_UniffiConverterDouble.read(buf),
            close=_UniffiConverterDouble.read(buf),
            volume=_UniffiConverterDouble.read(buf),
            amount=_UniffiConverterDouble.read(buf),
            trades=_UniffiConverterInt64.read(buf),
            taker_volume=_UniffiConverterDouble.read(buf),
            taker_amount=_UniffiConverterDouble.read(buf),
            finish=_UniffiConverterBool.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.symbol)
        _UniffiConverterInt64.check_lower(value.time)
        _UniffiConverterDouble.check_lower(value.open)
        _UniffiConverterDouble.check_lower(value.high)
        _UniffiConverterDouble.check_lower(value.low)
        _UniffiConverterDouble.check_lower(value.close)
        _UniffiConverterDouble.check_lower(value.volume)
        _UniffiConverterDouble.check_lower(value.amount)
        _UniffiConverterInt64.check_lower(value.trades)
        _UniffiConverterDouble.check_lower(value.taker_volume)
        _UniffiConverterDouble.check_lower(value.taker_amount)
        _UniffiConverterBool.check_lower(value.finish)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.symbol, buf)
        _UniffiConverterInt64.write(value.time, buf)
        _UniffiConverterDouble.write(value.open, buf)
        _UniffiConverterDouble.write(value.high, buf)
        _UniffiConverterDouble.write(value.low, buf)
        _UniffiConverterDouble.write(value.close, buf)
        _UniffiConverterDouble.write(value.volume, buf)
        _UniffiConverterDouble.write(value.amount, buf)
        _UniffiConverterInt64.write(value.trades, buf)
        _UniffiConverterDouble.write(value.taker_volume, buf)
        _UniffiConverterDouble.write(value.taker_amount, buf)
        _UniffiConverterBool.write(value.finish, buf)


class Order:
    """
    订单
    """

    id: "str"
    """
    订单号
    """

    symbol: "str"
    """
    交易对
    """

    type: "Type"
    """
    交易类型
    """

    side: "Side"
    """
    交易方向
    """

    action: "Action"
    """
    交易动作
    """

    price: "float"
    """
    价格
    """

    volume: "float"
    """
    数量
    """

    margin: "float"
    """
    占用保证金
    """

    time: "int"
    """
    下单时间
    """

    deal_price: "float"
    """
    成交均价
    """

    deal_volume: "float"
    """
    成交数量
    """

    deal_fee: "float"
    """
    成交手续费
    """

    taker: "bool"
    """
    吃单
    """

    finish: "bool"
    """
    是否完成
    """

    def __init__(self, *, id: "str", symbol: "str", type: "Type", side: "Side", action: "Action", price: "float", volume: "float", margin: "float", time: "int", deal_price: "float", deal_volume: "float", deal_fee: "float", taker: "bool", finish: "bool"):
        self.id = id
        self.symbol = symbol
        self.type = type
        self.side = side
        self.action = action
        self.price = price
        self.volume = volume
        self.margin = margin
        self.time = time
        self.deal_price = deal_price
        self.deal_volume = deal_volume
        self.deal_fee = deal_fee
        self.taker = taker
        self.finish = finish

    def __str__(self):
        return "Order(id={}, symbol={}, type={}, side={}, action={}, price={}, volume={}, margin={}, time={}, deal_price={}, deal_volume={}, deal_fee={}, taker={}, finish={})".format(self.id, self.symbol, self.type, self.side, self.action, self.price, self.volume, self.margin, self.time, self.deal_price, self.deal_volume, self.deal_fee, self.taker, self.finish)

    def __eq__(self, other):
        if self.id != other.id:
            return False
        if self.symbol != other.symbol:
            return False
        if self.type != other.type:
            return False
        if self.side != other.side:
            return False
        if self.action != other.action:
            return False
        if self.price != other.price:
            return False
        if self.volume != other.volume:
            return False
        if self.margin != other.margin:
            return False
        if self.time != other.time:
            return False
        if self.deal_price != other.deal_price:
            return False
        if self.deal_volume != other.deal_volume:
            return False
        if self.deal_fee != other.deal_fee:
            return False
        if self.taker != other.taker:
            return False
        if self.finish != other.finish:
            return False
        return True

class _UniffiConverterTypeOrder(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Order(
            id=_UniffiConverterString.read(buf),
            symbol=_UniffiConverterString.read(buf),
            type=_UniffiConverterTypeType.read(buf),
            side=_UniffiConverterTypeSide.read(buf),
            action=_UniffiConverterTypeAction.read(buf),
            price=_UniffiConverterDouble.read(buf),
            volume=_UniffiConverterDouble.read(buf),
            margin=_UniffiConverterDouble.read(buf),
            time=_UniffiConverterInt64.read(buf),
            deal_price=_UniffiConverterDouble.read(buf),
            deal_volume=_UniffiConverterDouble.read(buf),
            deal_fee=_UniffiConverterDouble.read(buf),
            taker=_UniffiConverterBool.read(buf),
            finish=_UniffiConverterBool.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.id)
        _UniffiConverterString.check_lower(value.symbol)
        _UniffiConverterTypeType.check_lower(value.type)
        _UniffiConverterTypeSide.check_lower(value.side)
        _UniffiConverterTypeAction.check_lower(value.action)
        _UniffiConverterDouble.check_lower(value.price)
        _UniffiConverterDouble.check_lower(value.volume)
        _UniffiConverterDouble.check_lower(value.margin)
        _UniffiConverterInt64.check_lower(value.time)
        _UniffiConverterDouble.check_lower(value.deal_price)
        _UniffiConverterDouble.check_lower(value.deal_volume)
        _UniffiConverterDouble.check_lower(value.deal_fee)
        _UniffiConverterBool.check_lower(value.taker)
        _UniffiConverterBool.check_lower(value.finish)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.id, buf)
        _UniffiConverterString.write(value.symbol, buf)
        _UniffiConverterTypeType.write(value.type, buf)
        _UniffiConverterTypeSide.write(value.side, buf)
        _UniffiConverterTypeAction.write(value.action, buf)
        _UniffiConverterDouble.write(value.price, buf)
        _UniffiConverterDouble.write(value.volume, buf)
        _UniffiConverterDouble.write(value.margin, buf)
        _UniffiConverterInt64.write(value.time, buf)
        _UniffiConverterDouble.write(value.deal_price, buf)
        _UniffiConverterDouble.write(value.deal_volume, buf)
        _UniffiConverterDouble.write(value.deal_fee, buf)
        _UniffiConverterBool.write(value.taker, buf)
        _UniffiConverterBool.write(value.finish, buf)


class Position:
    """
    持仓
    """

    symbol: "str"
    """
    交易对
    """

    leverage: "int"
    """
    杠杆倍数
    """

    taker_rate: "float"
    """
    吃单费率
    """

    maker_rate: "float"
    """
    挂单费率
    """

    long: "SidePosition"
    """
    做多仓位
    """

    short: "SidePosition"
    """
    做空仓位
    """

    def __init__(self, *, symbol: "str", leverage: "int", taker_rate: "float", maker_rate: "float", long: "SidePosition", short: "SidePosition"):
        self.symbol = symbol
        self.leverage = leverage
        self.taker_rate = taker_rate
        self.maker_rate = maker_rate
        self.long = long
        self.short = short

    def __str__(self):
        return "Position(symbol={}, leverage={}, taker_rate={}, maker_rate={}, long={}, short={})".format(self.symbol, self.leverage, self.taker_rate, self.maker_rate, self.long, self.short)

    def __eq__(self, other):
        if self.symbol != other.symbol:
            return False
        if self.leverage != other.leverage:
            return False
        if self.taker_rate != other.taker_rate:
            return False
        if self.maker_rate != other.maker_rate:
            return False
        if self.long != other.long:
            return False
        if self.short != other.short:
            return False
        return True

class _UniffiConverterTypePosition(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Position(
            symbol=_UniffiConverterString.read(buf),
            leverage=_UniffiConverterInt64.read(buf),
            taker_rate=_UniffiConverterDouble.read(buf),
            maker_rate=_UniffiConverterDouble.read(buf),
            long=_UniffiConverterTypeSidePosition.read(buf),
            short=_UniffiConverterTypeSidePosition.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterString.check_lower(value.symbol)
        _UniffiConverterInt64.check_lower(value.leverage)
        _UniffiConverterDouble.check_lower(value.taker_rate)
        _UniffiConverterDouble.check_lower(value.maker_rate)
        _UniffiConverterTypeSidePosition.check_lower(value.long)
        _UniffiConverterTypeSidePosition.check_lower(value.short)

    @staticmethod
    def write(value, buf):
        _UniffiConverterString.write(value.symbol, buf)
        _UniffiConverterInt64.write(value.leverage, buf)
        _UniffiConverterDouble.write(value.taker_rate, buf)
        _UniffiConverterDouble.write(value.maker_rate, buf)
        _UniffiConverterTypeSidePosition.write(value.long, buf)
        _UniffiConverterTypeSidePosition.write(value.short, buf)


class SidePosition:
    """
    仓位
    """

    price: "float"
    """
    持仓均价
    """

    volume: "float"
    """
    持仓数量
    """

    available: "float"
    """
    可用持仓数量
    """

    margin: "float"
    """
    保证金
    """

    upl: "float"
    """
    未实现盈亏
    """

    def __init__(self, *, price: "float", volume: "float", available: "float", margin: "float", upl: "float"):
        self.price = price
        self.volume = volume
        self.available = available
        self.margin = margin
        self.upl = upl

    def __str__(self):
        return "SidePosition(price={}, volume={}, available={}, margin={}, upl={})".format(self.price, self.volume, self.available, self.margin, self.upl)

    def __eq__(self, other):
        if self.price != other.price:
            return False
        if self.volume != other.volume:
            return False
        if self.available != other.available:
            return False
        if self.margin != other.margin:
            return False
        if self.upl != other.upl:
            return False
        return True

class _UniffiConverterTypeSidePosition(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return SidePosition(
            price=_UniffiConverterDouble.read(buf),
            volume=_UniffiConverterDouble.read(buf),
            available=_UniffiConverterDouble.read(buf),
            margin=_UniffiConverterDouble.read(buf),
            upl=_UniffiConverterDouble.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterDouble.check_lower(value.price)
        _UniffiConverterDouble.check_lower(value.volume)
        _UniffiConverterDouble.check_lower(value.available)
        _UniffiConverterDouble.check_lower(value.margin)
        _UniffiConverterDouble.check_lower(value.upl)

    @staticmethod
    def write(value, buf):
        _UniffiConverterDouble.write(value.price, buf)
        _UniffiConverterDouble.write(value.volume, buf)
        _UniffiConverterDouble.write(value.available, buf)
        _UniffiConverterDouble.write(value.margin, buf)
        _UniffiConverterDouble.write(value.upl, buf)





class Action(enum.Enum):
    """
    交易动作
    """

    BUY = 0
    """
    买入
    """

    
    SELL = 1
    """
    卖出
    """

    


class _UniffiConverterTypeAction(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return Action.BUY
        if variant == 2:
            return Action.SELL
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == Action.BUY:
            return
        if value == Action.SELL:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == Action.BUY:
            buf.write_i32(1)
        if value == Action.SELL:
            buf.write_i32(2)




# Errors
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class Errors(Exception):
    pass

_UniffiTempErrors = Errors

class Errors:  # type: ignore
    class Custom(_UniffiTempErrors):
        def __init__(self, *values):
            if len(values) != 1:
                raise TypeError(f"Expected 1 arguments, found {len(values)}")
            if not isinstance(values[0], str):
                raise TypeError(f"unexpected type for tuple element 0 - expected 'str', got '{type(values[0])}'")
            super().__init__(", ".join(map(repr, values)))
            self._values = values

        def __getitem__(self, index):
            return self._values[index]

        def __repr__(self):
            return "Errors.Custom({})".format(str(self))
    _UniffiTempErrors.Custom = Custom # type: ignore

Errors = _UniffiTempErrors # type: ignore
del _UniffiTempErrors


class _UniffiConverterTypeErrors(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return Errors.Custom(
                _UniffiConverterString.read(buf),
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, Errors.Custom):
            _UniffiConverterString.check_lower(value._values[0])
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, Errors.Custom):
            buf.write_i32(1)
            _UniffiConverterString.write(value._values[0], buf)





class Mode(enum.Enum):
    """
    运行模式
    """

    BACKTEST = 0
    """
    回测
    """

    
    SANDBOX = 1
    """
    模拟
    """

    
    REAL = 2
    """
    实盘
    """

    


class _UniffiConverterTypeMode(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return Mode.BACKTEST
        if variant == 2:
            return Mode.SANDBOX
        if variant == 3:
            return Mode.REAL
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == Mode.BACKTEST:
            return
        if value == Mode.SANDBOX:
            return
        if value == Mode.REAL:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == Mode.BACKTEST:
            buf.write_i32(1)
        if value == Mode.SANDBOX:
            buf.write_i32(2)
        if value == Mode.REAL:
            buf.write_i32(3)







class Side(enum.Enum):
    """
    交易方向
    """

    LONG = 0
    """
    做多
    """

    
    SHORT = 1
    """
    做空
    """

    


class _UniffiConverterTypeSide(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return Side.LONG
        if variant == 2:
            return Side.SHORT
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == Side.LONG:
            return
        if value == Side.SHORT:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == Side.LONG:
            buf.write_i32(1)
        if value == Side.SHORT:
            buf.write_i32(2)







class Type(enum.Enum):
    """
    交易类型
    """

    LIMIT = 0
    """
    限价
    """

    
    MARKET = 1
    """
    市价
    """

    


class _UniffiConverterTypeType(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return Type.LIMIT
        if variant == 2:
            return Type.MARKET
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if value == Type.LIMIT:
            return
        if value == Type.MARKET:
            return
        raise ValueError(value)

    @staticmethod
    def write(value, buf):
        if value == Type.LIMIT:
            buf.write_i32(1)
        if value == Type.MARKET:
            buf.write_i32(2)





class _UniffiConverterSequenceString(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterString.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterString.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterString.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeKLine(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeKLine.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeKLine.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeKLine.read(buf) for i in range(count)
        ]

# Async support

def hello_ffi(callback: "Strategy") -> None:
    _UniffiConverterTypeStrategy.check_lower(callback)
    
    _uniffi_rust_call_with_error(_UniffiConverterTypeErrors,_UniffiLib.uniffi_wukong_sdk_fn_func_hello_ffi,
        _UniffiConverterTypeStrategy.lower(callback))


__all__ = [
    "InternalError",
    "Action",
    "Errors",
    "Mode",
    "Side",
    "Type",
    "Account",
    "KLine",
    "Order",
    "Position",
    "SidePosition",
    "hello_ffi",
    "Engine",
    "Strategy",
]

