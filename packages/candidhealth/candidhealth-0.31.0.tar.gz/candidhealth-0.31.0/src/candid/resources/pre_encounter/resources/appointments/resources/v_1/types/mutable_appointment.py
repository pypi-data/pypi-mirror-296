# This file was auto-generated by Fern from our API Definition.

import datetime as dt
import typing

import pydantic

from ........core.datetime_utils import serialize_datetime
from ........core.pydantic_utilities import deep_union_pydantic_dicts
from .....common.types.external_provider import ExternalProvider
from .....patients.resources.v_1.types.patient_id import PatientId
from .appointment_reason import AppointmentReason
from .appointment_type import AppointmentType
from .appointment_work_queue import AppointmentWorkQueue
from .service import Service


class MutableAppointment(pydantic.BaseModel):
    """
    An object representing a appointment.
    """

    patient_id: PatientId = pydantic.Field()
    """
    The Candid-defined patient identifier.
    """

    checked_in: typing.Optional[bool] = pydantic.Field(default=None)
    """
    True if the patient has checked in. Defaults to false.
    """

    assigned_patient_location: typing.Optional[str] = pydantic.Field(default=None)
    """
    Patient’s initial assigned location or the location to which the patient is being moved. This location is stored on the Patient Demographics tab and is used when creating orders.
    """

    attending_doctor: typing.Optional[ExternalProvider] = pydantic.Field(default=None)
    """
    Attending physician information. The attending physician will be stored as the Current MD for the patient.
    """

    referring_doctor: typing.Optional[ExternalProvider] = pydantic.Field(default=None)
    """
    Referring physician information. The referring physician will be stored as the Referring MD in the patient’s Providers list.
    """

    start_timestamp: typing.Optional[dt.datetime] = None
    service_duration: int = pydantic.Field()
    """
    The requested length of time allotted for the appointment. The units are in minutes.
    """

    services: typing.List[Service]
    placer_appointment_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    ID for the appointment/order for the event.
    """

    appointment_reason: typing.Optional[AppointmentReason] = None
    appointment_type: typing.Optional[AppointmentType] = pydantic.Field(default=None)
    """
    Contains the identifier code for the appointment.
    """

    location_resource_id: typing.Optional[str] = pydantic.Field(default=None)
    """
    Contains the coded identification of the location being scheduled. Components: <Identifier (ST)>^<Text (ST)>
    """

    work_queue: typing.Optional[AppointmentWorkQueue] = pydantic.Field(default=None)
    """
    The work queue that the appointment belongs to. It is not recommended to change this value manually via API.
    """

    def json(self, **kwargs: typing.Any) -> str:
        kwargs_with_defaults: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        return super().json(**kwargs_with_defaults)

    def dict(self, **kwargs: typing.Any) -> typing.Dict[str, typing.Any]:
        kwargs_with_defaults_exclude_unset: typing.Any = {"by_alias": True, "exclude_unset": True, **kwargs}
        kwargs_with_defaults_exclude_none: typing.Any = {"by_alias": True, "exclude_none": True, **kwargs}

        return deep_union_pydantic_dicts(
            super().dict(**kwargs_with_defaults_exclude_unset), super().dict(**kwargs_with_defaults_exclude_none)
        )

    class Config:
        frozen = True
        smart_union = True
        extra = pydantic.Extra.forbid
        json_encoders = {dt.datetime: serialize_datetime}
