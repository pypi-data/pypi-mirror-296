# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2
from .draft_base_field_value import DraftBaseFieldValue
from .draft_enum_value import DraftEnumValue
from .draft_field_value_context import DraftFieldValueContext


class DraftFieldStringValue(DraftBaseFieldValue, DraftFieldValueContext):
    """
    String field representation.
    """

    enum: typing.Optional[typing.List[DraftEnumValue]] = pydantic.Field(default=None)
    """
    A set of named constants, each representing an allowable value.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
