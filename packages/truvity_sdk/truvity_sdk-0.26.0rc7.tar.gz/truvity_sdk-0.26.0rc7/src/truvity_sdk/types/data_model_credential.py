# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .credential_11_proof import Credential11Proof
from .credential_id import CredentialId
from .credential_issuer import CredentialIssuer
from .credential_type import CredentialType
from .credential_valid_from import CredentialValidFrom
from .credential_valid_until import CredentialValidUntil
from .credentil_holder import CredentilHolder


class DataModelCredential_Vc11(UniversalBaseModel):
    """
    A flavor specific representation of a verifiable crendential.
    """

    flavor_name: typing.Literal["VC1_1"] = "VC1_1"
    id: CredentialId
    issuer: CredentialIssuer
    issuance_date: CredentialValidFrom = pydantic.Field(alias="issuanceDate")
    type: CredentialType
    proof: Credential11Proof
    expiration_date: typing.Optional[CredentialValidUntil] = pydantic.Field(alias="expirationDate", default=None)
    holder: typing.Optional[CredentilHolder] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


DataModelCredential = DataModelCredential_Vc11
