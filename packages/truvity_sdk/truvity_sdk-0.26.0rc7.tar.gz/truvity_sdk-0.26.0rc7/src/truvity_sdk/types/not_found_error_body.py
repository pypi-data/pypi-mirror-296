# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .resource import Resource
from .resource_id import ResourceId
from .resource_kind import ResourceKind
from .revision import Revision


class NotFoundErrorBody_NotFoundResource(UniversalBaseModel):
    type: typing.Literal["/not-found/resource"] = "/not-found/resource"
    status: int
    title: str
    kind: ResourceKind
    id: ResourceId
    detail: typing.Optional[str] = None
    instance: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class NotFoundErrorBody_NotFoundResourceRevision(UniversalBaseModel):
    type: typing.Literal["/not-found/resource/revision"] = "/not-found/resource/revision"
    status: int
    title: str
    expected: Revision
    actual: Resource
    detail: typing.Optional[str] = None
    instance: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


NotFoundErrorBody = typing.Union[NotFoundErrorBody_NotFoundResource, NotFoundErrorBody_NotFoundResourceRevision]
