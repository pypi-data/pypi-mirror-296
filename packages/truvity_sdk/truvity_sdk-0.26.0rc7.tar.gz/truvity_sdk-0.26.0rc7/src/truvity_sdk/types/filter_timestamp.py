# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class FilterTimestamp_Between(UniversalBaseModel):
    """
    Schema of the filter by timestamp value by the requested operator.
    """

    operator: typing.Literal["BETWEEN"] = "BETWEEN"
    left: dt.datetime
    right: dt.datetime

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterTimestamp_GreaterThan(UniversalBaseModel):
    """
    Schema of the filter by timestamp value by the requested operator.
    """

    operator: typing.Literal["GREATER_THAN"] = "GREATER_THAN"
    value: dt.datetime

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterTimestamp_GreaterThanOrEqual(UniversalBaseModel):
    """
    Schema of the filter by timestamp value by the requested operator.
    """

    operator: typing.Literal["GREATER_THAN_OR_EQUAL"] = "GREATER_THAN_OR_EQUAL"
    value: dt.datetime

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterTimestamp_LessThan(UniversalBaseModel):
    """
    Schema of the filter by timestamp value by the requested operator.
    """

    operator: typing.Literal["LESS_THAN"] = "LESS_THAN"
    value: dt.datetime

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterTimestamp_LessThanOrEqual(UniversalBaseModel):
    """
    Schema of the filter by timestamp value by the requested operator.
    """

    operator: typing.Literal["LESS_THAN_OR_EQUAL"] = "LESS_THAN_OR_EQUAL"
    value: dt.datetime

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


FilterTimestamp = typing.Union[
    FilterTimestamp_Between,
    FilterTimestamp_GreaterThan,
    FilterTimestamp_GreaterThanOrEqual,
    FilterTimestamp_LessThan,
    FilterTimestamp_LessThanOrEqual,
]
