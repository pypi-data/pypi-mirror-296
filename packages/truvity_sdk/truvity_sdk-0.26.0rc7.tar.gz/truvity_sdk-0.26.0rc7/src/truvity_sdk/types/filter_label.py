# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .label_key import LabelKey
from .label_value import LabelValue


class FilterLabel_Equal(UniversalBaseModel):
    """
    Schema of the filter by label value by the requested operator.
    """

    operator: typing.Literal["EQUAL"] = "EQUAL"
    key: LabelKey
    value: LabelValue

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterLabel_IsNotNull(UniversalBaseModel):
    """
    Schema of the filter by label value by the requested operator.
    """

    operator: typing.Literal["IS_NOT_NULL"] = "IS_NOT_NULL"
    key: LabelKey

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterLabel_IsNull(UniversalBaseModel):
    """
    Schema of the filter by label value by the requested operator.
    """

    operator: typing.Literal["IS_NULL"] = "IS_NULL"
    key: LabelKey

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterLabel_NotEqual(UniversalBaseModel):
    """
    Schema of the filter by label value by the requested operator.
    """

    operator: typing.Literal["NOT_EQUAL"] = "NOT_EQUAL"
    key: LabelKey
    value: LabelValue

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


FilterLabel = typing.Union[FilterLabel_Equal, FilterLabel_IsNotNull, FilterLabel_IsNull, FilterLabel_NotEqual]
