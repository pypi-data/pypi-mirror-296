# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .annotations import Annotations
from .e_tag import ETag
from .labels import Labels
from .resource_id import ResourceId
from .resource_kind import ResourceKind
from .revision import Revision
from .timestamp import Timestamp


class Resource(UniversalBaseModel):
    """
    Some additional comments on the fields
    kind:
    resource kind.
    createdAt:
    the time of the creation of the object (the first revision)
    updatedAt:
    the time of the creation of the _latest revision_ of the object
    deletedAt:
    the time of the deletion of the object - [soft deletion](https://en.wiktionary.org/wiki/soft_deletion)
    labels:
    used-defined key-value labels, similar to Kubernetes Labels.
    annotations:
    used-defined key-value annotations, similar to Kubernetes Annotations.
    etag:
    [Zalando RESTful Guidelines / Appendix C: Best practices / ETags in result entities](https://opensource.zalando.com/restful-api-guidelines/#ETag-in-result-entities)
    Other properties defined inside specific resource.
    """

    kind: ResourceKind
    id: ResourceId
    revision: Revision
    created_at: Timestamp
    modified_at: Timestamp
    labels: Labels
    annotations: Annotations
    etag: ETag
    deleted_at: typing.Optional[Timestamp] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
