# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.jsonable_encoder import jsonable_encoder
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..errors.bad_request_error import BadRequestError
from ..errors.internal_server_error import InternalServerError
from ..errors.unsupported_media_type_error import UnsupportedMediaTypeError
from ..types.bad_request_error_body import BadRequestErrorBody
from ..types.did_document import DidDocument
from ..types.problem_internal_server_error import ProblemInternalServerError
from ..types.problem_unsupported_media_type import ProblemUnsupportedMediaType
from ..types.resource_id import ResourceId

# this is used as the default value for optional parameters
OMIT = typing.cast(typing.Any, ...)


class DeskClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def did_document_get(
        self, tenant_id: ResourceId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DidDocument:
        """
        Receive the DIDCOMM Message.

        Parameters
        ----------
        tenant_id : ResourceId
            Take a look to documentation about #/components/schemas/ResourceID.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DidDocument
            DID Document according to [Decentralized Identifiers (DIDs) v1.0](https://www.w3.org/TR/did-core/).

        Examples
        --------
        from truvity_sdk import TruvityApi

        client = TruvityApi(
            api_key="YOUR_API_KEY",
        )
        client.desk.did_document_get(
            tenant_id="tenant_id",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"{jsonable_encoder(tenant_id)}/did.json", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(DidDocument, parse_obj_as(type_=DidDocument, object_=_response.json()))  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequestErrorBody, parse_obj_as(type_=BadRequestErrorBody, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(ProblemInternalServerError, parse_obj_as(type_=ProblemInternalServerError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    def didcomm_message_recv(
        self, tenant_id: ResourceId, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Receive the DIDCOMM Message.

        Parameters
        ----------
        tenant_id : ResourceId
            Take a look to documentation about #/components/schemas/ResourceID.

        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        from truvity_sdk import TruvityApi

        client = TruvityApi(
            api_key="YOUR_API_KEY",
        )
        client.desk.didcomm_message_recv(
            tenant_id="tenant_id",
            request="string",
        )
        """
        _response = self._client_wrapper.httpx_client.request(
            f"{jsonable_encoder(tenant_id)}/didcomm-messages/recv",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequestErrorBody, parse_obj_as(type_=BadRequestErrorBody, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 415:
                raise UnsupportedMediaTypeError(
                    typing.cast(ProblemUnsupportedMediaType, parse_obj_as(type_=ProblemUnsupportedMediaType, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(ProblemInternalServerError, parse_obj_as(type_=ProblemInternalServerError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncDeskClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def did_document_get(
        self, tenant_id: ResourceId, *, request_options: typing.Optional[RequestOptions] = None
    ) -> DidDocument:
        """
        Receive the DIDCOMM Message.

        Parameters
        ----------
        tenant_id : ResourceId
            Take a look to documentation about #/components/schemas/ResourceID.

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DidDocument
            DID Document according to [Decentralized Identifiers (DIDs) v1.0](https://www.w3.org/TR/did-core/).

        Examples
        --------
        import asyncio

        from truvity_sdk import AsyncTruvityApi

        client = AsyncTruvityApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.desk.did_document_get(
                tenant_id="tenant_id",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"{jsonable_encoder(tenant_id)}/did.json", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(DidDocument, parse_obj_as(type_=DidDocument, object_=_response.json()))  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequestErrorBody, parse_obj_as(type_=BadRequestErrorBody, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(ProblemInternalServerError, parse_obj_as(type_=ProblemInternalServerError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)

    async def didcomm_message_recv(
        self, tenant_id: ResourceId, *, request: str, request_options: typing.Optional[RequestOptions] = None
    ) -> None:
        """
        Receive the DIDCOMM Message.

        Parameters
        ----------
        tenant_id : ResourceId
            Take a look to documentation about #/components/schemas/ResourceID.

        request : str

        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        None

        Examples
        --------
        import asyncio

        from truvity_sdk import AsyncTruvityApi

        client = AsyncTruvityApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.desk.didcomm_message_recv(
                tenant_id="tenant_id",
                request="string",
            )


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            f"{jsonable_encoder(tenant_id)}/didcomm-messages/recv",
            method="POST",
            json=request,
            request_options=request_options,
            omit=OMIT,
        )
        try:
            if 200 <= _response.status_code < 300:
                return
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequestErrorBody, parse_obj_as(type_=BadRequestErrorBody, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 415:
                raise UnsupportedMediaTypeError(
                    typing.cast(ProblemUnsupportedMediaType, parse_obj_as(type_=ProblemUnsupportedMediaType, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(ProblemInternalServerError, parse_obj_as(type_=ProblemInternalServerError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
