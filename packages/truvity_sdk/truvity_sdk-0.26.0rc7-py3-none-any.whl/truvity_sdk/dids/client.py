# This file was auto-generated by Fern from our API Definition.

import typing
from json.decoder import JSONDecodeError

from ..core.api_error import ApiError
from ..core.client_wrapper import AsyncClientWrapper, SyncClientWrapper
from ..core.pydantic_utilities import parse_obj_as
from ..core.request_options import RequestOptions
from ..errors.bad_request_error import BadRequestError
from ..errors.forbidden_error import ForbiddenError
from ..errors.internal_server_error import InternalServerError
from ..errors.unauthorized_error import UnauthorizedError
from ..types.bad_request_error_body import BadRequestErrorBody
from ..types.did_document import DidDocument
from ..types.problem_forbidden import ProblemForbidden
from ..types.problem_internal_server_error import ProblemInternalServerError
from ..types.problem_unauthorized import ProblemUnauthorized


class DidsClient:
    def __init__(self, *, client_wrapper: SyncClientWrapper):
        self._client_wrapper = client_wrapper

    def did_document_self_get(self, *, request_options: typing.Optional[RequestOptions] = None) -> DidDocument:
        """
        Return the tenant's DID(did:web) document.
        Comparing to [DIDDocumentGet](#tag/desk/operation/DIDDocumentGet) endpoint, this one returns the tenant's DID(did:web) document for the authenticated tenant only.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DidDocument
            Response with the tenant's DID(did:web) document.

        Examples
        --------
        from truvity_sdk import TruvityApi

        client = TruvityApi(
            api_key="YOUR_API_KEY",
        )
        client.dids.did_document_self_get()
        """
        _response = self._client_wrapper.httpx_client.request(
            "dids/self", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(DidDocument, parse_obj_as(type_=DidDocument, object_=_response.json()))  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequestErrorBody, parse_obj_as(type_=BadRequestErrorBody, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(ProblemUnauthorized, parse_obj_as(type_=ProblemUnauthorized, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(ProblemForbidden, parse_obj_as(type_=ProblemForbidden, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(ProblemInternalServerError, parse_obj_as(type_=ProblemInternalServerError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)


class AsyncDidsClient:
    def __init__(self, *, client_wrapper: AsyncClientWrapper):
        self._client_wrapper = client_wrapper

    async def did_document_self_get(self, *, request_options: typing.Optional[RequestOptions] = None) -> DidDocument:
        """
        Return the tenant's DID(did:web) document.
        Comparing to [DIDDocumentGet](#tag/desk/operation/DIDDocumentGet) endpoint, this one returns the tenant's DID(did:web) document for the authenticated tenant only.

        Parameters
        ----------
        request_options : typing.Optional[RequestOptions]
            Request-specific configuration.

        Returns
        -------
        DidDocument
            Response with the tenant's DID(did:web) document.

        Examples
        --------
        import asyncio

        from truvity_sdk import AsyncTruvityApi

        client = AsyncTruvityApi(
            api_key="YOUR_API_KEY",
        )


        async def main() -> None:
            await client.dids.did_document_self_get()


        asyncio.run(main())
        """
        _response = await self._client_wrapper.httpx_client.request(
            "dids/self", method="GET", request_options=request_options
        )
        try:
            if 200 <= _response.status_code < 300:
                return typing.cast(DidDocument, parse_obj_as(type_=DidDocument, object_=_response.json()))  # type: ignore
            if _response.status_code == 400:
                raise BadRequestError(
                    typing.cast(BadRequestErrorBody, parse_obj_as(type_=BadRequestErrorBody, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 401:
                raise UnauthorizedError(
                    typing.cast(ProblemUnauthorized, parse_obj_as(type_=ProblemUnauthorized, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 403:
                raise ForbiddenError(
                    typing.cast(ProblemForbidden, parse_obj_as(type_=ProblemForbidden, object_=_response.json()))  # type: ignore
                )
            if _response.status_code == 500:
                raise InternalServerError(
                    typing.cast(ProblemInternalServerError, parse_obj_as(type_=ProblemInternalServerError, object_=_response.json()))  # type: ignore
                )
            _response_json = _response.json()
        except JSONDecodeError:
            raise ApiError(status_code=_response.status_code, body=_response.text)
        raise ApiError(status_code=_response.status_code, body=_response_json)
