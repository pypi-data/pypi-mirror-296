# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class FilterIntegerOptional_Between(UniversalBaseModel):
    """
    Schema of the filter by integer value by the requested operator.
    The optional filter has IS_NULL and IS_NOT_NULL operators.
    """

    operator: typing.Literal["BETWEEN"] = "BETWEEN"
    left: int
    right: int

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterIntegerOptional_Equal(UniversalBaseModel):
    """
    Schema of the filter by integer value by the requested operator.
    The optional filter has IS_NULL and IS_NOT_NULL operators.
    """

    operator: typing.Literal["EQUAL"] = "EQUAL"
    value: int

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterIntegerOptional_GreaterThan(UniversalBaseModel):
    """
    Schema of the filter by integer value by the requested operator.
    The optional filter has IS_NULL and IS_NOT_NULL operators.
    """

    operator: typing.Literal["GREATER_THAN"] = "GREATER_THAN"
    value: int

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterIntegerOptional_GreaterThanOrEqual(UniversalBaseModel):
    """
    Schema of the filter by integer value by the requested operator.
    The optional filter has IS_NULL and IS_NOT_NULL operators.
    """

    operator: typing.Literal["GREATER_THAN_OR_EQUAL"] = "GREATER_THAN_OR_EQUAL"
    value: int

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterIntegerOptional_IsNotNull(UniversalBaseModel):
    """
    Schema of the filter by integer value by the requested operator.
    The optional filter has IS_NULL and IS_NOT_NULL operators.
    """

    operator: typing.Literal["IS_NOT_NULL"] = "IS_NOT_NULL"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterIntegerOptional_IsNull(UniversalBaseModel):
    """
    Schema of the filter by integer value by the requested operator.
    The optional filter has IS_NULL and IS_NOT_NULL operators.
    """

    operator: typing.Literal["IS_NULL"] = "IS_NULL"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterIntegerOptional_LessThan(UniversalBaseModel):
    """
    Schema of the filter by integer value by the requested operator.
    The optional filter has IS_NULL and IS_NOT_NULL operators.
    """

    operator: typing.Literal["LESS_THAN"] = "LESS_THAN"
    value: int

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterIntegerOptional_LessThanOrEqual(UniversalBaseModel):
    """
    Schema of the filter by integer value by the requested operator.
    The optional filter has IS_NULL and IS_NOT_NULL operators.
    """

    operator: typing.Literal["LESS_THAN_OR_EQUAL"] = "LESS_THAN_OR_EQUAL"
    value: int

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterIntegerOptional_NotEqual(UniversalBaseModel):
    """
    Schema of the filter by integer value by the requested operator.
    The optional filter has IS_NULL and IS_NOT_NULL operators.
    """

    operator: typing.Literal["NOT_EQUAL"] = "NOT_EQUAL"
    value: int

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


FilterIntegerOptional = typing.Union[
    FilterIntegerOptional_Between,
    FilterIntegerOptional_Equal,
    FilterIntegerOptional_GreaterThan,
    FilterIntegerOptional_GreaterThanOrEqual,
    FilterIntegerOptional_IsNotNull,
    FilterIntegerOptional_IsNull,
    FilterIntegerOptional_LessThan,
    FilterIntegerOptional_LessThanOrEqual,
    FilterIntegerOptional_NotEqual,
]
