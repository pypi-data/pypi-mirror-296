# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class DraftBaseFieldValue(UniversalBaseModel):
    """
    Common properties for all field values.
    """

    name: str = pydantic.Field()
    """
    Field name.
    """

    is_array: typing.Optional[bool] = pydantic.Field(default=None)
    """
    Determine whether the field values should be an array.
    """

    not_empty: typing.Optional[bool] = pydantic.Field(default=None)
    """
    The value of the field must not be empty.
    This option not only makes the value required, but also adds additional validation rules.
    For instance, for string types, an empty string won't pass the validation.
    It must have a length greater than 0.
    """

    title: typing.Optional[str] = pydantic.Field(default=None)
    """
    The human-readable name of the field can be used to display the field in the UI.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
