# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class FilterArray_In(UniversalBaseModel):
    """
    Schema of the filter by array value by the requested operator.
    """

    operator: typing.Literal["IN"] = "IN"
    values: typing.List[str]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterArray_NotIn(UniversalBaseModel):
    """
    Schema of the filter by array value by the requested operator.
    """

    operator: typing.Literal["NOT_IN"] = "NOT_IN"
    values: typing.List[str]

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


FilterArray = typing.Union[FilterArray_In, FilterArray_NotIn]
