# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .e_tag import ETag
from .resource import Resource
from .uri_reference import UriReference


class ProblemConflictResource(UniversalBaseModel):
    """
    Impossible to modify resource due to race condition.
    Additional information:
    type: /conflict/resource
    status: 412
    title: Precondition Failed
    .
    """

    type: UriReference
    status: int = pydantic.Field()
    """
    The HTTP system code generated by the origin server for this occurrence of the problem.
    """

    title: str = pydantic.Field()
    """
    A short, human-readable summary of the problem type.
    """

    expected: ETag
    actual: Resource
    detail: typing.Optional[str] = pydantic.Field(default=None)
    """
    A human-readable explanation specific to this occurrence of the problem.
    """

    instance: typing.Optional[str] = pydantic.Field(default=None)
    """
    A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
