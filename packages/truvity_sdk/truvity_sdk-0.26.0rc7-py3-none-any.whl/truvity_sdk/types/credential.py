# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .credential_id import CredentialId
from .credential_issuer import CredentialIssuer
from .credential_type import CredentialType
from .credential_valid_from import CredentialValidFrom
from .credential_valid_until import CredentialValidUntil
from .credentil_holder import CredentilHolder
from .data_model_credential import DataModelCredential
from .uri import Uri


class Credential(UniversalBaseModel):
    """
    A generic representation of a verifiable crendential. [Terminology](https://www.w3.org/TR/vc-json-schema/#terminology).
    """

    id: CredentialId
    issuer: CredentialIssuer
    type: CredentialType
    data_model: DataModelCredential
    valid_from: CredentialValidFrom
    multihash: str = pydantic.Field()
    """
    The multihash of canonical Credential body. [Multihash](https://www.w3.org/TR/vc-data-integrity/#multihash).
    """

    holder: typing.Optional[CredentilHolder] = None
    linked_credentials: typing.Optional[typing.List[Uri]] = pydantic.Field(default=None)
    """
    A list of linked credentials.
    """

    linked_files: typing.Optional[typing.List[Uri]] = pydantic.Field(default=None)
    """
    A list of linked files.
    """

    valid_until: typing.Optional[CredentialValidUntil] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
