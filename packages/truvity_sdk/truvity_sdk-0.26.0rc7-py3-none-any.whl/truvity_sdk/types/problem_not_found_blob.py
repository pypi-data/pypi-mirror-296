# This file was auto-generated by Fern from our API Definition.

import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .blob_id import BlobId
from .resource_kind import ResourceKind


class ProblemNotFoundBlob(UniversalBaseModel):
    """
    Impossible to find requested resource.
    Additional information:
    type: /not-found/blob
    status: 404
    title: Not Found
    .
    """

    status: int = pydantic.Field()
    """
    The HTTP system code generated by the origin server for this occurrence of the problem.
    """

    title: str = pydantic.Field()
    """
    A short, human-readable summary of the problem type.
    """

    kind: ResourceKind
    id: BlobId
    detail: typing.Optional[str] = pydantic.Field(default=None)
    """
    A human-readable explanation specific to this occurrence of the problem.
    """

    instance: typing.Optional[str] = pydantic.Field(default=None)
    """
    A URI reference that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow
