# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .draft_enum_value import DraftEnumValue
from .draft_field_link_type import DraftFieldLinkType


class DraftSchemaFieldsItem_Boolean(UniversalBaseModel):
    """
    A list of claims definitions.
    """

    kind: typing.Literal["BOOLEAN"] = "BOOLEAN"
    name: str
    is_array: typing.Optional[bool] = None
    not_empty: typing.Optional[bool] = None
    title: typing.Optional[str] = None
    type: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class DraftSchemaFieldsItem_Date(UniversalBaseModel):
    """
    A list of claims definitions.
    """

    kind: typing.Literal["DATE"] = "DATE"
    name: str
    is_array: typing.Optional[bool] = None
    not_empty: typing.Optional[bool] = None
    title: typing.Optional[str] = None
    type: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class DraftSchemaFieldsItem_Datetime(UniversalBaseModel):
    """
    A list of claims definitions.
    """

    kind: typing.Literal["DATETIME"] = "DATETIME"
    name: str
    is_array: typing.Optional[bool] = None
    not_empty: typing.Optional[bool] = None
    title: typing.Optional[str] = None
    type: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class DraftSchemaFieldsItem_File(UniversalBaseModel):
    """
    A list of claims definitions.
    """

    kind: typing.Literal["FILE"] = "FILE"
    name: str
    is_array: typing.Optional[bool] = None
    not_empty: typing.Optional[bool] = None
    title: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class DraftSchemaFieldsItem_Link(UniversalBaseModel):
    """
    A list of claims definitions.
    """

    kind: typing.Literal["LINK"] = "LINK"
    link_type: typing.Optional[DraftFieldLinkType] = None
    name: str
    is_array: typing.Optional[bool] = None
    not_empty: typing.Optional[bool] = None
    title: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class DraftSchemaFieldsItem_Number(UniversalBaseModel):
    """
    A list of claims definitions.
    """

    kind: typing.Literal["NUMBER"] = "NUMBER"
    name: str
    is_array: typing.Optional[bool] = None
    not_empty: typing.Optional[bool] = None
    title: typing.Optional[str] = None
    type: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class DraftSchemaFieldsItem_String(UniversalBaseModel):
    """
    A list of claims definitions.
    """

    kind: typing.Literal["STRING"] = "STRING"
    enum: typing.Optional[typing.List[DraftEnumValue]] = None
    name: str
    is_array: typing.Optional[bool] = None
    not_empty: typing.Optional[bool] = None
    title: typing.Optional[str] = None
    type: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class DraftSchemaFieldsItem_Struct(UniversalBaseModel):
    """
    A list of claims definitions.
    """

    kind: typing.Literal["STRUCT"] = "STRUCT"
    name: str
    is_array: typing.Optional[bool] = None
    not_empty: typing.Optional[bool] = None
    title: typing.Optional[str] = None
    fields: typing.List[DraftSchemaFieldsItem]
    vocab_namespace: str
    vocab_name: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


DraftSchemaFieldsItem = typing.Union[
    DraftSchemaFieldsItem_Boolean,
    DraftSchemaFieldsItem_Date,
    DraftSchemaFieldsItem_Datetime,
    DraftSchemaFieldsItem_File,
    DraftSchemaFieldsItem_Link,
    DraftSchemaFieldsItem_Number,
    DraftSchemaFieldsItem_String,
    DraftSchemaFieldsItem_Struct,
]
