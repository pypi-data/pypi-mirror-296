# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel
from .content_type import ContentType
from .http_request_part import HttpRequestPart
from .uri_reference import UriReference
from .validation_error import ValidationError


class BadRequestErrorBody_BadRequestBodyContent(UniversalBaseModel):
    type: typing.Literal["/bad-request/body-content"] = "/bad-request/body-content"
    status: int
    title: str
    content_type: ContentType
    detail: typing.Optional[str] = None
    instance: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class BadRequestErrorBody_BadRequestHasNullUnicodeCharacter(UniversalBaseModel):
    type: typing.Literal["/bad-request/has-null-unicode-character"] = "/bad-request/has-null-unicode-character"
    status: int
    title: str
    location: HttpRequestPart
    position: int
    detail: typing.Optional[str] = None
    instance: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class BadRequestErrorBody_BadRequestValidation(UniversalBaseModel):
    type: typing.Literal["/bad-request/validation"] = "/bad-request/validation"
    status: int
    title: str
    request: HttpRequestPart
    schema_: UriReference = pydantic.Field(alias="schema")
    errors: typing.List[ValidationError]
    detail: typing.Optional[str] = None
    instance: typing.Optional[str] = None

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


BadRequestErrorBody = typing.Union[
    BadRequestErrorBody_BadRequestBodyContent,
    BadRequestErrorBody_BadRequestHasNullUnicodeCharacter,
    BadRequestErrorBody_BadRequestValidation,
]
