# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class FilterUriOptional_Equal(UniversalBaseModel):
    """
    Schema of the filter by URI value by the requested operator.
    The optional filter has IS_NULL and IS_NOT_NULL operators.
    """

    operator: typing.Literal["EQUAL"] = "EQUAL"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterUriOptional_IsNotNull(UniversalBaseModel):
    """
    Schema of the filter by URI value by the requested operator.
    The optional filter has IS_NULL and IS_NOT_NULL operators.
    """

    operator: typing.Literal["IS_NOT_NULL"] = "IS_NOT_NULL"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterUriOptional_IsNull(UniversalBaseModel):
    """
    Schema of the filter by URI value by the requested operator.
    The optional filter has IS_NULL and IS_NOT_NULL operators.
    """

    operator: typing.Literal["IS_NULL"] = "IS_NULL"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterUriOptional_NotEqual(UniversalBaseModel):
    """
    Schema of the filter by URI value by the requested operator.
    The optional filter has IS_NULL and IS_NOT_NULL operators.
    """

    operator: typing.Literal["NOT_EQUAL"] = "NOT_EQUAL"
    value: str

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


FilterUriOptional = typing.Union[
    FilterUriOptional_Equal, FilterUriOptional_IsNotNull, FilterUriOptional_IsNull, FilterUriOptional_NotEqual
]
