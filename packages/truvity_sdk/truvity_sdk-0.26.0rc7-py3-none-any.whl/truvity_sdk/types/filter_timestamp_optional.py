# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import datetime as dt
import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class FilterTimestampOptional_Between(UniversalBaseModel):
    """
    Schema of the filter by timestamp value by the requested operator.
    The optional filter has IS_NULL and IS_NOT_NULL operators.
    """

    operator: typing.Literal["BETWEEN"] = "BETWEEN"
    left: dt.datetime
    right: dt.datetime

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterTimestampOptional_GreaterThan(UniversalBaseModel):
    """
    Schema of the filter by timestamp value by the requested operator.
    The optional filter has IS_NULL and IS_NOT_NULL operators.
    """

    operator: typing.Literal["GREATER_THAN"] = "GREATER_THAN"
    value: dt.datetime

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterTimestampOptional_GreaterThanOrEqual(UniversalBaseModel):
    """
    Schema of the filter by timestamp value by the requested operator.
    The optional filter has IS_NULL and IS_NOT_NULL operators.
    """

    operator: typing.Literal["GREATER_THAN_OR_EQUAL"] = "GREATER_THAN_OR_EQUAL"
    value: dt.datetime

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterTimestampOptional_IsNotNull(UniversalBaseModel):
    """
    Schema of the filter by timestamp value by the requested operator.
    The optional filter has IS_NULL and IS_NOT_NULL operators.
    """

    operator: typing.Literal["IS_NOT_NULL"] = "IS_NOT_NULL"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterTimestampOptional_IsNull(UniversalBaseModel):
    """
    Schema of the filter by timestamp value by the requested operator.
    The optional filter has IS_NULL and IS_NOT_NULL operators.
    """

    operator: typing.Literal["IS_NULL"] = "IS_NULL"

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterTimestampOptional_LessThan(UniversalBaseModel):
    """
    Schema of the filter by timestamp value by the requested operator.
    The optional filter has IS_NULL and IS_NOT_NULL operators.
    """

    operator: typing.Literal["LESS_THAN"] = "LESS_THAN"
    value: dt.datetime

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterTimestampOptional_LessThanOrEqual(UniversalBaseModel):
    """
    Schema of the filter by timestamp value by the requested operator.
    The optional filter has IS_NULL and IS_NOT_NULL operators.
    """

    operator: typing.Literal["LESS_THAN_OR_EQUAL"] = "LESS_THAN_OR_EQUAL"
    value: dt.datetime

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


FilterTimestampOptional = typing.Union[
    FilterTimestampOptional_Between,
    FilterTimestampOptional_GreaterThan,
    FilterTimestampOptional_GreaterThanOrEqual,
    FilterTimestampOptional_IsNotNull,
    FilterTimestampOptional_IsNull,
    FilterTimestampOptional_LessThan,
    FilterTimestampOptional_LessThanOrEqual,
]
