# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel, update_forward_refs


class DraftSchema(UniversalBaseModel):
    """
    A schema for a draft.
    """

    fields: typing.List[DraftSchemaFieldsItem] = pydantic.Field()
    """
    The list of claims in the draft. This list defines the credential data model.
    """

    vocab_namespace: str = pydantic.Field()
    """
    The JSON-LD vocabulary namespace is used to define the `@id` of the generated vocabulary, which identifies
    the semantics of the credential claims.
    
    The final `@id` is resolved as `<vocab_namespace>#<vocab_name>`.
    For example: `https://www.w3.org/2018/credentials#VerifiableCredential`.
    
    It's important to carefully select the namespace for vocabularies, as it can impact whether counterparties
    will trust the issued credentials or not.
    
    A common practice is to dedicate a specific web page on the company's website for the vocabulary.
    This page not only semantically binds the vocabulary with the company but may also contain documentation
    for developers, explaining the meaning of fields and how they should be processed.
    
    The aforementioned web page can be served on a subdomain (e.g., `https://vocabulary.my-company.com`)
    or on a specific pathname (e.g., `https://my-company.com/vocabulary`).
    
    Keep in mind that to issue and verify a VC, the URI of the `vocab_namespace` might not need to be resolvable.
    However, this could decrease the discoverability of the semantics and the further adoption of the vocabularies.
    
    A few examples:
    
    - https://vocabulary.uncefact.org
    - https://w3id.org/traceability
    - https://www.w3.org/2018/credentials
    """

    vocab_name: str = pydantic.Field()
    """
    The name of the JSON-LD vocabulary that will be generated from the `fields` definitions.
    A vocabulary is a user-defined dictionary that consolidates various claims under a single name.
    Vocabularies are used to logically group related data, representing composite information.
    It's important to ensure that the vocabulary name is unique within the `vocab_namespace`.
    
    A few examples: `BillOfLading`, `BankAccount`.
    """

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


from .draft_schema_fields_item import DraftSchemaFieldsItem  # noqa: E402

update_forward_refs(DraftSchema)
