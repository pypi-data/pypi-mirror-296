# This file was auto-generated by Fern from our API Definition.

from __future__ import annotations

import typing

import pydantic

from ..core.pydantic_utilities import IS_PYDANTIC_V2, UniversalBaseModel


class FilterInteger_Between(UniversalBaseModel):
    """
    Schema of the filter by integer value by the requested operator.
    """

    operator: typing.Literal["BETWEEN"] = "BETWEEN"
    left: int
    right: int

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterInteger_Equal(UniversalBaseModel):
    """
    Schema of the filter by integer value by the requested operator.
    """

    operator: typing.Literal["EQUAL"] = "EQUAL"
    value: int

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterInteger_GreaterThan(UniversalBaseModel):
    """
    Schema of the filter by integer value by the requested operator.
    """

    operator: typing.Literal["GREATER_THAN"] = "GREATER_THAN"
    value: int

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterInteger_GreaterThanOrEqual(UniversalBaseModel):
    """
    Schema of the filter by integer value by the requested operator.
    """

    operator: typing.Literal["GREATER_THAN_OR_EQUAL"] = "GREATER_THAN_OR_EQUAL"
    value: int

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterInteger_LessThan(UniversalBaseModel):
    """
    Schema of the filter by integer value by the requested operator.
    """

    operator: typing.Literal["LESS_THAN"] = "LESS_THAN"
    value: int

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterInteger_LessThanOrEqual(UniversalBaseModel):
    """
    Schema of the filter by integer value by the requested operator.
    """

    operator: typing.Literal["LESS_THAN_OR_EQUAL"] = "LESS_THAN_OR_EQUAL"
    value: int

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


class FilterInteger_NotEqual(UniversalBaseModel):
    """
    Schema of the filter by integer value by the requested operator.
    """

    operator: typing.Literal["NOT_EQUAL"] = "NOT_EQUAL"
    value: int

    if IS_PYDANTIC_V2:
        model_config: typing.ClassVar[pydantic.ConfigDict] = pydantic.ConfigDict(extra="allow", frozen=True)  # type: ignore # Pydantic v2
    else:

        class Config:
            frozen = True
            smart_union = True
            extra = pydantic.Extra.allow


FilterInteger = typing.Union[
    FilterInteger_Between,
    FilterInteger_Equal,
    FilterInteger_GreaterThan,
    FilterInteger_GreaterThanOrEqual,
    FilterInteger_LessThan,
    FilterInteger_LessThanOrEqual,
    FilterInteger_NotEqual,
]
