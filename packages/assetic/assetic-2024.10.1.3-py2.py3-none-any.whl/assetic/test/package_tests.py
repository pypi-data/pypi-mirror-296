"""
Need py3.7 min to run pytest
"""
import assetic
from datetime import datetime  #use to generate a unique asset id


class Setup(object):
    def __init__(self):
        self._api_client = None

    @property
    def api_client(self):
        return self._api_client

    @api_client.setter
    def api_client(self, value):
        self._api_client = value

    def init_asseticsdk(self):
        """
        Test initialising the SDK
        Assumes default settings
        :return: True unless exception
        """
        try:
            asseticsdk = assetic.AsseticSDK()
        except Exception as ex:
            raise ex
        self.api_client = asseticsdk.client
        return True

    def test_version_api(self):
        """
        Test version API by ensuring there is a response
        :return: True unless exception
        """
        version_api = assetic.VersionApi(api_client=self.api_client)
        try:
            response = version_api.version_get()
        except Exception as ex:
            print(ex)
            return False
        if "Major" not in response or response["Major"] < 2023:
            print("Major Version not found")
            return False
        print("Assetic Version: {0}.{1}.{2}.{3}".format(
            response["Major"], response["Minor"], response["Build"]
            , response["Revision"]))
        return True


class AssetTests(object):
    def __init__(self, api_client):
        self.assets_api = assetic.AssetApi(api_client=api_client)
        self.asset_tools = assetic.AssetTools(api_client=api_client)
        self.asset_config_api = assetic.AssetConfigurationApi(
            api_client=api_client)
        self._asset_id = None

    @property
    def asset_id(self):
        return self._asset_id

    @asset_id.setter
    def asset_id(self, value):
        self._asset_id = value

    def get_assets(self):
        attributes = ["Zone"]
        try:
            response = self.assets_api.asset_get_0(attributes)
        except Exception as ex:
            raise ex

        if response["TotalResults"] > 0:
            self.asset_id = response["ResourceList"][0]["AssetId"]
        return True

    def get_complete_asset(self):
        if not self.asset_id:
            # no asset data to work with
            return True

        attributes = ["Zone"]
        inclusions = ["components", "dimensions", "service_criteria"]

        asset = self.asset_tools.get_complete_asset(
            assetid=self.asset_id, attributelist=attributes
            , inclusions=inclusions)
        if not asset:
            return False
        return True

    def create_test_asset(self):
        """
        Create a test asset
        """

        # generate a id based on the current time
        dt = datetime.now()
        unique_id = "{0}{1}{2}{3}{4}".format(
            dt.month, dt.day, dt.hour, dt.minute, dt.second)
        # instantiate the complete asset representation
        complete_asset_obj = assetic.AssetToolsCompleteAssetRepresentation()

        # create an instance of the complex asset object
        asset = assetic.ComplexAssetRepresentation()
        # mandatory fields
        asset.asset_category = "Buildings"
        asset.status = "Active"
        if not self.IsCategoryAutoId("Buildings"):
            # need to set ID as not autogenerated
            asset.asset_id = unique_id
        asset.asset_name = "B{0}".format(unique_id)

        complete_asset_obj.asset_representation = asset

        # create the complete asset
        response = self.asset_tools.create_complete_asset(complete_asset_obj)

        if len(response.asset_representation.id) > 0:
            # get some ID's
            assetid = response.asset_representation.asset_id
            self.asset_id = assetid
            return True
        else:
            return False

    def IsCategoryAutoId(self, category_label):
        try:
            response = self.asset_config_api.asset_configuration_get_asset_category()
        except Exception as ex:
            print(ex)
            return False
        for cat in response["ResourceList"]:
            if cat["Label"] == category_label:
                if cat["UseAutogeneratedId"] == "true":
                    return True
                else:
                    return False

class ReportingTests(object):
    """
    Tests for Reporting module
    """
    def __init__(self, api_client):
        self.report_view_api = assetic.ReportingViewApi(api_client=api_client)
        self.report_export_api = assetic.ReportingExportApi(api_client=api_client)
        self._report_id = None
        self._export_id = None

    def get_reports(self):
        try:
            response = self.report_view_api.reporting_view_get_list()
        except Exception as ex:
            print(ex)
            return False
        if len(response) > 0:
            self._report_id = response[0]["id"]
        return True

    def initiate_export(self):
        try:
            response = self.report_export_api.reporting_export_get_export_0(self._report_id)
        except Exception as ex:
            print(ex)
            return False
        if len(response) > 0:
            self._export_id = response["id"]
        return True

    def get_export_status(self):
        try:
            response = self.report_export_api.reporting_export_get_export(self._export_id)
        except Exception as ex:
            print(ex)
            return False
        status = response["status"]
        return True


# initiate setup class
setup_tests = Setup()
setup_tests.init_asseticsdk()
# check we have a api_client setting
if setup_tests.api_client.configuration.password == "" or \
        setup_tests.api_client.configuration.host == "https://xxx.assetic.net":
    raise Exception("Package test authorisation not set")

# initiate SDK to set client
# setup_tests.init_asseticsdk()
# Initiate other classes.
asset_tests = AssetTests(setup_tests.api_client)
reporting_tests = ReportingTests(setup_tests.api_client)

def test_setup():
    """
    test initialisation of sdk
    """
    assert setup_tests.init_asseticsdk()


def test_version():
    """
    test version API, fails if unable to get Assetic version
    """
    assert setup_tests.test_version_api()


def test_asset_collection_get():
    """
    test the asset GET collection API
    """
    assert asset_tests.get_assets()


def test_get_complete_asset():
    """
    test the tool get complete asset using an asset from
    the result of test_asset_collection_get
    """
    assert asset_tests.get_complete_asset()


def test_create_complete_asset():
    """
    test the tool create asset in Buildings category
    """
    assert asset_tests.create_test_asset()


def test_get_reports_list():
    """
    test the tool get a list of saved reports
    """
    assert reporting_tests.get_reports()


def test_initiate_export_report():
    """
    test the tool get a list of saved reports
    """
    assert reporting_tests.initiate_export()


def test_get_export_report_status():
    """
    test the tool get a list of saved reports
    """
    assert reporting_tests.get_export_status()
