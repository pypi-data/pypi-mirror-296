# coding: utf-8

"""
    Humanloop API

    The Humanloop API allows you to interact with Humanloop from your product or service.  You can do this through HTTP requests from any language or via our official Python or TypeScript SDK.  To install the official [Python SDK](https://pypi.org/project/humanloop/), run the following command:  ```bash pip install humanloop ```  To install the official [TypeScript SDK](https://www.npmjs.com/package/humanloop), run the following command:  ```bash npm i humanloop ```  ---  Guides and further details about key concepts can be found in [our docs](https://docs.humanloop.com/).

    The version of the OpenAPI document: 4.0.1
    Generated by: https://konfigthis.com
"""

from dataclasses import dataclass
import typing_extensions
import urllib3
from pydantic import RootModel
from humanloop.request_before_hook import request_before_hook
import json
from urllib3._collections import HTTPHeaderDict

from humanloop.api_response import AsyncGeneratorResponse
from humanloop import api_client, exceptions
from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from humanloop import schemas  # noqa: F401

from humanloop.model.evaluation_response import EvaluationResponse as EvaluationResponseSchema
from humanloop.model.http_validation_error import HTTPValidationError as HTTPValidationErrorSchema
from humanloop.model.provider_api_keys import ProviderApiKeys as ProviderApiKeysSchema
from humanloop.model.create_evaluation_request_evaluator_ids import CreateEvaluationRequestEvaluatorIds as CreateEvaluationRequestEvaluatorIdsSchema
from humanloop.model.create_evaluation_request import CreateEvaluationRequest as CreateEvaluationRequestSchema

from humanloop.type.create_evaluation_request_evaluator_ids import CreateEvaluationRequestEvaluatorIds
from humanloop.type.create_evaluation_request import CreateEvaluationRequest
from humanloop.type.provider_api_keys import ProviderApiKeys
from humanloop.type.evaluation_response import EvaluationResponse
from humanloop.type.http_validation_error import HTTPValidationError

from ...api_client import Dictionary
from humanloop.pydantic.evaluation_response import EvaluationResponse as EvaluationResponsePydantic
from humanloop.pydantic.create_evaluation_request_evaluator_ids import CreateEvaluationRequestEvaluatorIds as CreateEvaluationRequestEvaluatorIdsPydantic
from humanloop.pydantic.create_evaluation_request import CreateEvaluationRequest as CreateEvaluationRequestPydantic
from humanloop.pydantic.http_validation_error import HTTPValidationError as HTTPValidationErrorPydantic
from humanloop.pydantic.provider_api_keys import ProviderApiKeys as ProviderApiKeysPydantic

from . import path

# Path params
ProjectIdSchema = schemas.StrSchema
RequestRequiredPathParams = typing_extensions.TypedDict(
    'RequestRequiredPathParams',
    {
        'project_id': typing.Union[ProjectIdSchema, str, ],
    }
)
RequestOptionalPathParams = typing_extensions.TypedDict(
    'RequestOptionalPathParams',
    {
    },
    total=False
)


class RequestPathParams(RequestRequiredPathParams, RequestOptionalPathParams):
    pass


request_path_project_id = api_client.PathParameter(
    name="project_id",
    style=api_client.ParameterStyle.SIMPLE,
    schema=ProjectIdSchema,
    required=True,
)
# body param
SchemaForRequestBodyApplicationJson = CreateEvaluationRequestSchema


request_body_create_evaluation_request = api_client.RequestBody(
    content={
        'application/json': api_client.MediaType(
            schema=SchemaForRequestBodyApplicationJson),
    },
    required=True,
)
_auth = [
    'APIKeyHeader',
]
SchemaFor201ResponseBodyApplicationJson = EvaluationResponseSchema


@dataclass
class ApiResponseFor201(api_client.ApiResponse):
    body: EvaluationResponse


@dataclass
class ApiResponseFor201Async(api_client.AsyncApiResponse):
    body: EvaluationResponse


_response_for_201 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor201,
    response_cls_async=ApiResponseFor201Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor201ResponseBodyApplicationJson),
    },
)
SchemaFor422ResponseBodyApplicationJson = HTTPValidationErrorSchema


@dataclass
class ApiResponseFor422(api_client.ApiResponse):
    body: HTTPValidationError


@dataclass
class ApiResponseFor422Async(api_client.AsyncApiResponse):
    body: HTTPValidationError


_response_for_422 = api_client.OpenApiResponse(
    response_cls=ApiResponseFor422,
    response_cls_async=ApiResponseFor422Async,
    content={
        'application/json': api_client.MediaType(
            schema=SchemaFor422ResponseBodyApplicationJson),
    },
)
_status_code_to_response = {
    '201': _response_for_201,
    '422': _response_for_422,
}
_all_accept_content_types = (
    'application/json',
)


class BaseApi(api_client.Api):

    def _create_mapped_args(
        self,
        config_id: str,
        evaluator_ids: CreateEvaluationRequestEvaluatorIds,
        dataset_id: str,
        project_id: str,
        provider_api_keys: typing.Optional[ProviderApiKeys] = None,
        hl_generated: typing.Optional[bool] = None,
        name: typing.Optional[str] = None,
    ) -> api_client.MappedArgs:
        args: api_client.MappedArgs = api_client.MappedArgs()
        _path_params = {}
        _body = {}
        if config_id is not None:
            _body["config_id"] = config_id
        if evaluator_ids is not None:
            _body["evaluator_ids"] = evaluator_ids
        if dataset_id is not None:
            _body["dataset_id"] = dataset_id
        if provider_api_keys is not None:
            _body["provider_api_keys"] = provider_api_keys
        if hl_generated is not None:
            _body["hl_generated"] = hl_generated
        if name is not None:
            _body["name"] = name
        args.body = _body
        if project_id is not None:
            _path_params["project_id"] = project_id
        args.path = _path_params
        return args

    async def _acreate_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        """
        Create
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_project_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/projects/{project_id}/evaluations',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_create_evaluation_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = await self.api_client.async_call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
            **kwargs
        )
    
        if stream:
            if not 200 <= response.http_response.status <= 299:
                body = (await response.http_response.content.read()).decode("utf-8")
                raise exceptions.ApiStreamingException(
                    status=response.http_response.status,
                    reason=response.http_response.reason,
                    body=body,
                )
    
            async def stream_iterator():
                """
                iterates over response.http_response.content and closes connection once iteration has finished
                """
                async for line in response.http_response.content:
                    if line == b'\r\n':
                        continue
                    yield line
                response.http_response.close()
                await response.session.close()
            return AsyncGeneratorResponse(
                content=stream_iterator(),
                headers=response.http_response.headers,
                status=response.http_response.status,
                response=response.http_response
            )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = await response_for_status.deserialize_async(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserializationAsync(
                body=await response.http_response.json() if is_json else await response.http_response.text(),
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        # cleanup session / response
        response.http_response.close()
        await response.session.close()
    
        return api_response


    def _create_oapg(
        self,
        body: typing.Any = None,
            path_params: typing.Optional[dict] = {},
        skip_deserialization: bool = True,
        timeout: typing.Optional[typing.Union[float, typing.Tuple]] = None,
        accept_content_types: typing.Tuple[str] = _all_accept_content_types,
        content_type: str = 'application/json',
        stream: bool = False,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """
        Create
        :param skip_deserialization: If true then api_response.response will be set but
            api_response.body and api_response.headers will not be deserialized into schema
            class instances
        """
        self._verify_typed_dict_inputs_oapg(RequestPathParams, path_params)
        used_path = path.value
    
        _path_params = {}
        for parameter in (
            request_path_project_id,
        ):
            parameter_data = path_params.get(parameter.name, schemas.unset)
            if parameter_data is schemas.unset:
                continue
            serialized_data = parameter.serialize(parameter_data)
            _path_params.update(serialized_data)
    
        for k, v in _path_params.items():
            used_path = used_path.replace('{%s}' % k, v)
    
        _headers = HTTPHeaderDict()
        # TODO add cookie handling
        if accept_content_types:
            for accept_content_type in accept_content_types:
                _headers.add('Accept', accept_content_type)
        method = 'post'.upper()
        _headers.add('Content-Type', content_type)
    
        if body is schemas.unset:
            raise exceptions.ApiValueError(
                'The required body parameter has an invalid value of: unset. Set a valid value instead')
        _fields = None
        _body = None
        request_before_hook(
            resource_path=used_path,
            method=method,
            configuration=self.api_client.configuration,
            path_template='/projects/{project_id}/evaluations',
            body=body,
            auth_settings=_auth,
            headers=_headers,
        )
        serialized_data = request_body_create_evaluation_request.serialize(body, content_type)
        if 'fields' in serialized_data:
            _fields = serialized_data['fields']
        elif 'body' in serialized_data:
            _body = serialized_data['body']
    
        response = self.api_client.call_api(
            resource_path=used_path,
            method=method,
            headers=_headers,
            fields=_fields,
            serialized_body=_body,
            body=body,
            auth_settings=_auth,
            timeout=timeout,
        )
    
        response_for_status = _status_code_to_response.get(str(response.http_response.status))
        if response_for_status:
            api_response = response_for_status.deserialize(
                                                    response,
                                                    self.api_client.configuration,
                                                    skip_deserialization=skip_deserialization
                                                )
        else:
            # If response data is JSON then deserialize for SDK consumer convenience
            is_json = api_client.JSONDetector._content_type_is_json(response.http_response.headers.get('Content-Type', ''))
            api_response = api_client.ApiResponseWithoutDeserialization(
                body=json.loads(response.http_response.data) if is_json else response.http_response.data,
                response=response.http_response,
                round_trip_time=response.round_trip_time,
                status=response.http_response.status,
                headers=response.http_response.headers,
            )
    
        if not 200 <= api_response.status <= 299:
            raise exceptions.ApiException(api_response=api_response)
    
        return api_response


class CreateRaw(BaseApi):
    # this class is used by api classes that refer to endpoints with operationId fn names

    async def acreate(
        self,
        config_id: str,
        evaluator_ids: CreateEvaluationRequestEvaluatorIds,
        dataset_id: str,
        project_id: str,
        provider_api_keys: typing.Optional[ProviderApiKeys] = None,
        hl_generated: typing.Optional[bool] = None,
        name: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_mapped_args(
            config_id=config_id,
            evaluator_ids=evaluator_ids,
            dataset_id=dataset_id,
            project_id=project_id,
            provider_api_keys=provider_api_keys,
            hl_generated=hl_generated,
            name=name,
        )
        return await self._acreate_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def create(
        self,
        config_id: str,
        evaluator_ids: CreateEvaluationRequestEvaluatorIds,
        dataset_id: str,
        project_id: str,
        provider_api_keys: typing.Optional[ProviderApiKeys] = None,
        hl_generated: typing.Optional[bool] = None,
        name: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """ Create an evaluation. """
        args = self._create_mapped_args(
            config_id=config_id,
            evaluator_ids=evaluator_ids,
            dataset_id=dataset_id,
            project_id=project_id,
            provider_api_keys=provider_api_keys,
            hl_generated=hl_generated,
            name=name,
        )
        return self._create_oapg(
            body=args.body,
            path_params=args.path,
        )

class Create(BaseApi):

    async def acreate(
        self,
        config_id: str,
        evaluator_ids: CreateEvaluationRequestEvaluatorIds,
        dataset_id: str,
        project_id: str,
        provider_api_keys: typing.Optional[ProviderApiKeys] = None,
        hl_generated: typing.Optional[bool] = None,
        name: typing.Optional[str] = None,
        validate: bool = False,
        **kwargs,
    ) -> EvaluationResponsePydantic:
        raw_response = await self.raw.acreate(
            config_id=config_id,
            evaluator_ids=evaluator_ids,
            dataset_id=dataset_id,
            project_id=project_id,
            provider_api_keys=provider_api_keys,
            hl_generated=hl_generated,
            name=name,
            **kwargs,
        )
        if validate:
            return EvaluationResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(EvaluationResponsePydantic, raw_response.body)
    
    
    def create(
        self,
        config_id: str,
        evaluator_ids: CreateEvaluationRequestEvaluatorIds,
        dataset_id: str,
        project_id: str,
        provider_api_keys: typing.Optional[ProviderApiKeys] = None,
        hl_generated: typing.Optional[bool] = None,
        name: typing.Optional[str] = None,
        validate: bool = False,
    ) -> EvaluationResponsePydantic:
        raw_response = self.raw.create(
            config_id=config_id,
            evaluator_ids=evaluator_ids,
            dataset_id=dataset_id,
            project_id=project_id,
            provider_api_keys=provider_api_keys,
            hl_generated=hl_generated,
            name=name,
        )
        if validate:
            return EvaluationResponsePydantic(**raw_response.body)
        return api_client.construct_model_instance(EvaluationResponsePydantic, raw_response.body)


class ApiForpost(BaseApi):
    # this class is used by api classes that refer to endpoints by path and http method names

    async def apost(
        self,
        config_id: str,
        evaluator_ids: CreateEvaluationRequestEvaluatorIds,
        dataset_id: str,
        project_id: str,
        provider_api_keys: typing.Optional[ProviderApiKeys] = None,
        hl_generated: typing.Optional[bool] = None,
        name: typing.Optional[str] = None,
        **kwargs,
    ) -> typing.Union[
        ApiResponseFor201Async,
        api_client.ApiResponseWithoutDeserializationAsync,
        AsyncGeneratorResponse,
    ]:
        args = self._create_mapped_args(
            config_id=config_id,
            evaluator_ids=evaluator_ids,
            dataset_id=dataset_id,
            project_id=project_id,
            provider_api_keys=provider_api_keys,
            hl_generated=hl_generated,
            name=name,
        )
        return await self._acreate_oapg(
            body=args.body,
            path_params=args.path,
            **kwargs,
        )
    
    def post(
        self,
        config_id: str,
        evaluator_ids: CreateEvaluationRequestEvaluatorIds,
        dataset_id: str,
        project_id: str,
        provider_api_keys: typing.Optional[ProviderApiKeys] = None,
        hl_generated: typing.Optional[bool] = None,
        name: typing.Optional[str] = None,
    ) -> typing.Union[
        ApiResponseFor201,
        api_client.ApiResponseWithoutDeserialization,
    ]:
        """ Create an evaluation. """
        args = self._create_mapped_args(
            config_id=config_id,
            evaluator_ids=evaluator_ids,
            dataset_id=dataset_id,
            project_id=project_id,
            provider_api_keys=provider_api_keys,
            hl_generated=hl_generated,
            name=name,
        )
        return self._create_oapg(
            body=args.body,
            path_params=args.path,
        )

