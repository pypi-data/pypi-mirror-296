# coding: utf-8

"""
    Humanloop API

    The Humanloop API allows you to interact with Humanloop from your product or service.  You can do this through HTTP requests from any language or via our official Python or TypeScript SDK.  To install the official [Python SDK](https://pypi.org/project/humanloop/), run the following command:  ```bash pip install humanloop ```  To install the official [TypeScript SDK](https://www.npmjs.com/package/humanloop), run the following command:  ```bash npm i humanloop ```  ---  Guides and further details about key concepts can be found in [our docs](https://docs.humanloop.com/).

    The version of the OpenAPI document: 4.0.1
    Generated by: https://konfigthis.com
"""

from datetime import date, datetime  # noqa: F401
import decimal  # noqa: F401
import functools  # noqa: F401
import io  # noqa: F401
import re  # noqa: F401
import typing  # noqa: F401
import typing_extensions  # noqa: F401
import uuid  # noqa: F401

import frozendict  # noqa: F401

from humanloop import schemas  # noqa: F401


class SessionResponse(
    schemas.DictSchema
):
    """
    This class is auto generated by Konfig (https://konfigthis.com)
    """


    class MetaOapg:
        required = {
            "projects",
            "updated_at",
            "created_at",
            "datapoints_count",
            "id",
        }
        
        class properties:
            id = schemas.StrSchema
            
            
            class projects(
                schemas.ListSchema
            ):
            
            
                class MetaOapg:
                    
                    @staticmethod
                    def items() -> typing.Type['SessionProjectResponse']:
                        return SessionProjectResponse
            
                def __new__(
                    cls,
                    arg: typing.Union[typing.Tuple['SessionProjectResponse'], typing.List['SessionProjectResponse']],
                    _configuration: typing.Optional[schemas.Configuration] = None,
                ) -> 'projects':
                    return super().__new__(
                        cls,
                        arg,
                        _configuration=_configuration,
                    )
            
                def __getitem__(self, i: int) -> 'SessionProjectResponse':
                    return super().__getitem__(i)
            datapoints_count = schemas.IntSchema
            created_at = schemas.DateTimeSchema
            updated_at = schemas.DateTimeSchema
            reference_id = schemas.StrSchema
            first_inputs = schemas.DictSchema
            last_output = schemas.StrSchema
            __annotations__ = {
                "id": id,
                "projects": projects,
                "datapoints_count": datapoints_count,
                "created_at": created_at,
                "updated_at": updated_at,
                "reference_id": reference_id,
                "first_inputs": first_inputs,
                "last_output": last_output,
            }
    
    projects: MetaOapg.properties.projects
    updated_at: MetaOapg.properties.updated_at
    created_at: MetaOapg.properties.created_at
    datapoints_count: MetaOapg.properties.datapoints_count
    id: MetaOapg.properties.id
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["projects"]) -> MetaOapg.properties.projects: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["datapoints_count"]) -> MetaOapg.properties.datapoints_count: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["reference_id"]) -> MetaOapg.properties.reference_id: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["first_inputs"]) -> MetaOapg.properties.first_inputs: ...
    
    @typing.overload
    def __getitem__(self, name: typing_extensions.Literal["last_output"]) -> MetaOapg.properties.last_output: ...
    
    @typing.overload
    def __getitem__(self, name: str) -> schemas.UnsetAnyTypeSchema: ...
    
    def __getitem__(self, name: typing.Union[typing_extensions.Literal["id", "projects", "datapoints_count", "created_at", "updated_at", "reference_id", "first_inputs", "last_output", ], str]):
        # dict_instance[name] accessor
        return super().__getitem__(name)
    
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["id"]) -> MetaOapg.properties.id: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["projects"]) -> MetaOapg.properties.projects: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["datapoints_count"]) -> MetaOapg.properties.datapoints_count: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["created_at"]) -> MetaOapg.properties.created_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["updated_at"]) -> MetaOapg.properties.updated_at: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["reference_id"]) -> typing.Union[MetaOapg.properties.reference_id, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["first_inputs"]) -> typing.Union[MetaOapg.properties.first_inputs, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: typing_extensions.Literal["last_output"]) -> typing.Union[MetaOapg.properties.last_output, schemas.Unset]: ...
    
    @typing.overload
    def get_item_oapg(self, name: str) -> typing.Union[schemas.UnsetAnyTypeSchema, schemas.Unset]: ...
    
    def get_item_oapg(self, name: typing.Union[typing_extensions.Literal["id", "projects", "datapoints_count", "created_at", "updated_at", "reference_id", "first_inputs", "last_output", ], str]):
        return super().get_item_oapg(name)
    

    def __new__(
        cls,
        *args: typing.Union[dict, frozendict.frozendict, ],
        projects: typing.Union[MetaOapg.properties.projects, list, tuple, ],
        updated_at: typing.Union[MetaOapg.properties.updated_at, str, datetime, ],
        created_at: typing.Union[MetaOapg.properties.created_at, str, datetime, ],
        datapoints_count: typing.Union[MetaOapg.properties.datapoints_count, decimal.Decimal, int, ],
        id: typing.Union[MetaOapg.properties.id, str, ],
        reference_id: typing.Union[MetaOapg.properties.reference_id, str, schemas.Unset] = schemas.unset,
        first_inputs: typing.Union[MetaOapg.properties.first_inputs, dict, frozendict.frozendict, schemas.Unset] = schemas.unset,
        last_output: typing.Union[MetaOapg.properties.last_output, str, schemas.Unset] = schemas.unset,
        _configuration: typing.Optional[schemas.Configuration] = None,
        **kwargs: typing.Union[schemas.AnyTypeSchema, dict, frozendict.frozendict, str, date, datetime, uuid.UUID, int, float, decimal.Decimal, None, list, tuple, bytes],
    ) -> 'SessionResponse':
        return super().__new__(
            cls,
            *args,
            projects=projects,
            updated_at=updated_at,
            created_at=created_at,
            datapoints_count=datapoints_count,
            id=id,
            reference_id=reference_id,
            first_inputs=first_inputs,
            last_output=last_output,
            _configuration=_configuration,
            **kwargs,
        )

from humanloop.model.session_project_response import SessionProjectResponse
