Metadata-Version: 2.1
Name: fastapi-oidc-backend
Version: 0.6.0
Summary: Build resource servers with FastAPI
Home-page: https://github.com/BlackVoid/fastapi-oidc-backend
License: MIT
Keywords: fastapi,authentication,oidc,openidconnect
Author: Felix Gustavsson
Author-email: felix@0b1.se
Requires-Python: >=3.11.2,<4.0.0
Classifier: Development Status :: 4 - Beta
Classifier: Environment :: Web Environment
Classifier: Intended Audience :: Developers
Classifier: Intended Audience :: Information Technology
Classifier: License :: OSI Approved :: MIT License
Classifier: Programming Language :: Python :: 3
Classifier: Programming Language :: Python :: 3.12
Classifier: Programming Language :: Python :: 3 :: Only
Classifier: Programming Language :: Python :: 3.6
Classifier: Topic :: Internet
Classifier: Topic :: Internet :: WWW/HTTP
Classifier: Topic :: Internet :: WWW/HTTP :: HTTP Servers
Classifier: Topic :: Software Development :: Libraries
Classifier: Topic :: Software Development :: Libraries :: Application Frameworks
Classifier: Topic :: Software Development :: Libraries :: Python Modules
Requires-Dist: fastapi (>=0,<1)
Requires-Dist: httpx (>=0.27.0,<0.28.0)
Requires-Dist: pyjwt[crypto] (>=2.8.0,<3.0.0)
Project-URL: Repository, https://github.com/BlackVoid/fastapi-oidc-backend
Description-Content-Type: text/markdown

# FastAPI Resource Backend

Build an OIDC resource server using FastAPI.

Your aplication receives the claims decoded from the access token.

Fork of fastapi-resource-server

# Usage

Run keycloak on port 8888:

```sh
docker container run --name auth-server -d -p 8080:8080 \
    -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin \
    quay.io/keycloak/keycloak:latest
```

Install dependencies

```sh
pip install fastapi fastapi_oidc_backend uvicorn
```

Create the main.py module

```python
from contextlib import asynccontextmanager
from fastapi import Depends, FastAPI, Security
from pydantic import BaseModel

from fastapi_oidc_backend.security import OidcResourceServer
from fastapi_oidc_backend.models import JwtKwargs

oidc_config = JwtKwargs(audience="myclient", issuer="http://localhost:8888/realms/myrealm")

@asynccontextmanager
async def app_startup(_app: FastAPI):
    await auth_scheme.load_configuration()
    yield

app = FastAPI(lifespan=app_startup,
              swagger_ui_init_oauth={
                  "clientId": oidc_config.audience,
                  "usePkceWithAuthorizationCodeGrant": True
              })
auth_scheme = OidcResourceServer(
    oidc_config,
    scheme_name="Keycloak",
)


class User(BaseModel):
    username: str
    given_name: str
    family_name: str
    email: str


def get_current_user(claims: dict = Security(auth_scheme)):
    claims.update(username=claims["preferred_username"])
    user = User.parse_obj(claims)
    return user


@app.get("/users/me")
def read_current_user(current_user: User = Depends(get_current_user)):
    return current_user
```

Run the application

```sh
uvicorn main:app
```

