Metadata-Version: 2.1
Name: confidentialmind-core
Version: 0.1.3
Summary: Core functionality for interfacing with the ConfidentialMind stack
Author-email: confidentialmind <info@confidentialmind.com>
License: Apache-2.0
Project-URL: Homepage, https://www.confidentialmind.com/
Classifier: Programming Language :: Python :: 3
Classifier: License :: OSI Approved :: Apache Software License
Classifier: Operating System :: OS Independent
Requires-Python: >=3.10
Description-Content-Type: text/markdown
License-File: LICENSE
License-File: NOTICE
Requires-Dist: pydantic ~=2.8.2
Requires-Dist: websockets >=12.0
Requires-Dist: requests ~=2.32.0
Requires-Dist: python-dotenv

# ConfidentialMind Server

## Overview

The ConfidentialMind core package is a Python library that provides core functionality for interfacing with the ConfidentialMind stack. It manages configurations, handles connections between services, and provides utilities for both local development and deployment within the ConfidentialMind ecosystem.

## Installation


```
pip install confidentialmind-core
```



## Features

- Configuration management with real-time updates
- Service connectivity within the ConfidentialMind stack
- Support for local development and stack deployment
- Streamlit integration for configuration management

## Usage

### Initializing the ConfigManager

```python
from confidentialmind_core.config_manager import ConfigManager, ConnectorSchema

config_manager = ConfigManager()
config_manager.init_manager(
    config_model=YourConfigModel,
    id="your_service_id",
    connectors=[ConnectorSchema(...)],
    use_local_configs=False
)
```

### Using ConfigManager with Streamlit
(Requires Streamlit and the confidentialmind-app-helpers package)

```python
from confidentialmind_app_helpers.streamlit_utils.config_manager_streamlit import init_config_manager

config_manager = init_config_manager(
    config_model=YourConfigModel,
    connectors=[ConnectorSchema(...)],
    id="your_service_id",
    use_local_configs=False
)
```

### Accessing Configurations and Connectors

```python
# Get the current configuration
config = config_manager.config

# Get the list of connectors
connectors = config_manager.connectors

# Get the stack ID for a specific connector
stack_id = config_manager.getStackIdForConnector("connector_config_id")

# Get the URL for a specific connector
url = config_manager.getUrlForConnector("connector_config_id")
```

## Components

### config_manager.py

- `ConfigManager`: Main class for managing configurations and connectors.
- `ConnectorSchema`: Defines the structure for service connectors.
- `ConfigPatch`: Used for updating configurations.

### config_manager_streamlit.py

- `init_config_manager`: Initializes a ConfigManager instance with Streamlit caching.
- `get_config_manager`: Retrieves a cached instance of ConfigManager.

## Configuration

The package uses environment variables for certain configurations:

- `CONFIDENTIAL_MIND_LOCAL_DEV`: Set to "True" for local development.
- `SERVICE_NAME`: Used as the service identifier when running inside the stack.

## Local Development

For local development:

1. Set `CONFIDENTIAL_MIND_LOCAL_DEV="True"`
2. Use `use_local_configs=True` when initializing the ConfigManager.

## Note

This package is designed to work within the ConfidentialMind ecosystem. Ensure you have the necessary permissions and access to the ConfidentialMind stack before using this package in a production environment.

For more detailed information on the ConfidentialMind SDK and its capabilities, please refer to the main SDK documentation.
