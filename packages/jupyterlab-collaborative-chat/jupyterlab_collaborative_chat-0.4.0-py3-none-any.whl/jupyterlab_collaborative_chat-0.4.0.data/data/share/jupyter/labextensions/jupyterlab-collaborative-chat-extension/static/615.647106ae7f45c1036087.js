"use strict";(self.webpackChunkjupyterlab_collaborative_chat_extension=self.webpackChunkjupyterlab_collaborative_chat_extension||[]).push([[615,323],{9323:(e,t,a)=>{a.d(t,{Or:()=>o,Cg:()=>i,_z:()=>r});var n=a(7460);const o=new n.LabIcon({name:"jupyter-chat::chat",svgstr:'<svg xmlns="http://www.w3.org/2000/svg" height="16" viewBox="0 0 24 24" width="16">\n  <g class="jp-icon3" fill="#616161">\n    <path d="M0 0h24v24H0V0z" fill="none"/>\n    <path d="M15 4v7H5.17L4 12.17V4h11m1-2H3c-.55 0-1 .45-1 1v14l4-4h10c.55 0 1-.45 1-1V3c0-.55-.45-1-1-1zm5 4h-2v9H6v2c0 .55.45 1 1 1h11l4 4V7c0-.55-.45-1-1-1z"/>\n  </g>\n</svg>\n'}),i=new n.LabIcon({name:"jupyter-chat::read",svgstr:'<svg height="24px" viewBox="0 0 24 24" width="24px" xmlns="http://www.w3.org/2000/svg">\n  <g>\n    <path\n       style="display:inline;fill:none;fill-opacity:1;stroke:#545454;stroke-width:1.54693;stroke-linecap:butt;stroke-linejoin:miter;stroke-miterlimit:1.5;stroke-dasharray:none;stroke-opacity:1;paint-order:normal"\n       d="M 2.2734634,9 V 20.226537 H 21.726536 V 9" />\n    <path\n       style="display:inline;fill:none;stroke:#545454;stroke-width:1.54528;stroke-linecap:square;stroke-miterlimit:10"\n       transform="matrix(0.81805878,0.57513462,-0.81805878,0.57513462,0,0)"\n       d="M 9.5141659,-5.1535239 H 20.802967 V 6.1352773 H 9.5141659 Z" />\n  </g>\n</svg>\n'}),r=new n.LabIcon({name:"jupyter-ai::replace-cell",svgstr:'<svg width="16" height="16" viewBox="0 0 16 16" fill="none" xmlns="http://www.w3.org/2000/svg">\n    <path fill-rule="evenodd" clip-rule="evenodd"\n        d="M12 4.71429V7H1.71429V4.71429H12ZM12.5714 3C13.2026 3 13.7143 3.51168 13.7143 4.14286V7.57143C13.7143 8.20263 13.2026 8.71429 12.5714 8.71429H1.14286C0.51168 8.71429 0 8.20263 0 7.57143V4.14286C0 3.51168 0.511669 3 1.14286 3H12.5714Z"\n        fill="#565656" />\n    <path fill-rule="evenodd" clip-rule="evenodd"\n        d="M14 8.71429V11H3.71429V8.71429H14ZM14.5714 7C15.2026 7 15.7143 7.51168 15.7143 8.14286V11.5714C15.7143 12.2026 15.2026 12.7143 14.5714 12.7143H3.14286C2.51168 12.7143 2 12.2026 2 11.5714V8.14286C2 7.51168 2.51167 7 3.14286 7H14.5714Z"\n        fill="#565656" />\n</svg>\n'})},9615:(e,t,a)=>{a.r(t),a.d(t,{default:()=>M});const n=new(a(7262).Token)("@jupyter/chat:IAutocompleteRegistry");class o{constructor(){this._default=null,this._autocompletions=new Map}get default(){return this._default}set default(e){null===e||this._autocompletions.has(e)?this._default=e:console.warn(`There is no registered completer with the name '${e}'`)}getDefaultCompletion(){if(null!==this._default)return this._autocompletions.get(this._default)}get(e){return this._autocompletions.get(e)}add(e,t,a=!1){return this._autocompletions.has(e)?(console.warn(`A completer with the name '${e}' is already registered`),!1):(this._autocompletions.set(e,t),(1===this._autocompletions.size||a)&&(this.default=e),!0)}remove(e){return this._autocompletions.delete(e)}removeAll(){this._autocompletions.clear()}}var i=a(9323),r=a(7909),l=a(9480),s=a(4602);class c{constructor(e){var t,a;this._onMainAreaChanged=()=>{var e,t;const a=null!==(t=null===(e=this._notebookTracker.currentWidget)||void 0===e?void 0:e.isVisible)&&void 0!==t&&t;a!==this._notebookVisible&&(this._notebookVisible=a,this._available=!!this._activeCell&&this._notebookVisible,this._availabilityChanged.emit(this._available))},this._onActiveCellChanged=(e,t)=>{var a;this._activeCell!==t&&(null===(a=this._activeCell)||void 0===a||a.model.stateChanged.disconnect(this._cellStateChange),this._activeCell=t,null==t||t.ready.then((()=>{var e,t;null===(e=this._activeCell)||void 0===e||e.model.stateChanged.connect(this._cellStateChange),this._available=!!this._activeCell&&this._notebookVisible,this._availabilityChanged.emit(this._available),null===(t=this._activeCell)||void 0===t||t.disposed.connect((()=>{this._activeCell=null}))})))},this._cellStateChange=(e,t)=>{var a;if("executionCount"===t.name){const e=null===(a=this._activeCell)||void 0===a?void 0:a.model.sharedModel,t=this._activeCellError;let n=null;e&&"outputs"in e&&(n=e.outputs.find((e=>"error"===e.output_type))||null),t!==n&&(this._activeCellError=n,this._activeCellErrorChanged.emit(this._activeCellError))}},this._notebookVisible=!1,this._activeCell=null,this._available=!1,this._activeCellError=null,this._availabilityChanged=new s.Signal(this),this._activeCellErrorChanged=new s.Signal(this),this._notebookTracker=e.tracker,this._notebookTracker.activeCellChanged.connect(this._onActiveCellChanged),null===(t=e.shell.currentChanged)||void 0===t||t.connect(this._onMainAreaChanged),e.shell instanceof r.LabShell&&(null===(a=e.shell.layoutModified)||void 0===a||a.connect(this._onMainAreaChanged)),this._onMainAreaChanged()}get available(){return this._available}get activeCellError(){return this._activeCellError}get availabilityChanged(){return this._availabilityChanged}get activeCellErrorChanged(){return this._activeCellErrorChanged}getContent(e=!1){var t;const a=null===(t=this._notebookTracker.activeCell)||void 0===t?void 0:t.model.sharedModel;if(!a)return null;if(!e)return{type:a.cell_type,source:a.getSource()};const n=this._activeCellError;return n?{type:"code",source:a.getSource(),error:{name:n.ename,value:n.evalue,traceback:n.traceback}}:null}insertAbove(e){const t=this._notebookTracker.currentWidget;t&&t.isVisible&&(l.NotebookActions.insertAbove(t.content),this.replace(e))}insertBelow(e){const t=this._notebookTracker.currentWidget;t&&t.isVisible&&(l.NotebookActions.insertBelow(t.content),this.replace(e))}async replace(e){var t;const a=this._notebookTracker.currentWidget;if(!a||!a.isVisible)return;const n=this._notebookTracker.activeCell;n&&(await n.ready,null===(t=n.editor)||void 0===t||t.model.sharedModel.setSource(e))}}var d=a(9111),h=a(2200),u=a(1473),m=a(6887),g=a(5215),v=a(4614),C=a(2678),p=a(7460),y=a(2747);const b="Chat",f="jupyterlab-collaborative-chat-extension:factory",_={id:"jupyterlab-collaborative-chat-extension:autocompletionRegistry",description:"An autocompletion registry",autoStart:!0,provides:n,activate:e=>new o},w={id:f,description:"A document factories for collaborative chat",autoStart:!0,requires:[g.IRenderMimeRegistry],optional:[y.IActiveCellManagerToken,n,d.ICollaborativeDrive,r.ILayoutRestorer,v.ISettingRegistry,h.IThemeManager,h.IToolbarWidgetRegistry,C.ITranslator],provides:y.IChatFactory,activate:(e,t,a,n,o,i,r,l,s,c)=>{const d=null!=c?c:C.nullTranslator;let u,m=!1,g=!0,v=!0,p=!0;function _(e){m=e.get("sendWithShiftEnter").composite,g=e.get("stackMessages").composite,v=e.get("unreadNotifications").composite,p=e.get("enableCodeToolbar").composite,w.config={sendWithShiftEnter:m,stackMessages:g,unreadNotifications:v,enableCodeToolbar:p}}r&&(s&&(u=(0,h.createToolbarFactory)(s,r,b,f,d)),Promise.all([e.restored,r.load(f)]).then((([,e])=>{_(e),e.changed.connect(_)})).catch((e=>{console.error(`Something went wrong when reading the settings.\n${e}`)})));const w=new y.WidgetConfig({sendWithShiftEnter:m,stackMessages:g,unreadNotifications:v,enableCodeToolbar:p}),k=new h.WidgetTracker({namespace:"chat"});if(e.docRegistry.addFileType(y.chatFileType),o){const e=()=>y.YChat.create();o.sharedModelFactory.registerDocumentFactory("chat",e)}e.serviceManager.ready.then((()=>{const t=e.serviceManager.user.identity,n=new y.CollaborativeChatModelFactory({user:t,widgetConfig:w,commands:e.commands,activeCellManager:a});e.docRegistry.addModelFactory(n)})).catch((e=>console.error("The collaborative chat model factory is not initialized",e)));const I=new y.ChatWidgetFactory({name:b,label:"Chat",modelName:"chat",fileTypes:["chat"],defaultFor:["chat"],themeManager:l,rmRegistry:t,toolbarFactory:u,translator:d,autocompletionRegistry:n});return I.widgetCreated.connect(((t,a)=>{a.context.pathChanged.connect((()=>{k.save(a)})),k.add(a),a.model.unreadChanged.connect((()=>e.commands.notifyCommandChanged(y.CommandIDs.markAsRead)))})),e.docRegistry.addWidgetFactory(I),i&&i.restore(k,{command:"docmanager:open",args:e=>({path:e.context.path,factory:b}),name:e=>e.context.path,when:e.serviceManager.ready}),{widgetConfig:w,tracker:k}}},k={id:"jupyterlab-collaborative-chat-extension:commands",description:"The commands to create or open a chat",autoStart:!0,requires:[d.ICollaborativeDrive,y.IChatFactory],optional:[y.IActiveCellManagerToken,y.IChatPanel,h.ICommandPalette,m.ILauncher],activate:(e,t,a,n,o,r,l)=>{const{commands:s}=e,{tracker:c,widgetConfig:d}=a;s.addCommand(y.CommandIDs.createChat,{label:e=>e.isPalette?"Create a new chat":"Chat",caption:"Create a chat",icon:e=>e.isPalette?void 0:i.Or,execute:async e=>{var a,n;const o=null!==(a=e.inSidePanel)&&void 0!==a&&a;let i=null!==(n=e.name)&&void 0!==n?n:null,r="";if(i||(i=(await h.InputDialog.getText({label:"Name",placeholder:"untitled",title:"Create a new chat"})).value),null===i)return;i&&(r=i.endsWith(y.chatFileType.extensions[0])?i:`${i}${y.chatFileType.extensions[0]}`);let l=!0;if(r?await t.get(r,{content:!1}).catch((()=>{l=!1})):l=!1,!l){let e=await t.newUntitled({type:"file",ext:y.chatFileType.extensions[0]});if(r&&(e=await t.rename(e.path,r)),!e)return(0,h.showErrorMessage)("Error creating a chat","An error occured while creating the chat"),"";r=e.path}if(s.hasCommand(y.CommandIDs.openChat))return s.execute(y.CommandIDs.openChat,{filepath:r,inSidePanel:o});s.execute("docmanager:open",{path:`RTC:${r}`,factory:b})}}),r&&r.addItem({category:"Chat",command:y.CommandIDs.createChat,args:{isPalette:!0}}),l&&l.add({command:y.CommandIDs.createChat,category:"Chat",rank:1}),s.addCommand(y.CommandIDs.markAsRead,{caption:"Mark chat as read",icon:i.Cg,isEnabled:()=>null!==c.currentWidget&&c.currentWidget===e.shell.currentWidget&&c.currentWidget.model.unreadMessages.length>0,execute:async t=>{const a=e.shell.currentWidget;a&&a instanceof y.CollaborativeChatPanel&&Array.from(e.shell.widgets("main")).includes(a)?a.model.unreadMessages=[]:console.error(`The command '${y.CommandIDs.markAsRead}' should be executed from the toolbar button only`)}}),c.currentChanged.connect((()=>{s.notifyCommandChanged(y.CommandIDs.markAsRead)})),e.serviceManager.ready.then((()=>{const a=e.serviceManager.user.identity;s.addCommand(y.CommandIDs.openChat,{label:"Open a chat",execute:async i=>{var r,l;const c=null!==(r=i.inSidePanel)&&void 0!==r&&r;let m=null!==(l=i.filepath)&&void 0!==l?l:null;if(null===m&&(m=(await h.InputDialog.getText({label:"File path",placeholder:"/path/to/the/chat/file",title:"Path of the chat"})).value),!m)return;let g=!0;if(await t.get(m,{content:!1}).catch((()=>{g=!1})),g)if(c&&o){e.shell.activateById(o.id);const i=await t.get(m),r=t.sharedModelFactory.createNew({path:i.path,format:i.format,contentType:y.chatFileType.contentType,collaborative:!0}),l=new y.CollaborativeChatModel({user:a,sharedModel:r,widgetConfig:d,commands:e.commands,activeCellManager:n});o.addChat(l,u.PathExt.basename(i.name,y.chatFileType.extensions[0]))}else s.execute("docmanager:open",{path:`RTC:${m}`,factory:b});else(0,h.showErrorMessage)("Error opening chat",`'${m}' is not a valid path`)}}),r&&r.addItem({category:"Chat",command:y.CommandIDs.openChat})})).catch((e=>console.error("The command to open a chat is not initialized\n",e))),s.addCommand(y.CommandIDs.focusInput,{caption:"Focus the input of the current chat widget",isEnabled:()=>null!==c.currentWidget,execute:async()=>{const t=c.currentWidget;t&&t instanceof y.CollaborativeChatPanel&&Array.from(e.shell.widgets("main")).includes(t)&&(e.shell.activateById(t.id),t.model.focusInput())}})}},I={id:"jupyterlab-collaborative-chat-extension:chat-panel",description:"A chat extension for Jupyter",autoStart:!0,provides:y.IChatPanel,requires:[d.ICollaborativeDrive,g.IRenderMimeRegistry],optional:[n,r.ILayoutRestorer,l.INotebookTracker,h.IThemeManager],activate:(e,t,a,n,o,r,l)=>{const{commands:s}=e,c=new y.ChatPanel({commands:s,drive:t,rmRegistry:a,themeManager:l,autocompletionRegistry:n});c.id="JupyterCollaborationChat:sidepanel",c.title.icon=i.Or,c.title.caption="Jupyter Chat",e.shell.add(c,"left",{rank:2e3}),o&&o.add(c,"jupyter-chat");const d=["create","delete","rename"];return e.serviceManager.events.stream.connect(((e,t)=>{if("https://events.jupyter.org/jupyter_server/contents_service/v1"===t.schema_id){const e=t.action;d.includes(e)&&c.updateChatNames()}})),s.addCommand(y.CommandIDs.moveToSide,{label:"Move the chat to the side panel",caption:"Move the chat to the side panel",icon:p.launchIcon,isEnabled:()=>s.hasCommand(y.CommandIDs.openChat),execute:async()=>{const t=e.shell.currentWidget;if(!(t&&t instanceof y.CollaborativeChatPanel&&Array.from(e.shell.widgets("main")).includes(t)))return void console.error(`The command '${y.CommandIDs.moveToSide}' should be executed from the toolbar button only`);const a=t.context.path.split(":").pop();s.execute(y.CommandIDs.openChat,{filepath:a,inSidePanel:!0}),t.dispose()}}),c}},M=[{id:"jupyterlab-collaborative-chat-extension:activeCellManager",description:"the active cell manager plugin",autoStart:!0,requires:[l.INotebookTracker],provides:y.IActiveCellManagerToken,activate:(e,t)=>new c({tracker:t,shell:e.shell})},_,k,w,I]}}]);