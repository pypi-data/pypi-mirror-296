"use strict";(self.webpackChunkjupyterlab_ws_chat_extension=self.webpackChunkjupyterlab_ws_chat_extension||[]).push([[698],{2698:(e,t,n)=>{n.r(t),n.d(t,{default:()=>p});var o=n(1041),s=n(7909),i=n(2200),r=n(9480),a=n(5215),c=n(4614),l=n(1473),d=n(7354),h=n(7262);class u extends o.ChatModel{constructor(e={}){var t;super(e),this._userId="",this._socket=null,this._sendResolverQueue=new Map,this._connectionInitialized=new h.PromiseDelegate,this.serverSettings=null!==(t=e.serverSettings)&&void 0!==t?t:d.ServerConnection.makeSettings(),this.name="chat"}get userId(){return this._userId}set userId(e){this._userId=e}async initialize(){this._initialize(),await this._connectionInitialized.promise}addMessage(e){return e.id=h.UUID.uuid4(),new Promise((t=>{var n;null===(n=this._socket)||void 0===n||n.send(JSON.stringify(e)),this._sendResolverQueue.set(e.id,t)}))}async getHistory(){let e={messages:[]};try{e=await async function(e="",t={}){const n=d.ServerConnection.makeSettings(),o=l.URLExt.join(n.baseUrl,"api/chat",e);let s;try{s=await d.ServerConnection.makeRequest(o,t,n)}catch(e){throw new d.ServerConnection.NetworkError(e)}let i=await s.text();if(i.length>0)try{i=JSON.parse(i)}catch(e){console.log("Not a JSON response body.",s)}if(!s.ok)throw new d.ServerConnection.ResponseError(s,i.message||i);return i}("history",{method:"GET"})}catch(e){return Promise.reject(e)}return e}dispose(){super.dispose();const e=this._socket;e&&(this._socket=null,e.onopen=()=>{},e.onerror=()=>{},e.onmessage=()=>{},e.onclose=()=>{},e.close())}messageAdded(e){var t;"msg"===e.type?(e.sender.id===this.userId&&(null===(t=this._sendResolverQueue.get(e.id))||void 0===t||t(!0)),super.messageAdded(e)):"connection"===e.type&&(this.userId=e.client_id,this._connectionInitialized.resolve(!0))}_onClose(e){if(this._connectionInitialized.reject(new Error("Chat UI websocket disconnected")),console.error("Chat UI websocket disconnected"),1006===e.code){const e=1;console.info(`Will try to reconnect in ${e} s.`),setTimeout((async()=>await this.initialize()),1e3*e)}}_initialize(){if(this.isDisposed)return;console.log("Creating a new websocket connection for chat...");const{token:e,WebSocket:t,wsUrl:n}=this.serverSettings,o=l.URLExt.join(n,"api/chat")+(e?`?token=${encodeURIComponent(e)}`:""),s=this._socket=new t(o);s.onclose=e=>this._onClose(e),s.onerror=e=>console.error(e),s.onmessage=e=>e.data&&this.messageAdded(JSON.parse(e.data))}}const g="jupyterlab-ws-chat-extension:chat",p=[{id:"jupyterlab-ws-chat-extension:autocompletionRegistry",description:"An autocompletion registry",autoStart:!0,provides:o.IAutocompletionRegistry,activate:e=>new o.AutocompletionRegistry},{id:g,description:"A chat extension for Jupyterlab",autoStart:!0,requires:[a.IRenderMimeRegistry],optional:[o.IAutocompletionRegistry,s.ILayoutRestorer,r.INotebookTracker,c.ISettingRegistry,i.IThemeManager],activate:async(e,t,n,s,i,r,a)=>{const{commands:c}=e,l=new o.ActiveCellManager({tracker:i,shell:e.shell}),d=new u({commands:e.commands,activeCellManager:l});let h=!1,p=!0,m=!0,w=!0;function y(e){h=e.get("sendWithShiftEnter").composite,p=e.get("stackMessages").composite,m=e.get("unreadNotifications").composite,w=e.get("enableCodeToolbar").composite,d.config={sendWithShiftEnter:h,stackMessages:p,unreadNotifications:m,enableCodeToolbar:w}}Promise.all([e.restored,null==r?void 0:r.load(g)]).then((([,e])=>{e?(y(e),e.changed.connect(y)):console.warn("The SettingsRegistry is not loaded for the chat extension")})).catch((e=>{console.error(`Something went wrong when reading the settings.\n${e}`)}));let k=null;try{await d.initialize(),k=(0,o.buildChatSidebar)({model:d,themeManager:a,rmRegistry:t,autocompletionRegistry:n})}catch(e){k=(0,o.buildErrorWidget)(a)}e.shell.add(k,"left",{rank:2e3}),s&&s.add(k,"jupyter-chat"),c.addCommand("websocket-chat:focusInput",{caption:"Focus the input of the chat widget",isEnabled:()=>null!==k,execute:async()=>{null!==k&&(e.shell.activateById(k.id),d.focusInput())}})}}]}}]);