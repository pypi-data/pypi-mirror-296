# -*- coding: utf-8 -*-
# Copyright (C) 2023 Benjamin Thomas Schwertfeger
# GitHub: https://github.com/btschwertfeger
#

[build-system]
requires = ["setuptools>=65.5.1", "setuptools_scm[toml]>=6.2", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "python-kraken-sdk"
dynamic = ["version"]
authors = [
  { name = "Benjamin Thomas Schwertfeger", email = "contact@b-schwertfeger.de" },
]
maintainers = [
  { name = "Benjamin Thomas Schwertfeger", email = "contact@b-schwertfeger.de" },
]
description = "Command-line tool and collection of REST and websocket clients to interact with the Kraken cryptocurrency exchange."
readme = "README.md"
license = { file = "LICENSE" }
requires-python = ">=3.11"
dependencies = [
  "asyncio>=3.4",
  "requests",
  "websockets",
  "click",
  "cloup",
  "orjson",
  "aiohttp",
]
keywords = ["crypto", "trading", "kraken", "exchange", "api"]
classifiers = [
  "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
  "Development Status :: 5 - Production/Stable",
  "Intended Audience :: Developers",
  "Topic :: Office/Business :: Financial",
  "Topic :: Software Development :: Libraries :: Python Modules",
  "Topic :: Internet :: WWW/HTTP",
  "Topic :: Utilities",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Framework :: AsyncIO",
  "Natural Language :: English",
  "Operating System :: MacOS",
  "Operating System :: Unix",
]

[project.scripts]
kraken = "kraken.cli:cli"

[project.urls]
"Homepage" = "https://github.com/btschwertfeger/python-kraken-sdk"
"Bug Tracker" = "https://github.com/btschwertfeger/python-kraken-sdk/issues"
"Documentation" = "https://python-kraken-sdk.readthedocs.io/en/stable/"

[project.optional-dependencies]
dev = [
  "debugpy",
  # building
  "build",
  # documentation
  "sphinx",
  "sphinx-click",
  "sphinx-rtd-theme",
  "nbsphinx",
  "ipython",          # to visualize notebooks in doc
  # formatting
  "black",
  # typing
  "mypy",
  "types-requests",
  # linting
  "ruff",
  "pylint",
]
test = ["pytest", "pytest-cov", "pytest-mock", "pytest-asyncio", "proxy.py"]
examples = ["matplotlib", "pandas", "numpy"]
jupyter = ["ipykernel"] # python3 -m ipykernel install --user --name=kraken

[tool.setuptools]
include-package-data = false

[tool.setuptools.packages.find]
include = ["kraken*"]
# excluded anyway because of 'include'
exclude = ["docs*", "tests*", "examples*", "venv", ".env"]

[tool.setuptools_scm]
write_to = "kraken/_version.py"
version_scheme = "guess-next-dev"
local_scheme = "no-local-version"

# ========= T E S T I N G ======================================================
#
[tool.pytest]
junit_family = "xunit2"
testpaths = ["tests"]

[tool.pytest.ini_options]
# filterwarnings = [
#   "ignore:The Kraken websocket API v1 is marked as deprecated*:DeprecationWarning",
# ]

cache_dir = ".cache/pytest"
markers = [
  "wip: Used to run a specific test by hand.",
  "flaky: Flaky tests",
  "spot: … Spot endpoint.",
  "spot_auth: … authenticated Spot endpoint.",
  "spot_earn: … Spot Earn endpoint.",
  "spot_trade: … Spot Trade endpoint.",
  "spot_user: … Spot User endpoint.",
  "spot_market: … Spot Market endpoint.",
  "spot_funding: … Spot Funding endpoint.",
  "spot_websocket: … Spot Websocket client + Spot Orderbook client.",
  "spot_orderbook: … Spot Orderbook client.",
  "futures: … Futures endpoint.",
  "futures_auth: … authenticated Futures endpoint.",
  "futures_market: … Futures Market endpoint.",
  "futures_user: … Futures User endpoint.",
  "futures_trade: … Futures Trade endpoint.",
  "futures_funding: … Futures Funding endpoint.",
  "futures_websocket: … Futures Websocket endpoint.",
  "nft: … NFT endpoint.",
  "nft_auth: … authenticated NFT endpoint.",
  "nft_market: … NFT Market endpoint.",
  "nft_trade: … NFT Trade endpoint.",
]
[tool.coverage.run]
source = ["kraken"]
omit = ["*tests*"]

[tool.coverage.report]
exclude_lines = ["coverage: disable", "if TYPE_CHECKING:"]
skip_empty = true

[tool.codespell]
skip = "CHANGELOG.md,examples/market_client_example.ipynb,doc/examples/market_client_example.ipynb"
check-filenames = true

# ========= T Y P I N G ========================================================
#
[tool.mypy]
python_version = "3.11"

# junit_xml = "mypy.xml"
files = ["kraken/**/*.py"]
exclude = ["tests/**/*.py"]

cache_dir = ".cache/mypy"
sqlite_cache = true
cache_fine_grained = true

# Disallow dynamic typing
disallow_any_unimported = false
disallow_any_expr = false
disallow_any_decorated = false
disallow_any_explicit = false
disallow_any_generics = false
disallow_subclassing_any = false

# Untyped definitions and calls
check_untyped_defs = true
disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = false

# None and Optional handling
implicit_optional = true
strict_optional = false

# Configuring warnings
warn_redundant_casts = true
warn_unused_ignores = true
warn_unused_configs = true
warn_no_return = true
warn_return_any = true
warn_unreachable = true

# Suppressing errors
ignore_errors = false

# Configuring error messages
show_error_context = true
show_column_numbers = true
hide_error_codes = false
pretty = true
color_output = true
show_absolute_path = true
ignore_missing_imports = true

# Miscellaneous strictness flags
allow_untyped_globals = false
allow_redefinition = false
local_partial_types = false
# disable_error_code = xxx,xxx
implicit_reexport = true
strict_concatenate = false
strict_equality = true
strict = true

# ========= L I N T I N G ======================================================
#
[tool.ruff]
# https://beta.ruff.rs/docs/rules/
# https://beta.ruff.rs/docs/settings/
# src = ["kraken"]
cache-dir = ".cache/ruff"

respect-gitignore = true
exclude = []
line-length = 130

[tool.ruff.lint]
select = [
  "A",     # flake8-builtins
  "AIR",   # Airflow
  "ANN",   # flake8-annotations
  "ARG",   # flake8-unused-arguments
  "ASYNC", # flake8-async
  "ASYNC", # flake8-async
  "B",     # flake8-bugbear
  "B",     # flake8-bugbear
  "BLE",   # flake8-blind-except
  "C4",    # flake8-comprehensions
  "COM",   # flake8-commas
  "CPY",   # flake8-copyright
  # "D",     # pydocstyle | sphinx format not supported
  "E",    # pycodestyle
  "F",    # pyflakes
  "FA",   # flake8-future-annotations
  "FBT",  # flake8-boolean-trap
  "FLY",  # flynt
  "FURB", # refurb
  "G",    # flake8-logging-format
  "I",    # isort
  "ICN",  # flake8-import-conventions
  "INT",  # flake8-gettext
  "ISC",  # flake8-implicit-string-concat
  "LOG",  # flake8-logging
  "N",    # PEP8 naming
  "PERF", # Perflint # maybe
  "PGH",  # pygrep-hooks
  "PIE",  # flake8-pie
  "PL",   # PyLint
  "PT",   # flake8-pytest-style
  "PTH",  # flake8-use-pathlib
  "PYI",  # flake8-pyi
  "Q",    # flake8-quotes
  "RET",  # flake8-return
  "RSE",  # flake8-raise
  "RUF",  # Ruff-specific rules
  "S",    # flake8-bandit
  "SIM",  # flake8-simplify
  "SLF",  # flake8-self
  "SLOT", # flake8-slots
  "T20",  # flake8-print
  "TCH",  # flake8-type-checking
  "TID",  # flake8-tidy-imports
  "TRIO", # flake8-trio
  "UP",   # pyupgrade
  "W",    # pycodestyle
  # "ERA", # eradicate # commented-out code
  # "FIX", # flake8-fixme
  # "TD",  # flake8-todos
  # "TRY", # tryceratops # specify exception messages in class; not important
]
fixable = [
  "C4",
  "COM",
  "E221", # Multiple spaces before operator
  "E202", # Missing Whitespace before ')'
  "E225", # Missing whitespace around operator
  "E227", # Missing whitespace around bitwise or shift operator
  "E231", # Missing whitespace after ':'
  "E252", # Missing whitespace around parameter equals
  "E261", # Missing insert at least two spaces before inline comment
  "E302", # Expected 2 blank lines, found x
  "E303", # Too many blank lines
  "E701", # Multiple statements on one line (colon)
  "F401", # unused import
  "FA",
  "I",
  "ICN",
  "PL",   # pylint
  "PT",
  "Q",
  "RSE",
  "UP",   # pyupgrade
  "W292", # missing new line at end of file
  "W293", # blank line with whitespace
  "W391", # too many new lines at end of file
]

ignore = [
  "B019",    # use of lru_cache or cache
  "PLR2004", # magic value in comparison
  "E203",    # Whitespace before ':' # false positive on list slices
  "PLR6301", # Method `…` could be a function or static method # false positive for no-self-use
  "RUF022",  # `__all__` is not sorted
]

task-tags = ["todo", "TODO", "fixme", "FIXME"]

[tool.ruff.lint.per-file-ignores]
"examples/*.py" = [
  "ASYNC101", # no open call on async function
  "BLE001",   # blind exception
  "S101",     # assert use
  "S110",     # try-catch-pass without logging
  "T201",     # print
]
"tests/*.py" = [
  "ASYNC101", # no open call on async function
  "E501",     # line to long
  "F841",     # unused variable
  "N802",     # PEP8 naming
  "S101",     # assert use
  "S106",     # hardcoded password
  "S110",     # try-except-pass without logging
  "S311",     # pseudo-random-generator
  "SLF001",   # private member access
  "TID252",   # ban relative imports
]

[tool.ruff.lint.flake8-copyright]
author = "Benjamin Thomas Schwertfeger"
notice-rgx = "(?i)Copyright \\(C\\) \\d{4}"
min-file-size = 1024

[tool.ruff.lint.flake8-quotes]
docstring-quotes = "double"

[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.flake8-bandit]
check-typed-exception = true

[tool.ruff.lint.flake8-type-checking]
strict = true

[tool.ruff.lint.pep8-naming]
ignore-names = [
  "i",
  "j",
  "k",
  "_",
  "fromAccount",
  "toAccount",
  "fromUser",
  "toUser",
  "sourceWallet",
  "lastTime",
  "lastFillTime",
  "to",
  "maxLeverage",
  "pnlPreference",
  "cliOrdId",
  "cliOrdIds",
  "orderId",
  "orderIds",
  "stopPrice",
  "limitPrice",
  "orderType",
  "reduceOnly",
  "triggerSignal",
  "EXCEPTION_ASSIGNMENT",
  "trailingStopDeviationUnit",
  "trailingStopMaxDeviation",
  "subaccountUid",
  "ConnectSpotWebsocket",
  "METHOD",
  "TIMEOUT",
  "URL",
  "HEADERS",
  "processBefore",
]

[tool.ruff.lint.pylint]
max-args = 8
max-branches = 15
max-returns = 6
max-statements = 50
allow-magic-value-types = ["int"]

[tool.pylint.main]
# Analyse import fallback blocks. This can be used to support both Python 2 and 3
# compatible code, which means that the block might have code that exists only in
# one or another interpreter, leading to false positives when analyzed.
# analyse-fallback-blocks =

# Clear in-memory caches upon conclusion of linting. Useful if running PyLint in
# a server-like mode.
# clear-cache-post-run =

# Always return a 0 (non-error) status code, even if lint errors are found. This
# is primarily useful in continuous integration scripts.
# exit-zero =

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code.
# extension-pkg-allow-list =

# A comma-separated list of package or module names from where C extensions may
# be loaded. Extensions are loading into the active Python interpreter and may
# run arbitrary code. (This is an alternative name to extension-pkg-allow-list
# for backward compatibility.)
# extension-pkg-whitelist =

# Return non-zero exit code if any of these messages/categories are detected,
# even if score is above --fail-under value. Syntax same as enable. Messages
# specified are enabled, while categories only check already-enabled messages.
# fail-on =

# Specify a score threshold under which the program will exit with error.
fail-under = 10.0

# Interpret the stdin as a python script, whose filename needs to be passed as
# the module_or_package argument.
# from-stdin =

# Files or directories to be skipped. They should be base names, not paths.
# ignore =

# Add files or directories matching the regular expressions patterns to the
# ignore-list. The regex matches against paths and can be in Posix or Windows
# format. Because '\\' represents the directory delimiter on Windows systems, it
# can't be used as an escape character.
ignore-paths = [
  ".git\\\\\n.github\\\\\n.pytest_cache\\\\\nbuild\\\\\ndist\\\\\npython_kaken_sdk.egg-info|.git/\n.github/\n.pytest_cache/\nbuild/\ndist/\npython_kaken_sdk.egg-info",
]

# Files or directories matching the regular expression patterns are skipped. The
# regex matches against base names, not paths. The default value ignores Emacs
# file locks
ignore-patterns = ["^\\.#"]

# List of module names for which member attributes should not be checked (useful
# for modules/projects where namespaces are manipulated during runtime and thus
# existing member attributes cannot be deduced by static analysis). It supports
# qualified module names, as well as Unix pattern matching.
# ignored-modules =

# Python code to execute, usually for sys.path manipulation such as
# pygtk.require().
# init-hook =

# Use multiple processes to speed up PyLint. Specifying 0 will auto-detect the
# number of processors available to use, and will cap the count on Windows to
# avoid hangs.
jobs = 0

# Control the amount of potential inferred values when inferring a single object.
# This can help the performance when dealing with large functions or complex,
# nested conditions.
limit-inference-results = 100

# List of plugins (as comma separated values of python module names) to load,
# usually to register additional checkers.
# load-plugins =

# Pickle collected data for later comparisons.
persistent = true

# Minimum Python version to use for version dependent checks. Will default to the
# version used to run PyLint.
py-version = "3.11"

# Discover python modules and packages in the file system subtree.
# recursive =

# Add paths to the list of the source roots. Supports globbing patterns. The
# source root is an absolute path or a path relative to the current working
# directory used to determine a package namespace for modules located under the
# source root.
# source-roots =

# When enabled, PyLint would attempt to guess common misconfiguration and emit
# user-friendly hints instead of false-positive error messages.
suggestion-mode = true

# Allow loading of arbitrary C extensions. Extensions are imported into the
# active Python interpreter and may run arbitrary code.
# unsafe-load-any-extension =

[tool.pylint.basic]
# Naming style matching correct argument names.
argument-naming-style = "snake_case"

# Regular expression matching correct argument names. Overrides argument-naming-
# style. If left empty, argument names will be checked with the set naming style.
# argument-rgx =

# Naming style matching correct attribute names.
attr-naming-style = "snake_case"

# Regular expression matching correct attribute names. Overrides attr-naming-
# style. If left empty, attribute names will be checked with the set naming
# style.
# attr-rgx =

# Bad variable names which should always be refused, separated by a comma.
bad-names = ["foo", "bar", "baz", "toto", "tutu", "tata"]

# Bad variable names regexes, separated by a comma. If names match any regex,
# they will always be refused
# bad-names-rgxs =

# Naming style matching correct class attribute names.
class-attribute-naming-style = "any"

# Regular expression matching correct class attribute names. Overrides class-
# attribute-naming-style. If left empty, class attribute names will be checked
# with the set naming style.
# class-attribute-rgx =

# Naming style matching correct class constant names.
class-const-naming-style = "UPPER_CASE"

# Regular expression matching correct class constant names. Overrides class-
# const-naming-style. If left empty, class constant names will be checked with
# the set naming style.
# class-const-rgx =

# Naming style matching correct class names.
class-naming-style = "PascalCase"

# Regular expression matching correct class names. Overrides class-naming-style.
# If left empty, class names will be checked with the set naming style.
# class-rgx =

# Naming style matching correct constant names.
const-naming-style = "UPPER_CASE"

# Regular expression matching correct constant names. Overrides const-naming-
# style. If left empty, constant names will be checked with the set naming style.
# const-rgx =

# Minimum line length for functions/classes that require docstrings, shorter ones
# are exempt.
docstring-min-length = -1

# Naming style matching correct function names.
function-naming-style = "snake_case"

# Regular expression matching correct function names. Overrides function-naming-
# style. If left empty, function names will be checked with the set naming style.
# function-rgx =

# Good variable names which should always be accepted, separated by a comma.
good-names = [
  "i",
  "j",
  "k",
  "_",
  "fromAccount",
  "toAccount",
  "fromUser",
  "toUser",
  "sourceWallet",
  "lastTime",
  "lastFillTime",
  "to",
  "maxLeverage",
  "pnlPreference",
  "cliOrdId",
  "cliOrdIds",
  "orderId",
  "orderIds",
  "stopPrice",
  "limitPrice",
  "orderType",
  "reduceOnly",
  "triggerSignal",
  "EXCEPTION_ASSIGNMENT",
  "trailingStopDeviationUnit",
  "trailingStopMaxDeviation",
  "subaccountUid",
  "ConnectSpotWebsocket",
  "METHOD",
  "TIMEOUT",
  "URL",
  "HEADERS",
  "processBefore",
]

# Good variable names regexes, separated by a comma. If names match any regex,
# they will always be accepted
# good-names-rgxs =

# Include a hint for the correct naming format with invalid-name.
# include-naming-hint =

# Naming style matching correct inline iteration names.
inlinevar-naming-style = "any"

# Regular expression matching correct inline iteration names. Overrides
# inlinevar-naming-style. If left empty, inline iteration names will be checked
# with the set naming style.
# inlinevar-rgx =

# Naming style matching correct method names.
method-naming-style = "snake_case"

# Regular expression matching correct method names. Overrides method-naming-
# style. If left empty, method names will be checked with the set naming style.
# method-rgx =

# Naming style matching correct module names.
module-naming-style = "snake_case"

# Regular expression matching correct module names. Overrides module-naming-
# style. If left empty, module names will be checked with the set naming style.
# module-rgx =

# Colon-delimited sets of names that determine each other's naming style when the
# name regexes allow several styles.
# name-group =

# Regular expression which should only match function or class names that do not
# require a docstring.
no-docstring-rgx = "^_"

# List of decorators that produce properties, such as abc.abstractproperty. Add
# to this list to register other decorators that produce valid properties. These
# decorators are taken in consideration only for invalid-name.
property-classes = ["abc.abstractproperty"]

# Regular expression matching correct type alias names. If left empty, type alias
# names will be checked with the set naming style.
# typealias-rgx =

# Regular expression matching correct type variable names. If left empty, type
# variable names will be checked with the set naming style.
# typevar-rgx =

# Naming style matching correct variable names.
variable-naming-style = "snake_case"

# Regular expression matching correct variable names. Overrides variable-naming-
# style. If left empty, variable names will be checked with the set naming style.
# variable-rgx =

[tool.pylint.classes]
# Warn about protected attribute access inside special methods
# check-protected-access-in-special-methods =

# List of method names used to declare (i.e. assign) instance attributes.
defining-attr-methods = ["__init__", "__new__", "setUp", "__post_init__"]

# List of member names, which should be excluded from the protected access
# warning.
exclude-protected = ["_asdict", "_fields", "_replace", "_source", "_make"]

# List of valid names for the first argument in a class method.
valid-classmethod-first-arg = ["cls"]

# List of valid names for the first argument in a metaclass class method.
valid-metaclass-classmethod-first-arg = ["cls"]

[tool.pylint.design]
# List of regular expressions of class ancestor names to ignore when counting
# public methods (see R0903)
# exclude-too-few-public-methods =

# List of qualified class names to ignore when counting class parents (see R0901)
# ignored-parents =

# Maximum number of arguments for function / method.
max-args = 8

# Maximum number of attributes for a class (see R0902).
max-attributes = 10

# Maximum number of boolean expressions in an if statement (see R0916).
max-bool-expr = 5

# Maximum number of branch for function / method body.
max-branches = 15

# Maximum number of locals for function / method body.
max-locals = 15

# Maximum number of parents for a class (see R0901).
max-parents = 7

# Maximum number of public methods for a class (see R0904).
max-public-methods = 20

# Maximum number of return / yield for function / method body.
max-returns = 6

# Maximum number of statements in function / method body.
max-statements = 50

# Minimum number of public methods for a class (see R0903).
min-public-methods = 2

[tool.pylint.exceptions]
# Exceptions that will emit a warning when caught.
overgeneral-exceptions = ["builtins.BaseException", "builtins.Exception"]

[tool.pylint.format]
# Expected format of line ending, e.g. empty (any line ending), LF or CRLF.
# expected-line-ending-format =

# Regexp for a line that is allowed to be longer than the limit.
ignore-long-lines = "^\\s*(# )?<?https?://\\S+>?$"

# Number of spaces of indent required inside a hanging or continued line.
indent-after-paren = 4

# String used as indentation unit. This is usually "    " (4 spaces) or "\t" (1
# tab).
indent-string = "    "

# Maximum number of characters on a single line.
max-line-length = 130

# Maximum number of lines in a module.
max-module-lines = 1250

# Allow the body of a class to be on the same line as the declaration if body
# contains single statement.
single-line-class-stmt = true

# Allow the body of an if to be on the same line as the test if there is no else.
single-line-if-stmt = true

[tool.pylint.imports]
# List of modules that can be imported at any level, not just the top level one.
# allow-any-import-level =

# Allow explicit reexports by alias from a package __init__.
# allow-reexport-from-package =

# Allow wildcard imports from modules that define __all__.
# allow-wildcard-with-all =

# Deprecated modules which should not be used, separated by a comma.
# deprecated-modules =

# Output a graph (.gv or any supported image format) of external dependencies to
# the given file (report RP0402 must not be disabled).
# ext-import-graph =

# Output a graph (.gv or any supported image format) of all (i.e. internal and
# external) dependencies to the given file (report RP0402 must not be disabled).
# import-graph =

# Output a graph (.gv or any supported image format) of internal dependencies to
# the given file (report RP0402 must not be disabled).
# int-import-graph =

# Force import order to recognize a module as part of the standard compatibility
# libraries.
# known-standard-library =

# Force import order to recognize a module as part of a third party library.
known-third-party = ["enchant"]

# Couples of modules and preferred modules, separated by a comma.
# preferred-modules =

[tool.pylint.logging]
# The type of string formatting that logging methods do. `old` means using %
# formatting, `new` is for `{}` formatting.
logging-format-style = "new"

# Logging modules to check that the string format arguments are in logging
# function parameter format.
logging-modules = ["logging"]

[tool.pylint."messages control"]
# Only show warnings with the listed confidence levels. Leave empty to show all.
# Valid levels: HIGH, CONTROL_FLOW, INFERENCE, INFERENCE_FAILURE, UNDEFINED.
confidence = [
  "HIGH",
  "CONTROL_FLOW",
  "INFERENCE",
  "INFERENCE_FAILURE",
  "UNDEFINED",
]

# Disable the message, report, category or checker with the given id(s). You can
# either give multiple identifiers separated by comma (,) or put this option
# multiple times (only on the command line, not in the configuration file where
# it should appear only once). You can also use "--disable=all" to disable
# everything first and then re-enable specific checks. For example, if you want
# to run only the similarities checker, you can use "--disable=all
# --enable=similarities". If you want to run only the classes checker, but have
# no Warning level messages displayed, use "--disable=all --enable=classes
# --disable=W".
disable = [
  "anomalous-backslash-in-string",
  "bad-inline-option",
  "broad-exception-caught",
  "broad-exception-raised",
  "deprecated-pragma",
  "fixme",
  "import-error",
  "keyword-arg-before-vararg",
  "line-too-long",
  "locally-disabled",
  "logging-fstring-interpolation",
  "logging-too-many-args",
  "multiple-statements",
  "no-self-argument",
  "raw-checker-failed",
  "suppressed-message",
  "too-few-public-methods",
  "too-many-locals",
  "too-many-public-methods",
  "unsubscriptable-object",
  "unused-argument",
  "useless-suppression",
]

# Enable the message, report, category or checker with the given id(s). You can
# either give multiple identifier separated by comma (,) or put this option
# multiple time (only on the command line, not in the configuration file where it
# should appear only once). See also the "--disable" option for examples.
enable = ["c-extension-no-member"]

[tool.pylint.method_args]
# List of qualified names (i.e., library.method) which require a timeout
# parameter e.g. 'requests.api.get,requests.api.post'
timeout-methods = [
  "requests.api.delete",
  "requests.api.get",
  "requests.api.head",
  "requests.api.options",
  "requests.api.patch",
  "requests.api.post",
  "requests.api.put",
  "requests.api.request",
]

[tool.pylint.miscellaneous]
# List of note tags to take in consideration, separated by a comma.
notes = ["FIXME", "fixme", "TODO", "todo"]

# Regular expression of note tags to take in consideration.
# notes-rgx =

[tool.pylint.refactoring]
# Maximum number of nested blocks for function / method body
max-nested-blocks = 10

# Complete name of functions that never returns. When checking for inconsistent-
# return-statements if a never returning function is called then it will be
# considered as an explicit return statement and no message will be printed.
never-returning-functions = ["sys.exit", "argparse.parse_error"]

[tool.pylint.reports]
# Python expression which should return a score less than or equal to 10. You
# have access to the variables 'fatal', 'error', 'warning', 'refactor',
# 'convention', and 'info' which contain the number of messages in each category,
# as well as 'statement' which is the total number of statements analyzed. This
# score is used by the global evaluation report (RP0004).
evaluation = "max(0, 0 if fatal else 10.0 - ((float(5 * error + warning + refactor + convention) / statement) * 10))"

# Template used to display messages. This is a python new-style format string
# used to format the message information. See doc for all details.
# msg-template =

# Set the output format. Available formats are text, parsable, colorized, json
# and msvs (visual studio). You can also give a reporter class, e.g.
# mypackage.mymodule.MyReporterClass.
# output-format =

# Tells whether to display a full report or only the messages.
# reports =

# Activate the evaluation score.
score = true

[tool.pylint.similarities]
# Comments are removed from the similarity computation
ignore-comments = true

# Docstrings are removed from the similarity computation
ignore-docstrings = true

# Imports are removed from the similarity computation
ignore-imports = true

# Signatures are removed from the similarity computation
ignore-signatures = true

# Minimum lines number of a similarity.
min-similarity-lines = 4

[tool.pylint.spelling]
# Limits count of emitted suggestions for spelling mistakes.
max-spelling-suggestions = 4

# Spelling dictionary name. No available dictionaries : You need to install both
# the python package and the system dependency for enchant to work..
# spelling-dict =

# List of comma separated words that should be considered directives if they
# appear at the beginning of a comment and should not be checked.
spelling-ignore-comment-directives = "fmt: on,fmt: off,noqa:,noqa,nosec,isort:skip,mypy:"

# List of comma separated words that should not be checked.
# spelling-ignore-words =

# A path to a file that contains the private dictionary; one word per line.
# spelling-private-dict-file =

# Tells whether to store unknown words to the private dictionary (see the
# --spelling-private-dict-file option) instead of raising a message.
# spelling-store-unknown-words =

[tool.pylint.typecheck]
# List of decorators that produce context managers, such as
# contextlib.contextmanager. Add to this list to register other decorators that
# produce valid context managers.
contextmanager-decorators = ["contextlib.contextmanager"]

# List of members which are set dynamically and missed by pylint inference
# system, and so shouldn't trigger E1101 when accessed. Python regular
# expressions are accepted.
# generated-members =

# Tells whether missing members accessed in mixin class should be ignored. A
# class is considered mixin if its name matches the mixin-class-rgx option.
# Tells whether to warn about missing members when the owner of the attribute is
# inferred to be None.
ignore-none = true

# This flag controls whether pylint should warn about no-member and similar
# checks whenever an opaque object is returned when inferring. The inference can
# return multiple potential results while evaluating a Python object, but some
# branches might not be evaluated, which results in partial inference. In that
# case, it might be useful to still emit no-member and other checks for the rest
# of the inferred objects.
ignore-on-opaque-inference = true

# List of symbolic message names to ignore for Mixin members.
ignored-checks-for-mixins = [
  "no-member",
  "not-async-context-manager",
  "not-context-manager",
  "attribute-defined-outside-init",
]

# List of class names for which member attributes should not be checked (useful
# for classes with dynamically set attributes). This supports the use of
# qualified names.
ignored-classes = [
  "optparse.Values",
  "thread._local",
  "_thread._local",
  "argparse.Namespace",
]

# Show a hint with possible names when a member name was not found. The aspect of
# finding the hint is based on edit distance.
missing-member-hint = true

# The minimum edit distance a name should have in order to be considered a
# similar match for a missing member name.
missing-member-hint-distance = 1

# The total number of similar names that should be taken in consideration when
# showing a hint for a missing member.
missing-member-max-choices = 1

# Regex pattern to define which classes are considered mixins.
mixin-class-rgx = ".*[Mm]ixin"

# List of decorators that change the signature of a decorated function.
# signature-mutators =

[tool.pylint.variables]
# List of additional names supposed to be defined in builtins. Remember that you
# should avoid defining new builtins when possible.
# additional-builtins =

# Tells whether unused global variables should be treated as a violation.
allow-global-unused-variables = true

# List of names allowed to shadow builtins
# allowed-redefined-builtins =

# List of strings which can identify a callback function by name. A callback name
# must start or end with one of those strings.
callbacks = ["cb_", "_cb"]

# A regular expression matching the name of dummy variables (i.e. expected to not
# be used).
dummy-variables-rgx = "_+$|(_[a-zA-Z0-9_]*[a-zA-Z0-9]+?$)|dummy|^ignored_|^unused_"

# Argument names that match this expression will be ignored.
ignored-argument-names = "_.*|^ignored_|^unused_"

# Tells whether we should check for unused import in __init__ files.
# init-import =

# List of qualified module names which can have objects that can redefine
# builtins.
redefining-builtins-modules = [
  "six.moves",
  "past.builtins",
  "future.builtins",
  "builtins",
  "io",
]
