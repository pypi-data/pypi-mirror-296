[build-system]
build-backend = "hatchling.build"

requires = [
  "hatch-vcs",
  "hatchling",
]

[project]
name = "hysetter"
description = "Subset hydroclimate data using HyRiver Over CONUS."
readme = "README.md"
license = { text = "MIT" }
authors = [
  { name = "Taher Chegini", email = "cheginit@gmail.com" },
]
requires-python = ">=3.10"
classifiers = [
  "Development Status :: 4 - Beta",
  "Intended Audience :: Science/Research",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.10",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Topic :: Scientific/Engineering",
  "Topic :: Scientific/Engineering :: GIS",
  "Topic :: Scientific/Engineering :: Hydrology",
  "Typing :: Typed",
]
dynamic = [
  "version",
]
dependencies = [
  "boto3",
  "dask[dataframe]",
  "flox",
  "geopandas",
  "numba",
  "numbagg",
  "pandas",
  "planetary-computer",
  "py3dep<0.18,>=0.17",
  "pyarrow>=1.0.1",
  "pydantic>=2.7.1",
  "pydaymet<0.18,>=0.17",
  "pygeohydro<0.18,>=0.17",
  "pygridmet<0.18,>=0.17",
  "pynhd<0.18,>=0.17",
  "pynldas2<0.18,>=0.17",
  "pyogrio",
  "pystac-client",
  "pyyaml",
  "rich-click>=1.8.2",
  "typing-extensions",
  "xarray>=2024.5",
  "xarray-spatial",
]
optional-dependencies.dev = [
  "exactextract>=0.2,<0.3",
  "ipykernel",
  "ipywidgets",
  "joblib>=1.4.2,<2",
  "mapclassify",
  "psutil>=6,<7",
  "torch",
  "tqdm>=4.66.5,<5",
]
optional-dependencies.docs = [
  "black",
  "mdx-truly-sane-lists>=1.3",
  "mkdocs>=1.5.3",
  "mkdocs-jupyter",
  "mkdocs-material>=9.5.20",
  "mkdocstrings-python",
]
optional-dependencies.lint = [
  "codespell",
  "pre-commit",
  "tomli",
]
optional-dependencies.test = [
  "coverage[toml]",
  "pytest-cov",
  "pytest-sugar",
]
urls.Changelog = "https://hysetter.readthedocs.io/latest/CHANGELOG"
urls.CI = "https://github.com/hyriver/hysetter/actions"
urls.Homepage = "https://hysetter.readthedocs.io"
urls.Issues = "https://github.com/hyriver/hysetter/issues"
scripts.hysetter = "hysetter.cli:cli"

[tool.hatch.version]
source = "vcs"

[tool.hatch.build.targets.wheel]
packages = [
  "src/hysetter",
]

[tool.ruff]
target-version = "py310"
line-length = 100

exclude = [
  ".pixi",
  "__pycache__",
]

format.docstring-code-format = true
lint.select = [
  # flake8-bugbear
  "B",
  # flake8-comprehensions
  "C4",
  # pydocstyle
  "D",
  # Error
  "E",
  # pyflakes
  "F",
  # isort
  "I",
  # flake8-gettext
  "INT",
  # flake8-implicit-str-concat
  "ISC",
  # pep8-naming
  "N",
  # pygrep-hooks
  "PGH",
  # misc lints
  "PIE",
  # pylint
  "PLC",
  "PLE",
  "PLR",
  "PLW",
  # flake8-pytest-style
  "PT",
  # flake8-use-pathlib
  "PTH",
  # flake8-pyi
  "PYI",
  # flake8-quotes
  "Q",
  # Ruff-specific rules
  "RUF",
  # bandit
  "S",
  # flake8-simplify
  "SIM",
  # flake8-debugger
  "T10",
  # flake8-print
  "T20",
  # type-checking imports
  "TCH",
  # tidy imports
  "TID",
  # tryceratops
  "TRY",
  # pyupgrade
  "UP",
  # Warning
  "W",
  # flake8-2020
  "YTT",
]

lint.ignore = [
  # docstring in class __init__
  "D107",
  # long too long, let the formatter handle it
  "E501",
  # conflict with ruff-formatter
  "ISC001",
  # too many arguments
  "PLR0913",
  # custom exceptions
  "TRY003",
]

lint.per-file-ignores."tests/*.py" = [
  # Disable all docstring checks in tests
  "D100",
  "D101",
  "D102",
  "D103",
  "D104",
  "D105",
  "D106",
  "D107",
  # magic values
  "PLR2004",
  # Mutable class attributes
  "RUF012",
  # use of "assert"
  "S101",
  # possible hardcoded password
  "S106",
]
lint.extend-safe-fixes = [
  # absolute imports
  "TID252",
]
lint.isort.known-first-party = [
  "hysetter",
]
lint.isort.required-imports = [
  "from __future__ import annotations",
]
lint.pydocstyle.convention = "numpy"

[tool.codespell]
skip = "__pycache__,_build,.mypy_cache,.git,./htmlcov,.pixi,pixi.lock,**.ipynb"
ignore-words-list = "gage,gages"

[tool.pytest.ini_options]
addopts = "-v --cov --junitxml=junit.xml --durations=5"
doctest_optionflags = 'NORMALIZE_WHITESPACE IGNORE_EXCEPTION_DETAIL NUMBER'
testpaths = [
  "tests",
]

[tool.coverage.report]
exclude_lines = [
  'raise ServiceUnavailableError',
  "if TYPE_CHECKING:",
]
ignore_errors = true

[tool.coverage.paths]
source = [ "src", "*/site-packages" ]
omit = [
  "**/__init__.py",
  "**/print_versions.py",
]

[tool.coverage.run]
branch = true
parallel = true
source = [
  "hysetter",
]

[tool.pyright]
exclude = [
  ".pixi/",
  "**/__pycache__",
  "**/__init__.py",
  "tests/",
]
include = [
  "src/hysetter",
]
reportMissingTypeStubs = false
reportUnknownArgumentType = false
reportUnknownLambdaType = false
reportUnknownMemberType = false
reportUnknownParameterType = false
reportUnknownVariableType = false
reportUnnecessaryIsInstance = false
reportUntypedFunctionDecorator = false
reportAttributeAccessIssue = false
typeCheckingMode = "strict"

[tool.fixit]
formatter = "ufmt"

[tool.refurb]
python_version = "3.10"
quiet = true

[tool.pixi.feature.docs.tasks]
build-docs = "mkdocs build --strict"
docs = "mkdocs serve"

[tool.pixi.project]
channels = [ "conda-forge" ]
platforms = [ "linux-64", "osx-64", "osx-arm64", "win-64" ]

[tool.pixi.pypi-dependencies]
hysetter = { path = ".", editable = true }

[tool.pixi.feature.lint.dependencies]
pre-commit = "*"

[tool.pixi.dependencies]
hdf5 = "*"
netcdf4 = "*"
numba = "*"

[tool.pixi.feature.typecheck.dependencies]
pyright = "*"

[tool.pixi.feature.py310.dependencies]
python = "~=3.10.0"

[tool.pixi.feature.py312.dependencies]
python = "~=3.12.0"

[tool.pixi.environments]
test310 = { features = [ "test", "py310" ] }
test312 = { features = [ "test", "py312" ] }
lint = { features = [ "lint", "py312" ], no-default-feature = true }
typecheck = { features = [ "typecheck", "py312" ] }
dev = { features = [ "dev", "test", "py312" ] }
docs = { features = [ "docs", "py312" ], no-default-feature = true }

[tool.pixi.feature.test.tasks]
test = "pytest"
report = { cmd = [ "coverage", "report" ], depends-on = [ "test" ] }
html = { cmd = [ "coverage", "html" ], depends-on = [ "test", "report" ] }

[tool.pixi.feature.lint.tasks]
lint = "pre-commit run --all-files"
pcupdate = "pre-commit autoupdate"
spell = "codespell -w"

[tool.pixi.feature.typecheck.tasks]
typecheck = "pyright"
