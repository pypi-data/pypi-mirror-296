Metadata-Version: 2.1
Name: aind-metadata-mapper
Version: 0.18.1
Summary: Package to manage mapping of source data into aind-data-schema metadata files.
Author: Allen Institute for Neural Dynamics
License: MIT
Classifier: Programming Language :: Python :: 3
Requires-Python: >=3.8
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: aind-data-schema-models>=0.3.2
Requires-Dist: pydantic-settings>=2.0
Provides-Extra: dev
Requires-Dist: aind-metadata-mapper[all]; extra == "dev"
Requires-Dist: black; extra == "dev"
Requires-Dist: coverage; extra == "dev"
Requires-Dist: flake8; extra == "dev"
Requires-Dist: interrogate; extra == "dev"
Requires-Dist: isort; extra == "dev"
Requires-Dist: Sphinx; extra == "dev"
Requires-Dist: furo; extra == "dev"
Provides-Extra: all
Requires-Dist: aind-metadata-mapper[bergamo]; extra == "all"
Requires-Dist: aind-metadata-mapper[bruker]; extra == "all"
Requires-Dist: aind-metadata-mapper[mesoscope]; extra == "all"
Requires-Dist: aind-metadata-mapper[openephys]; extra == "all"
Requires-Dist: aind-metadata-mapper[dynamicrouting]; extra == "all"
Requires-Dist: aind-metadata-mapper[u19]; extra == "all"
Provides-Extra: schema
Requires-Dist: aind-data-schema<2.0,>=1.0.0; extra == "schema"
Requires-Dist: pydantic<2.9; extra == "schema"
Provides-Extra: bergamo
Requires-Dist: aind-metadata-mapper[schema]; extra == "bergamo"
Requires-Dist: scanimage-tiff-reader==1.4.1.4; extra == "bergamo"
Requires-Dist: numpy>=1.26.4; extra == "bergamo"
Provides-Extra: bruker
Requires-Dist: aind-metadata-mapper[schema]; extra == "bruker"
Requires-Dist: bruker2nifti==1.0.4; extra == "bruker"
Provides-Extra: mesoscope
Requires-Dist: aind-metadata-mapper[bergamo]; extra == "mesoscope"
Requires-Dist: pillow>=10.4.0; extra == "mesoscope"
Requires-Dist: tifffile==2024.2.12; python_version >= "3.9" and extra == "mesoscope"
Provides-Extra: openephys
Requires-Dist: aind-metadata-mapper[schema]; extra == "openephys"
Requires-Dist: h5py>=3.11.0; extra == "openephys"
Requires-Dist: np_session>=0.1.39; extra == "openephys"
Requires-Dist: npc_ephys>=0.1.18; python_version >= "3.9" and extra == "openephys"
Requires-Dist: scipy>=1.11.0; extra == "openephys"
Requires-Dist: pandas>=2.2.2; extra == "openephys"
Requires-Dist: numpy>=1.26.4; extra == "openephys"
Provides-Extra: dynamicrouting
Requires-Dist: aind-metadata-mapper[schema]; extra == "dynamicrouting"
Requires-Dist: pyyaml>=6.0.0; extra == "dynamicrouting"
Provides-Extra: u19
Requires-Dist: aind-metadata-mapper[schema]; extra == "u19"
Requires-Dist: pandas>=2.2.2; extra == "u19"

# aind-metadata-mapper

[![License](https://img.shields.io/badge/license-MIT-brightgreen)](LICENSE)
![Code Style](https://img.shields.io/badge/code%20style-black-black)
[![semantic-release: angular](https://img.shields.io/badge/semantic--release-angular-e10079?logo=semantic-release)](https://github.com/semantic-release/semantic-release)
![Interrogate](https://img.shields.io/badge/interrogate-100.0%25-brightgreen)
![Coverage](https://img.shields.io/badge/coverage-86%25-yellow?logo=codecov)
![Python](https://img.shields.io/badge/python->=3.10-blue?logo=python)

Repository to contain code that will parse source files into aind-data-schema models.

## Usage

## Installation
To use the software, in the root directory, run
```bash
pip install -e .[all]
```

It's possible to install just a small subset of dependencies. For example,
```bash
pip install -e .[bergamo]
```

To develop the code, run
```bash
pip install -e .[dev]
```

## Contributing

### Linters and testing

There are several libraries used to run linters, check documentation, and run tests.

- Please test your changes using the **coverage** library, which will run the tests and log a coverage report:

```bash
coverage run -m unittest discover && coverage report
```

- Use **interrogate** to check that modules, methods, etc. have been documented thoroughly:

```bash
interrogate .
```

- Use **flake8** to check that code is up to standards (no unused imports, etc.):
```bash
flake8 .
```

- Use **black** to automatically format the code into PEP standards:
```bash
black .
```

- Use **isort** to automatically sort import statements:
```bash
isort .
```

### Pull requests

For internal members, please create a branch. For external members, please fork the repository and open a pull request from the fork. We'll primarily use [Angular](https://github.com/angular/angular/blob/main/CONTRIBUTING.md#commit) style for commit messages. Roughly, they should follow the pattern:
```text
<type>(<scope>): <short summary>
```

where scope (optional) describes the packages affected by the code changes and type (mandatory) is one of:

- **build**: Changes that affect build tools or external dependencies (example scopes: pyproject.toml, setup.py)
- **ci**: Changes to our CI configuration files and scripts (examples: .github/workflows/ci.yml)
- **docs**: Documentation only changes
- **feat**: A new feature
- **fix**: A bugfix
- **perf**: A code change that improves performance
- **refactor**: A code change that neither fixes a bug nor adds a feature
- **test**: Adding missing tests or correcting existing tests

### Semantic Release

The table below, from [semantic release](https://github.com/semantic-release/semantic-release), shows which commit message gets you which release type when `semantic-release` runs (using the default configuration):

| Commit message                                                                                                                                                                                   | Release type                                                                                                    |
| ------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------ | --------------------------------------------------------------------------------------------------------------- |
| `fix(pencil): stop graphite breaking when too much pressure applied`                                                                                                                             | ~~Patch~~ Fix Release, Default release                                                                          |
| `feat(pencil): add 'graphiteWidth' option`                                                                                                                                                       | ~~Minor~~ Feature Release                                                                                       |
| `perf(pencil): remove graphiteWidth option`<br><br>`BREAKING CHANGE: The graphiteWidth option has been removed.`<br>`The default graphite width of 10mm is always used for performance reasons.` | ~~Major~~ Breaking Release <br /> (Note that the `BREAKING CHANGE: ` token must be in the footer of the commit) |

### Documentation
To generate the rst files source files for documentation, run
```bash
sphinx-apidoc -o doc_template/source/ src 
```
Then to create the documentation HTML files, run
```bash
sphinx-build -b html doc_template/source/ doc_template/build/html
```
More info on sphinx installation can be found [here](https://www.sphinx-doc.org/en/master/usage/installation.html).
