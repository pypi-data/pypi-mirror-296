#   #!/usr/bin/env python
#   -*- coding: utf-8 -*-
#   ******************************************************************************
#     Copyright (c) 2023.
#     Developed by Yifei Lu
#     Last change on 8/30/23, 3:54 PM
#     Last change by yifei
#    *****************************************************************************
from numba import njit
import math


@njit
def MolarMassGERG(x):
    """

    :param MMiGERG:
    :param NcGERG:
    :param x:   Composition (mole fraction)
                Do not send mole percents or mass fractions in the x() array, otherwise the output will be incorrect.
                The sum of the compositions in the x() array must be equal to one.
                The order of the fluids in this array is given at the top of this module.
    :return: Mm:  Molar mass (g/mol)
    """
    Mm = 0.
    NcGERG = 21
    MMiGERG = [16.04246, 28.0134, 44.0095, 30.06904, 44.09562, 58.1222, 58.1222, 72.14878, 72.14878, 86.17536,
               100.20194, 114.22852, 128.2551, 142.28168, 2.01588, 31.9988, 28.0101, 18.01528, 34.08088, 4.002602,
               39.948]

    for i in range(NcGERG):
        Mm += x[i] * MMiGERG[i]
    return Mm


@njit
# The following routines are low-level routines that should not be called outside of this code.
def ReducingParametersGERG(x, Drold, Trold, xold):
    """

    :param Tr:
    :param Dr:
    :return:
    // Private Sub ReducingParametersGERG(x, Tr, Dr)

    // Calculate reducing variables.  Only need to call this if the composition has changed.

    // Inputs:
    //    x() - Composition (mole fraction)

    // Outputs:
    //     Tr - Reducing temperature (K)
    //     Dr - Reducing density (mol/l)
    """
    # Check to see if a component fraction has changed.  If x is the same as the previous call, then exit.
    NcGERG = 21
    icheck = 0
    epsilon = 1e-15
    for i in range(NcGERG):
        if abs(x[i] - xold[i]) > 0.0000001:
            icheck = 1
        # xold[i] = x[i]
    if icheck == 0:
        Dr = Drold
        Tr = Trold
        return Tr, Dr

    # Calculate reducing variables for T and D
    Dr = 0.
    Vr = 0.
    Tr = 0.

    gvij = ((0.09862572236818776, 0.09513349381203616, 0.09657806584344247, 0.12106715098162736, 0.14962956090282956,
             0.17714287853149965, 0.16854957176705346, 0.24602375945651833, 0.19724634404016667, 0.20692857033325196,
             0.25128609612093405, 0.2701209697928585, 0.3020114236037432, 0.33272192690408786, 0.08328832937418065,
             0.08537493536985147, 0.09568618815465649, 0.12084966624826637, 0.10362072823487868, 0.06717043597788004,
             0.09033331649375066),
            (0.0, 0.08941424726615939, 0.09397687829062652, 0.11755269427357443, 0.14470811570804648,
             0.17316198185569423, 0.18058740487093322, 0.20313269981936138, 0.19184954276712798, 0.23624763117883524,
             0.30571300744063, 0.27827981858763323, 0.2802418897681576, 0.27156005899416613, 0.07324400476454085,
             0.08085121603361749, 0.091572113755441, 0.07814201489984832, 0.10722200877352996, 0.06534763314144051,
             0.08229830577332384),
            (0.0, 0.0, 0.0941178357551188, 0.12215470486570185, 0.1467060312284717, 0.18976824387588773,
             0.23188738021476388, 0.21284093048035926, 0.19863480789471022, 0.17153443172481161, 0.31147530528406925,
             0.270827762158326, 0.25244249631359256, 0.3271836340748599, 0.08312842489959818, 0.08331251635442594,
             0.09313845825829596, 0.10742035485589782, 0.08923746160027898, 0.054357340421292345, 0.08715125587655904),
            (0.0, 0.0, 0.0, 0.14554230397082457, 0.17143936567430998, 0.19818180399047977, 0.19626844512087824,
             0.22562960514727223, 0.2222156116202908, 0.2812330010515487, 0.27850390318336077, 0.30513478096387137,
             0.3490142459705742, 0.3545899733634683, 0.1035867912935121, 0.10537045295786163, 0.14036131055891934,
             0.09372541670140304, 0.1253553702387325, 0.09479640493083616, 0.10614326991388477),
            (0.0, 0.0, 0.0, 0.0, 0.19999827649485247, 0.22834709921278223, 0.2271261429527691, 0.25906400517443434,
             0.2679515543046866, 0.29214800685264425, 0.32522663416379166, 0.3553650119994654, 0.41626182855255167,
             0.38100971145457363, 0.13058895081398328, 0.1262929615596563, 0.154249960990131, 0.11445382902646155,
             0.1354583631039435, 0.11433732662272658, 0.12716483778991602),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.25905776432206423, 0.2569545837458022, 0.2823873351332171, 0.2850219424143964,
             0.31431179651065666, 0.34548133894624, 0.3726717516427648, 0.4057719760305587, 0.4344069310066155,
             0.16299608427714848, 0.14724508680932433, 0.1756118314446152, 0.13263010615724238, 0.16603969936510515,
             0.13397946659922855, 0.14821079574783438),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.2551009480471634, 0.2804089272140941, 0.2872449155961379,
             0.31961341052071957, 0.34222295398207114, 0.3751683956308331, 0.40379356798723587, 0.40872180702614713,
             0.17348043590242543, 0.1458848092585968, 0.17363342331334586, 0.1607390687562834, 0.15420845433329114,
             0.13270229412129148, 0.1783631000302835),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3057169061449098, 0.308351513337592, 0.33764136761097235,
             0.3688109100981098, 0.39600132243352953, 0.4291015469177791, 0.45773650183225806, 0.18632565515429106,
             0.1629022803260088, 0.1989414023075421, 0.14725085277772434, 0.15271535303335115, 0.148697474158183,
             0.16393521406053257),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.310986120730482, 0.3402759748862068, 0.37144551725647407,
             0.41927411943190734, 0.43491176350041244, 0.4510108556995468, 0.18896026252207213, 0.16463012614696637,
             0.20157600969561384, 0.14241707661555386, 0.19566144409979824, 0.15032353377207472, 0.165670343303836),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.3695658289825811, 0.40052914773981474, 0.42792578391619973,
             0.4643597383308069, 0.48690311600292085, 0.2205117857350171, 0.18337566913133432, 0.2308658637676204,
             0.19474405712278992, 0.20693601001703266, 0.16798632995397467, 0.184493338652349),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.43190491376294093, 0.46166118641104353,
             0.49039512713193495, 0.5172636081431188, 0.22728500945285313, 0.2025367687671113, 0.26203540619941534,
             0.18439737969864958, 0.20327995928216064, 0.18607766822765118, 0.20373092049320118),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.48628573871754344, 0.5193859630435835,
             0.5470885180509746, 0.2766100715748006, 0.2187170818187281, 0.2892258185755857, 0.11966244539756232,
             0.24275597157744924, 0.20138034077750425, 0.21997395230533986),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.5524861878453039, 0.5811211425229519,
             0.3097102960618724, 0.23786020059347548, 0.3223260432125248, 0.21763594019471819, 0.2850829449721815,
             0.21951221809011554, 0.2391893088657795),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.6097560975609756, 0.4681387958644017,
             0.2540052119263587, 0.23880169218045014, 0.12840154183252994, 0.3205334884994168, 0.23482503246342468,
             0.25539374678577087),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.06693440428380187,
             0.07010179850447741, 0.08845601056990605, 0.061277192964608006, 0.08154271906497129, 0.06208442079410317,
             0.07069096425894923),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.07336757153338225,
             0.08240974130906203, 0.07346596185071996, 0.08515209313549774, 0.06509808341771975, 0.0735055452727199),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.09216589861751152,
             0.07255733729926725, 0.08338208282104481, 0.07346059970761289, 0.09633323363471309),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.055948074533839154,
             0.07619132157066086, 0.05670789681980431, 0.06734851301633836),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.09813542688910697, 0.07600172384102773, 0.08582270646459379),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.05747456750387953, 0.06565890814001021),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.07458551157333355))

    bvij = ((1.0, 0.9974443888767761, 0.9990363762545972, 0.995101744961154, 1.0096774406047848, 1.0226071223223907,
             0.9586485044060649, 1.0, 0.8993300164992145, 0.9177933035379063, 0.9255418014277905, 0.9895088672568036,
             1.0057127095411305, 1.067267286718309, 1.0, 1.0, 0.994688615493556, 1.0257297474096825, 1.0253569109932335,
             1.0, 1.070459772838407),
            (
                0.0, 1.0, 0.956082346279194, 0.9582063833037082, 0.9495034589419518, 0.9730161896745889,
                0.9921805659444121,
                1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9458186174531642, 0.9990437687039329, 1.0, 1.0, 0.828817688612274,
                0.9399322956461129, 1.0083501829889538),
            (0.0, 0.0, 1.0, 1.0050578152514156, 0.9938056303791839, 1.158963954637742, 1.3800632262078119,
             1.1252820094939548, 1.0492140449350043, 1.0, 1.4531578630374407, 1.0530235820832134, 1.0,
             1.0003022868408815, 0.8174730436811812, 1.0, 1.0, 0.9007072133134096, 0.821978979578958,
             0.7168120925472488, 1.0168552888477354),
            (0.0, 0.0, 0.0, 1.0, 0.9952202791233546, 1.0, 0.9983151203034121, 1.0, 0.9877398280903181, 1.0, 1.0,
             1.0149952488065153, 1.0, 0.9913712107448827, 0.8563044011645432, 1.0, 1.0, 1.0, 1.0217528451551323, 1.0,
             1.0),
            (
                0.0, 0.0, 0.0, 0.0, 1.0, 0.9984868648279772, 0.9995917776698734, 1.0825555320663853, 1.091856617281364,
                1.0,
                1.0, 1.0, 1.0, 0.9684611295992676, 1.0, 1.0, 1.0, 1.0, 0.8776152600442659, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.9982413958527366, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
             1.026157717237014, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.9544351477790729, 1.0, 1.0, 1.0, 1.0,
             0.8246695168138646, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
             0.9694631595219192, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0030350413810094, 1.0, 1.0, 1.0, 1.0,
             0.5692309533001857, 1.0, 1.0),
            (
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                0.687186558990203,
                1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.874240043417658, 1.0, 1.0, 1.0,
             0.9509911789560708, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0,
             0.9994937580864415),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0,
             0.6330754593975938, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0))

    gtij = ((190.564, 151.5701479881736, 240.1960466031651, 252.27482013149373, 288.6523099075485, 317.3184556996133,
             331.5307111115051, 352.1354408236836, 370.7841270001427, 406.4021156241856, 432.7010061102872,
             457.05395970264163, 487.60467175271, 504.56759917867805, 107.57399132927334, 163.0578671084287,
             155.1461780582284, 289.6877384127097, 259.1293716590194, 99.42192303673512, 166.21814376924166),
            (0.0, 126.192, 218.273425689361, 217.30696518481457, 260.20384614413246, 289.3087839773652,
             300.57892355551735, 333.0396848074405, 345.4756760759687, 372.784596732709, 397.0884294832958,
             464.58252566883164, 458.20512651986024, 487.3335669738378, 71.98924155475973, 138.60644542544213,
             128.6317832607745, 276.84596307609706, 209.3204553673829, 26.111410211921854, 136.39552728752543),
            (0.0, 0.0, 304.1282, 278.34961316190964, 315.023370975912, 335.1628415494222, 333.70539136005794,
             366.5604732108367, 380.09178583564994, 408.19075569102245, 429.01953778601643, 460.36444784811437,
             488.7754326160893, 506.44151586839394, 168.79652228727437, 216.83334402024056, 201.01361310120268,
             343.10417500248036, 316.9343430852917, 97.96460902524419, 224.20234099661508),
            (0.0, 0.0, 0.0, 305.322, 339.68327797099505, 364.61231839569695, 372.50300119006107, 382.83599984479173,
             403.4111452516014, 430.0582594769881, 460.72836887473056, 479.4704339937678, 449.9359999661619,
             521.6598086904, 178.63342623514697, 217.25849716409252, 215.3501444809983, 444.49144526301063,
             301.69944740844704, 39.82762090057602, 214.49488621876282),
            (0.0, 0.0, 0.0, 0.0, 369.825, 389.61987690891345, 399.56738017461885, 411.62846038058814, 418.7816541099113,
             444.4832517245036, 469.3046424561628, 488.0823640181041, 520.4812217128971, 537.3023774594378,
             255.72786572495497, 239.10896234771292, 265.4569282597974, 293.6841217320592, 333.9794898237834,
             43.833227379466365, 236.06740515157955),
            (0.0, 0.0, 0.0, 0.0, 0.0, 407.817, 416.94534594580284, 434.0835000634194, 438.7585001462073,
             457.81849986419024, 473.97350020622144, 488.568499849367, 501.1835001255292, 512.758499810912,
             220.50350001797756, 251.0905595895632, 270.3385000159771, 513.7088177479534, 356.2459120391862,
             46.02968238104625, 247.8965919067868),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 425.125, 442.7375001228837, 447.8149387217079, 468.89109611163695,
             489.3884730293855, 508.2911849465443, 509.8374998098914, 548.1482408392825, 298.06268048010406,
             256.36341270742986, 278.9924998975487, 322.8343110714528, 363.6770882468457, 46.996296795598695,
             315.1224505783322),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 460.35, 465.024999778386, 484.0850001640415, 500.24000016500923,
             514.8349998770528, 527.4499999752048, 539.024999907433, 246.77000001909104, 266.77295262076325,
             296.60500006841824, 545.7935906549288, 407.245442229103, 48.90456374409243, 263.3794989174366),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 469.7, 488.7599997625391, 504.9150001904361, 525.608893801269,
             583.1039911718311, 565.053287389948, 251.44499998677858, 269.4684981588757, 301.2800000166069,
             246.80204821043242, 386.2329499862754, 49.39870858635881, 266.04075608823547),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 507.82, 523.6016632323489, 538.5699999087508,
             579.9007477242704, 574.9205743380877, 392.22714798045877, 280.18999428958915, 320.3399999066655,
             326.5662108668542, 410.2879006043737, 51.364163051684194, 276.6258706990364),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 540.13, 553.8637073612125, 567.3388641713556,
             578.9023626735006, 424.3210919010731, 288.96608339042143, 336.4950000921659, 591.1987504046334,
             449.9188980682869, 52.972987352045756, 285.29032459934564),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 569.32, 581.9350001623353, 597.2784101094609,
             301.2549999629922, 296.67157834885364, 351.09000004577035, 401.8538254309484, 460.88316523821953,
             54.38555135327764, 292.89780272306587),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 594.55, 606.1249998398653, 313.87000000697026,
             303.17397192041403, 363.7050000590259, 620.2668190383877, 511.75213174276746, 55.57756395345157,
             299.3174833684127),
            (
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 617.7, 577.2299862316896,
                309.019953239269,
                542.3004282064553, 419.9718576844389, 515.5888844860302, 56.649243684271724, 305.0891015752611),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 33.19, 71.63105506691912,
             91.47318694533813, 146.55072923735315, 111.27977803716179, 13.131336832173636, 70.71988072670936),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 154.595, 143.31605527644138,
             305.14407307804413, 240.16534824990885, 28.340208247294157, 151.1713949575274),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 132.86, 293.21182540954925,
             233.52337124360108, 26.272562836541088, 135.01486800832257),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 647.096,
             462.16387137382395, 57.98153023851646, 334.41684678901396),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 373.1,
             44.026883037526055, 237.11035342219873),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.1953,
             27.979709989562075),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             150.687),
            )

    btij = ((1.0, 0.9962012744473688, 1.0457608475477602, 0.9926864371736339, 0.9794671061048931, 0.9610189814618515,
             0.9883837516735081, 1.0, 0.9843170258626256, 0.9640192053959713, 0.9553723938832778, 0.9167560489622263,
             0.8981670742437994, 0.8794272453106193, 1.0, 1.0, 0.9749819284912398, 1.1306790105358915,
             1.0223030507875808, 1.0, 0.9819903870322271),
            (
                0.0, 1.0, 1.011823803472132, 1.0154017068075594, 1.0053618260905741, 0.9857871235696968,
                0.9890605506580747,
                1.0, 1.0, 1.0, 1.0, 1.0, 0.9146616523823026, 0.9176384047491958, 0.8951701836504297, 0.9943890707901669,
                1.0, 1.0, 1.0094067502986779, 0.4800671255126253, 0.9981405511920447),
            (0.0, 0.0, 1.0, 1.0279347027190955, 1.0683714165754097, 1.047224395384351, 1.036672193386368,
             1.0387298231114361, 1.0547306329306319, 1.0, 1.0237520231211046, 1.0602631024170082, 1.0154363548775043,
             1.040458732428864, 0.8879673499048379, 1.0, 1.0, 0.994751315306562, 1.0323262738519838, 0.5904041822844169,
             0.9930378861244568),
            (0.0, 0.0, 0.0, 1.0, 0.9924138303256935, 1.0, 0.9982618639363469, 1.0, 0.997379610862591, 1.0, 1.0,
             0.968390363957066, 1.0, 0.9426818811759997, 0.8704327055561685, 1.0, 1.0, 1.0, 0.9804907998686012, 1.0,
             1.0),
            (0.0, 0.0, 0.0, 0.0, 1.0, 0.9960285469592408, 1.0006206742792634, 0.9887606097055807, 0.9929804041083284,
             1.0, 1.0, 1.0, 1.0, 0.9708776387253003, 1.0, 1.0, 1.0, 1.0, 0.9852022640704851, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.9998449240126066, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
             0.9497487706071003, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.987416608471285, 1.0, 1.0, 1.0, 1.0,
             0.9721228125694491, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
             0.9254567965682359, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 0.9952875848338202, 1.0, 1.0, 1.0, 1.0,
             0.9719812866923787, 1.0, 1.0),
            (
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0,
                0.977997214742632,
                1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.1338375626616122, 1.0,
             1.1016488915232154, 0.8049001351229038, 0.9469068980543366, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0,
             1.0000462065337485),
            (
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0,
                1.051725596885534,
                1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0))

    for i in range(NcGERG):
        if x[i] > epsilon:
            F = 1
            for j in range(i, NcGERG):
                if x[j] > epsilon:
                    xij = F * (x[i] * x[j]) * (x[i] + x[j])
                    Vr = Vr + xij * gvij[i][j] / (bvij[i][j] * x[i] + x[j])
                    Tr = Tr + xij * gtij[i][j] / (btij[i][j] * x[i] + x[j])
                    F = 2
    if Vr > epsilon:
        Dr = 1. / Vr
    Drold = Dr
    Trold = Tr

    return Tr, Dr


# @njit
def tTermsGERG(lntau, x):
    """
    // Private Sub tTermsGERG(lntau, x)

    // Calculate temperature dependent parts of the GERG-2008 equation of state
    :param lntau:
    :param x:
    :return:
    """
    taup0 = [0.] * 12
    NcGERG = 21
    epsilon = 1e-15

    kpol = (6, 6, 4, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 5, 6, 6, 7, 6, 4, 6)
    kexp = (18, 18, 18, 18, 6, 6, 6, 6, 6, 6, 6, 6, 6, 6, 9, 6, 6, 9, 6, 8, 6)

    toik = ((
                0.125, 1.125, 0.375, 1.125, 0.625, 1.5, 0.625, 2.625, 2.75, 2.125, 2.0, 1.75, 4.5, 4.75, 5.0, 4.0, 4.5,
                7.5,
                14.0, 11.5, 26.0, 28.0, 30.0, 16.0),
            (
                0.125, 1.125, 0.375, 1.125, 0.625, 1.5, 0.625, 2.625, 2.75, 2.125, 2.0, 1.75, 4.5, 4.75, 5.0, 4.0, 4.5,
                7.5,
                14.0, 11.5, 26.0, 28.0, 30.0, 16.0),
            (0.0, 1.25, 1.625, 0.375, 0.375, 1.375, 1.125, 1.375, 0.125, 1.625, 3.75, 3.5, 7.5, 8.0, 6.0, 16.0, 11.0,
             24.0, 26.0, 28.0, 24.0, 26.0, 0.0, 0.0),
            (
                0.125, 1.125, 0.375, 1.125, 0.625, 1.5, 0.625, 2.625, 2.75, 2.125, 2.0, 1.75, 4.5, 4.75, 5.0, 4.0, 4.5,
                7.5,
                14.0, 11.5, 26.0, 28.0, 30.0, 16.0),
            (0.25, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (0.25, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (0.25, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (0.25, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (0.25, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (0.25, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (0.25, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (0.25, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (0.25, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (0.25, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (
                0.5, 0.625, 0.375, 0.625, 1.125, 2.625, 0.0, 0.25, 1.375, 4.0, 4.25, 5.0, 8.0, 8.0, 0.0, 0.0, 0.0, 0.0,
                0.0,
                0.0, 0.0, 0.0, 0.0, 0.0),
            (0.25, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (0.25, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (0.5, 1.25, 1.875, 0.125, 1.5, 1.0, 0.75, 1.5, 0.625, 2.625, 5.0, 4.0, 4.5, 3.0, 4.0, 6.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0),
            (0.25, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (
                0.0, 0.125, 0.75, 1.0, 0.75, 2.625, 0.125, 1.25, 2.0, 1.0, 4.5, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0,
                0.0, 0.0, 0.0, 0.0),
            (0.25, 1.125, 1.5, 1.375, 0.25, 0.875, 0.625, 1.75, 3.625, 3.625, 14.5, 12.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0, 0.0, 0.0))

    noik = ((
                0.57335704239162, -1.676068752373, 0.23405291834916, -0.21947376343441, 0.016369201404128,
                0.01500440638928,
                0.098990489492918, 0.58382770929055, -0.7478686756039, 0.30033302857974, 0.20985543806568,
                -0.018590151133061, -0.15782558339049, 0.12716735220791, -0.032019743894346, -0.068049729364536,
                0.024291412853736, 0.0051440451639444, -0.019084949733532, 0.0055229677241291, -0.0044197392976085,
                0.040061416708429, -0.033752085907575, -0.0025127658213357),
            (0.59889711801201, -1.6941557480731, 0.24579736191718, -0.23722456755175, 0.017954918715141,
             0.014592875720215, 0.10008065936206, 0.73157115385532, -0.88372272336366, 0.31887660246708,
             0.20766491728799, -0.019379315454158, -0.16936641554983, 0.13546846041701, -0.033066712095307,
             -0.060690817018557, 0.012797548292871, 0.0058743664107299, -0.018451951971969, 0.0047226622042472,
             -0.0052024079680599, 0.043563505956635, -0.036251690750939, -0.0028974026866543),
            (
                0.52646564804653, -1.4995725042592, 0.27329786733782, 0.12949500022786, 0.15404088341841,
                -0.58186950946814,
                -0.18022494838296, -0.095389904072812, -0.0080486819317679, -0.03554775127309, -0.28079014882405,
                -0.082435890081677, 0.010832427979006, -0.0067073993161097, -0.0046827907600524, -0.028359911832177,
                0.019500174744098, -0.21609137507166, 0.43772794926972, -0.22130790113593, 0.015190189957331,
                -0.0153809489533, 0.0, 0.0),
            (0.63596780450714, -1.7377981785459, 0.28914060926272, -0.33714276845694, 0.022405964699561,
             0.015715424886913, 0.11450634253745, 1.0612049379745, -1.2855224439423, 0.39414630777652, 0.31390924682041,
             -0.021592277117247, -0.21723666564905, -0.28999574439489, 0.42321173025732, 0.04643410025926,
             -0.13138398329741, 0.011492850364368, -0.033387688429909, 0.015183171583644, -0.0047610805647657,
             0.046917166277885, -0.039401755804649, -0.0032569956247611),
            (1.0403973107358, -2.8318404081403, 0.84393809606294, -0.076559591850023, 0.09469737305728,
             0.00024796475497006, 0.2774376042287, -0.043846000648377, -0.2699106478435, -0.06931341308986,
             -0.029632145981653, 0.01404012675138, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (
                1.04293315891, -2.8184272548892, 0.8617623239785, -0.10613619452487, 0.098615749302134,
                0.00023948208682322,
                0.3033000485695, -0.041598156135099, -0.29991937470058, -0.080369342764109, -0.029761373251151,
                0.01305963030314, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (1.0626277411455, -2.862095182835, 0.88738233403777, -0.12570581155345, 0.10286308708106,
             0.00025358040602654, 0.32325200233982, -0.037950761057432, -0.32534802014452, -0.079050969051011,
             -0.020636720547775, 0.005705380933475, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (1.0963, -3.0402, 1.0317, -0.1541, 0.11535, 0.00029809, 0.39571, -0.045881, -0.35804, -0.10107, -0.035484,
             0.018156, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (1.0968643098001, -2.9988888298061, 0.99516886799212, -0.16170708558539, 0.11334460072775,
             0.00026760595150748, 0.40979881986931, -0.040876423083075, -0.38169482469447, -0.10931956843993,
             -0.03207322332799, 0.016877016216975, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (1.0553238013661, -2.6120615890629, 0.7661388296726, -0.29770320622459, 0.11879907733358,
             0.00027922861062617, 0.46347589844105, 0.011433196980297, -0.48256968738131, -0.093750558924659,
             -0.0067273247155994, -0.0051141583585428, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (
                1.0543747645262, -2.6500681506144, 0.81730047827543, -0.30451391253428, 0.122538687108,
                0.00027266472743928,
                0.4986582568167, -0.00071432815084176, -0.5423689552545, -0.13801821610756, -0.0061595287380011,
                0.00048602510393022, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (1.0722544875633, -2.4632951172003, 0.65386674054928, -0.36324974085628, 0.12713269626764,
             0.0003071357277793, 0.5265685698754, 0.019362862857653, -0.58939426849155, -0.14069963991934,
             -0.0078966330500036, 0.0033036597968109, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (1.1151, -2.702, 0.83416, -0.38828, 0.1376, 0.00028185, 0.62037, 0.015847, -0.61726, -0.15043, -0.012982,
             0.0044325, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (1.0461, -2.4807, 0.74372, -0.52579, 0.15315, 0.00032865, 0.84178, 0.055424, -0.73555, -0.18507, -0.020775,
             0.012335, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (5.3579928451252, -6.2050252530595, 0.13830241327086, -0.071397954896129, 0.015474053959733,
             -0.14976806405771, -0.026368723988451, 0.056681303156066, -0.060063958030436, -0.45043942027132,
             0.424788402445, -0.021997640827139, -0.01049952137453, -0.0028955902866816, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
             0.0, 0.0, 0.0, 0.0),
            (0.88878286369701, -2.4879433312148, 0.59750190775886, 0.0096501817061881, 0.07197042871277,
             0.00022337443000195, 0.18558686391474, -0.03812936803576, -0.15352245383006, -0.026726814910919,
             -0.025675298677127, 0.0095714302123668, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (0.90554, -2.4515, 0.53149, 0.024173, 0.072156, 0.00018818, 0.19405, -0.043268, -0.12778, -0.027896,
             -0.034154, 0.016329, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (
                0.82728408749586, -1.8602220416584, -1.1199009613744, 0.15635753976056, 0.87375844859025,
                -0.36674403715731,
                0.053987893432436, 1.0957690214499, 0.053213037828563, 0.013050533930825, -0.41079520434476,
                0.1463744334412, -0.055726838623719, -0.0112017741438, -0.0066062758068099, 0.0046918522004538, 0.0,
                0.0,
                0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (0.87641, -2.0367, 0.21634, -0.050199, 0.066994, 0.00019076, 0.20227, -0.0045348, -0.2223, -0.034714,
             -0.014885, 0.0074154, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (-0.45579024006737, 1.2516390754925, -1.5438231650621, 0.020467489707221, -0.34476212380781,
             -0.020858459512787, 0.016227414711778, -0.057471818200892, 0.019462416430715, -0.03329568012302,
             -0.010863577372367, -0.022173365245954, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (0.85095714803969, -2.400322294348, 0.54127841476466, 0.016919770692538, 0.068825965019035,
             0.00021428032815338, 0.17429895321992, -0.033654495604194, -0.13526799857691, -0.016387350791552,
             -0.024987666851475, 0.0088769204815709, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0))

    taup = [[0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0.],
            [0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.,
             0., 0., 0., 0., 0., 0., 0., 0.]]

    mNumb = ((-1, 2, 3, 0, 1, 9, 9, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1),
             (-1, -1, 4, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
             (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
             (-1, -1, -1, -1, 9, 9, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
             (-1, -1, -1, -1, -1, 9, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
             (-1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
             (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
             (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
             (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
             (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
             (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
             (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
             (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
             (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
             (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
             (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
             (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
             (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
             (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
             (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1),
             (-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1))

    kpolij = (2, 5, 2, 3, 2, 3, 4, 0, 0, 10)

    taupijk = [[0.] * 12 for _ in range(21)]

    nijk = ((-0.00080926050298746, -0.00075381925080059, -0.041618768891219, -0.23452173681569, 0.14003840584586,
             0.063281744807738, -0.034660425848809, -0.23918747334251, 0.0019855255066891, 6.1777746171555,
             -6.9575358271105, 1.0630185306388),
            (0.013746429958576, -0.0074425012129552, -0.0045516600213685, -0.0054546603350237, 0.0023682016824471,
             0.18007763721438, -0.44773942932486, 0.0193273748882, -0.30632197804624, 0.0, 0.0, 0.0),
            (-0.0098038985517335, 0.00042487270143005, -0.034800214576142, -0.13333813013896, -0.011993694974627,
             0.069243379775168, -0.31022508148249, 0.24495491753226, 0.22369816716981, 0.0, 0.0, 0.0),
            (-0.10859387354942, 0.080228576727389, -0.0093303985115717, 0.040989274005848, -0.24338019772494,
             0.23855347281124, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (0.28661625028399, -0.10919833861247, -1.137403208227, 0.76580544237358, 0.0042638000926819,
             0.17673538204534, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (-0.47376518126608, 0.48961193461001, -0.0057011062090535, -0.1996682004132, -0.69411103101723,
             0.69226192739021, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (
                -0.25157134971934, -0.0062203841111983, 0.088850315184396, -0.035592212573239, 0.0, 0.0, 0.0, 0.0, 0.0,
                0.0,
                0.0, 0.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (2.5574776844118, -7.9846357136353, 4.7859131465806, -0.73265392369587, 1.3805471345312, 0.28349603476365,
             -0.49087385940425, -0.10291888921447, 0.11836314681968, 5.5527385721943e-05, 0.0, 0.0))

    tijk = ((0.65, 1.55, 3.1, 5.9, 7.05, 3.35, 1.2, 5.8, 2.7, 0.45, 0.55, 1.95),
            (1.85, 3.95, 0.0, 1.85, 3.85, 5.25, 3.85, 0.2, 6.5, 0.0, 0.0, 0.0),
            (0.0, 1.85, 7.85, 5.4, 0.0, 0.75, 2.8, 4.45, 4.25, 0.0, 0.0, 0.0),
            (2.6, 1.95, 0.0, 3.95, 7.95, 8.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (1.85, 1.4, 3.2, 2.5, 8.0, 3.75, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (0.0, 0.05, 0.0, 3.65, 4.9, 4.45, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (2.0, -1.0, 1.75, 1.4, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0),
            (1.0, 1.55, 1.7, 0.25, 1.35, 0.0, 1.25, 0.0, 0.7, 5.4, 0.0, 0.0))

    i = 5  # Use propane to get exponents for short form of EOS
    for k in range(kpol[i] + kexp[i]):  # for (int k = 1; k <= kpol[i] + kexp[i]; ++k)
        taup0[k] = math.exp(toik[i][k] * lntau)
    for i in range(NcGERG):  # for (int i = 1; i <= NcGERG; ++i)
        if x[i] > epsilon:
            if (i > 3) and (i != 14) and (i != 17) and (i != 19):
                for k in range(int(kpol[i] + kexp[i])):  # for (int k = 1; k <= kpol[i] + kexp[i]; ++k)
                    taup[i][k] = noik[i][k] * taup0[k]
            else:
                for k in range(int(kpol[i] + kexp[i])):  # for (int k = 1; k <= kpol[i] + kexp[i]; ++k)
                    taup[i][k] = noik[i][k] * math.exp(toik[i][k] * lntau)

    for i in range(NcGERG - 1):  # for (int i = 1; i <= NcGERG - 1; ++i)
        if x[i] > epsilon:
            for j in range(i + 1, NcGERG):  # for (int j = i + 1; j <= NcGERG; ++j)
                if x[j] > epsilon:
                    mn = int(mNumb[i][j])
                    if mn >= 0:
                        for k in range(int(kpolij[mn])):  # for (int k = 1; k <= kpolij[mn]; ++k)
                            taupijk[mn][k] = nijk[mn][k] * math.exp(tijk[mn][k] * lntau)
    return taup0, taup, taupijk


@njit
def PseudoCriticalPointGERG(x):
    """
    // PseudoCriticalPointGERG(x, Tcx, Dcx)

    // Calculate a pseudo critical point as the mole fraction average of the critical temperatures and critical volumes
    :param x:
    :return:
    """
    NcGERG = 21
    epsilon = 1e-15
    Vcx = 0.
    Tcx = 0.
    Vcx = 0.
    Dcx = 0.

    Tc = (190.564, 126.192, 304.1282, 305.322, 369.825, 407.817, 425.125, 460.35, 469.7, 507.82, 540.13, 569.32, 594.55, 617.7, 33.19, 154.595, 132.86, 647.096, 373.1, 5.1953, 150.687)
    Dc = (10.139342719, 11.1839, 10.624978698, 6.87085454, 5.000043088, 3.86014294, 3.920016792, 3.271, 3.215577588, 2.705877875, 2.315324434, 2.056404127, 1.81, 1.64, 14.94, 13.63, 10.85, 17.87371609, 10.19, 17.399, 13.407429659)


    for i in range(NcGERG):  # for (int i = 1; i <= NcGERG; ++i)
        Tcx = Tcx + x[i] * Tc[i]
        Vcx = Vcx + x[i] / Dc[i]
    if Vcx > epsilon:
        Dcx = 1. / Vcx

    return Tcx, Dcx


@njit
def AlpharGERG(itau, idelta, T, D, x):
    """
    Private Sub AlpharGERG(itau, idelta, T, D, x, ar)

    Calculate dimensionless residual Helmholtz energy and its derivatives with respect to tau and delta.

    :param itau:   Set this to 1 to calculate "ar" derivatives with respect to tau [i.e., ar(1,0), ar(1,1), and ar(2,0)], otherwise set it to 0.
    :param idelta: Currently not used, but kept as an input for future use in specifying the highest density derivative needed.
    :param T:      Temperature (K)
    :param D:      Density (mol/l)
    :param x:      Composition (mole fraction)
    :return:        ar(0,0) - Residual Helmholtz energy (dimensionless, =a/RT)
                    ar(0,1) -     delta*partial  (ar)/partial(delta)
                    ar(0,2) -   delta^2*partial^2(ar)/partial(delta)^2
                    ar(0,3) -   delta^3*partial^3(ar)/partial(delta)^3
                    ar(1,0) -       tau*partial  (ar)/partial(tau)
                    ar(1,1) - tau*delta*partial^2(ar)/partial(tau)/partial(delta)
                    ar(2,0) -     tau^2*partial^2(ar)/partial(tau)^2
    """

    global Told, Trold, Trold2, Drold

    global Tr, Dr
    delp = np.zeros(7+1)
    Expd = np.zeros(7+1)
    ar = np.zeros((4, 4))

    for i in range(4):
        for j in range(4):
            ar[i][j] = 0

    # Set up del, tau, log(tau), and the first 7 calculations for del^i
    Tr, Dr = ReducingParametersGERG()
    delta = D / Dr
    tau = Tr / T
    lntau = math.log(tau)
    delp[1] = delta
    Expd[1] = math.exp(-delp[1])
    for i in range(2, 8):
        delp[i] = delp[i - 1] * delta
        Expd[i] = math.exp(-delp[i])

    # If temperature has changed, calculate temperature dependent parts
    if (abs(T - Told) > 0.0000001) or (abs(Tr - Trold2) > 0.0000001):
        tTermsGERG(lntau, x)
    Told = T
    Trold2 = Tr

    # Calculate pure fluid contributions
    for i in range(1, NcGERG+1):
        if x[i] > epsilon:
            for k in range(1, int(kpol[i]+1)):
                ndt = x[i] * delp[int(doik[i][k])] * taup[i][k]
                ndtd = ndt * doik[i][k]
                ar[0][1] += ndtd
                ar[0][2] += ndtd * (doik[i][k] - 1)
                if itau > 0:
                    ndtt = ndt * toik[i][k]
                    ar[0][0] += ndt
                    ar[1][0] += ndtt
                    ar[2][0] += ndtt * (toik[i][k] - 1)
                    ar[1][1] += ndtt * doik[i][k]
                    ar[1][2] += ndtt * doik[i][k] * (doik[i][k] - 1)
                    ar[0][3] += ndtd * (doik[i][k] - 1) * (doik[i][k] - 2)
            for k in range(int(kpol[i]+1), int(kpol[i] + kexp[i]+1)):
                ndt = x[i] * delp[int(doik[i][k])] * taup[i][k]*Expd[int(coik[i][k])]
                ex = coik[i][k] * delp[int(coik[i][k])]
                ex2 = doik[i][k] - ex
                ex3 = ex2 * (ex2 - 1)
                ar[0][1] += ndt * ex2
                ar[0][2] += ndt * (ex3 - coik[i][k] * ex)
                if itau > 0:
                    ndtt = ndt * toik[i][k]
                    ar[0][0] += ndt
                    ar[1][0] += ndtt
                    ar[2][0] += ndtt * (toik[i][k] - 1)
                    ar[1][1] += ndtt * ex2
                    ar[1][2] += ndtt * (ex3 - coik[i][k] * ex)
                    ar[0][3] += ndt * (ex3 * (ex2 - 2) - ex * (3 * ex2 - 3 + coik[i][k]) * coik[i][k])

    # Calculate mixture contributions
    for i in range(1, NcGERG):  # for (int i = 1; i <= NcGERG - 1; ++i)
        if x[i] > epsilon:
            for j in range(i+1, NcGERG+1):  # for (int j = i + 1; j <= NcGERG; ++j)
                if x[j] > epsilon:
                    mn = int(mNumb[i][j])
                    if mn >= 0:
                        xijf = x[i] * x[j] * fij[i][j]
                        for k in range(1, int(kpolij[mn] + 1)):  # for (int k = 1; k <= kpolij[mn]; ++k)
                            ndt = xijf * delp[int(dijk[mn][k])] * taupijk[mn][k]
                            ndtd = ndt * dijk[mn][k]
                            ar[0][1] += ndtd
                            ar[0][2] += ndtd * (dijk[mn][k] - 1)
                            if itau > 0:
                                ndtt = ndt * tijk[mn][k]
                                ar[0][0] += ndt
                                ar[1][0] += ndtt
                                ar[2][0] += ndtt * (tijk[mn][k] - 1)
                                ar[1][1] += ndtt * dijk[mn][k]
                                ar[1][2] += ndtt * dijk[mn][k] * (dijk[mn][k] - 1)
                                ar[0][3] += ndtd * (dijk[mn][k] - 1) * (dijk[mn][k] - 2)

                        for k in range(int(1+kpolij[mn]), int(kpolij[mn]+kexpij[mn]+1)):  # for (int k = 1 + kpolij[mn]; k <= kpolij[mn] + kexpij[mn]; ++k)
                            cij0 = cijk[mn][k] * delp[2]
                            eij0 = eijk[mn][k] * delta
                            ndt = xijf * nijk[mn][k] * delp[int(dijk[mn][k])] * math.exp(cij0 + eij0 + gijk[mn][k] + tijk[mn][k] * lntau)
                            ex = dijk[mn][k] + 2 * cij0 + eij0
                            ex2 = (ex * ex - dijk[mn][k] + 2 * cij0)
                            ar[0][1] += ndt * ex
                            ar[0][2] += ndt * ex2
                            if itau > 0:
                                ndtt = ndt * tijk[mn][k]
                                ar[0][0] += ndt
                                ar[1][0] += ndtt
                                ar[2][0] += ndtt * (tijk[mn][k] - 1)
                                ar[1][1] += ndtt * ex
                                ar[1][2] += ndtt * ex2
                                ar[0][3] += ndt * (ex * (ex2 - 2 * (dijk[mn][k] - 2 * cij0)) + 2 * dijk[mn][k])
    return ar


if __name__ == "__main__":
    # from setup import *

    # from numba.typed import List
    x = (0.77824, 0.02, 0.06, 0.08, 0.03, 0.0015, 0.003, 0.0005, 0.00165, 0.00215, 0.00088, 0.00024, 0.00015, 0.00009,
         0.004, 0.005, 0.002, 0.0001, 0.0025, 0.007, 0.001)
    Drold = 0.
    Trold = 0.
    xold = (0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0., 0.)
    print(MolarMassGERG(x))

    print(ReducingParametersGERG(x, Drold, Trold, xold))

    print(PseudoCriticalPointGERG(x))

    # Tr, Dr = ReducingParametersGERG(x, Drold, Trold, xold)
    #
    # D = 15.03402741629294
    # T = 400.
    # delta = D / Dr
    # tau = Tr / T
    # lntau = math.log(tau)
    #
    # delp = [0.] * 7
    # Expd = [0.] * 7
    #
    # delp[0] = delta
    # Expd[0] = math.exp(-delp[0])
    #
    # for i in range(1, 7):
    #     delp[i] = delp[i-1] * delta
    #     Expd[i] = math.exp(-delp[i])
    #
    # print(tTermsGERG(lntau, x))
