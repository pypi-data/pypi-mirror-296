"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from panora_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import TypedDict
from typing_extensions import NotRequired


class UnifiedAccountingContactInputFieldMappingsTypedDict(TypedDict):
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""
    
    

class UnifiedAccountingContactInputFieldMappings(BaseModel):
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""
    
    

class UnifiedAccountingContactInputTypedDict(TypedDict):
    name: NotRequired[Nullable[str]]
    r"""The name of the contact"""
    is_supplier: NotRequired[Nullable[bool]]
    r"""Indicates if the contact is a supplier"""
    is_customer: NotRequired[Nullable[bool]]
    r"""Indicates if the contact is a customer"""
    email_address: NotRequired[Nullable[str]]
    r"""The email address of the contact"""
    tax_number: NotRequired[Nullable[str]]
    r"""The tax number of the contact"""
    status: NotRequired[Nullable[str]]
    r"""The status of the contact"""
    currency: NotRequired[Nullable[str]]
    r"""The currency associated with the contact"""
    remote_updated_at: NotRequired[Nullable[str]]
    r"""The date when the contact was last updated in the remote system"""
    company_info_id: NotRequired[Nullable[str]]
    r"""The UUID of the associated company info"""
    field_mappings: NotRequired[Nullable[UnifiedAccountingContactInputFieldMappingsTypedDict]]
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""
    

class UnifiedAccountingContactInput(BaseModel):
    name: OptionalNullable[str] = UNSET
    r"""The name of the contact"""
    is_supplier: OptionalNullable[bool] = UNSET
    r"""Indicates if the contact is a supplier"""
    is_customer: OptionalNullable[bool] = UNSET
    r"""Indicates if the contact is a customer"""
    email_address: OptionalNullable[str] = UNSET
    r"""The email address of the contact"""
    tax_number: OptionalNullable[str] = UNSET
    r"""The tax number of the contact"""
    status: OptionalNullable[str] = UNSET
    r"""The status of the contact"""
    currency: OptionalNullable[str] = UNSET
    r"""The currency associated with the contact"""
    remote_updated_at: OptionalNullable[str] = UNSET
    r"""The date when the contact was last updated in the remote system"""
    company_info_id: OptionalNullable[str] = UNSET
    r"""The UUID of the associated company info"""
    field_mappings: OptionalNullable[UnifiedAccountingContactInputFieldMappings] = UNSET
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["name", "is_supplier", "is_customer", "email_address", "tax_number", "status", "currency", "remote_updated_at", "company_info_id", "field_mappings"]
        nullable_fields = ["name", "is_supplier", "is_customer", "email_address", "tax_number", "status", "currency", "remote_updated_at", "company_info_id", "field_mappings"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        
