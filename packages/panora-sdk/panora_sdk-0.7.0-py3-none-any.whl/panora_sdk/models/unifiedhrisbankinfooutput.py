"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from panora_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import TypedDict
from typing_extensions import NotRequired


class FieldMappingsModelTypedDict(TypedDict):
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""
    
    

class FieldMappingsModel(BaseModel):
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""
    
    

class RemoteDataTypedDict(TypedDict):
    r"""The remote data of the bank info in the context of the 3rd Party"""
    
    

class RemoteData(BaseModel):
    r"""The remote data of the bank info in the context of the 3rd Party"""
    
    

class UnifiedHrisBankinfoOutputTypedDict(TypedDict):
    id: Nullable[str]
    r"""The UUID of the bank info record"""
    created_at: Nullable[datetime]
    r"""The created date of the bank info record"""
    modified_at: Nullable[datetime]
    r"""The last modified date of the bank info record"""
    remote_was_deleted: Nullable[bool]
    r"""Indicates if the bank info was deleted in the remote system"""
    account_type: NotRequired[Nullable[str]]
    r"""The type of the bank account"""
    bank_name: NotRequired[Nullable[str]]
    r"""The name of the bank"""
    account_number: NotRequired[Nullable[str]]
    r"""The account number"""
    routing_number: NotRequired[Nullable[str]]
    r"""The routing number of the bank"""
    employee_id: NotRequired[Nullable[str]]
    r"""The UUID of the associated employee"""
    field_mappings: NotRequired[Nullable[FieldMappingsModelTypedDict]]
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""
    remote_id: NotRequired[Nullable[str]]
    r"""The remote ID of the bank info in the context of the 3rd Party"""
    remote_data: NotRequired[Nullable[RemoteDataTypedDict]]
    r"""The remote data of the bank info in the context of the 3rd Party"""
    remote_created_at: NotRequired[Nullable[datetime]]
    r"""The date when the bank info was created in the 3rd party system"""
    

class UnifiedHrisBankinfoOutput(BaseModel):
    id: Nullable[str]
    r"""The UUID of the bank info record"""
    created_at: Nullable[datetime]
    r"""The created date of the bank info record"""
    modified_at: Nullable[datetime]
    r"""The last modified date of the bank info record"""
    remote_was_deleted: Nullable[bool]
    r"""Indicates if the bank info was deleted in the remote system"""
    account_type: OptionalNullable[str] = UNSET
    r"""The type of the bank account"""
    bank_name: OptionalNullable[str] = UNSET
    r"""The name of the bank"""
    account_number: OptionalNullable[str] = UNSET
    r"""The account number"""
    routing_number: OptionalNullable[str] = UNSET
    r"""The routing number of the bank"""
    employee_id: OptionalNullable[str] = UNSET
    r"""The UUID of the associated employee"""
    field_mappings: OptionalNullable[FieldMappingsModel] = UNSET
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""
    remote_id: OptionalNullable[str] = UNSET
    r"""The remote ID of the bank info in the context of the 3rd Party"""
    remote_data: OptionalNullable[RemoteData] = UNSET
    r"""The remote data of the bank info in the context of the 3rd Party"""
    remote_created_at: OptionalNullable[datetime] = UNSET
    r"""The date when the bank info was created in the 3rd party system"""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["account_type", "bank_name", "account_number", "routing_number", "employee_id", "field_mappings", "remote_id", "remote_data", "remote_created_at"]
        nullable_fields = ["id", "created_at", "modified_at", "remote_was_deleted", "account_type", "bank_name", "account_number", "routing_number", "employee_id", "field_mappings", "remote_id", "remote_data", "remote_created_at"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        
