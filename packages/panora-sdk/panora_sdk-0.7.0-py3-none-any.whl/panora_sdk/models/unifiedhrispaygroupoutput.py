"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from panora_sdk.types import BaseModel, Nullable, OptionalNullable, UNSET, UNSET_SENTINEL
from pydantic import model_serializer
from typing import TypedDict
from typing_extensions import NotRequired


class UnifiedHrisPaygroupOutputFieldMappingsTypedDict(TypedDict):
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""
    
    

class UnifiedHrisPaygroupOutputFieldMappings(BaseModel):
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""
    
    

class UnifiedHrisPaygroupOutputRemoteDataTypedDict(TypedDict):
    r"""The remote data of the pay group in the context of the 3rd Party"""
    
    

class UnifiedHrisPaygroupOutputRemoteData(BaseModel):
    r"""The remote data of the pay group in the context of the 3rd Party"""
    
    

class UnifiedHrisPaygroupOutputTypedDict(TypedDict):
    pay_group_name: NotRequired[Nullable[str]]
    r"""The name of the pay group"""
    field_mappings: NotRequired[Nullable[UnifiedHrisPaygroupOutputFieldMappingsTypedDict]]
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""
    id: NotRequired[Nullable[str]]
    r"""The UUID of the pay group record"""
    remote_id: NotRequired[Nullable[str]]
    r"""The remote ID of the pay group in the context of the 3rd Party"""
    remote_data: NotRequired[Nullable[UnifiedHrisPaygroupOutputRemoteDataTypedDict]]
    r"""The remote data of the pay group in the context of the 3rd Party"""
    remote_created_at: NotRequired[Nullable[datetime]]
    r"""The date when the pay group was created in the 3rd party system"""
    created_at: NotRequired[Nullable[datetime]]
    r"""The created date of the pay group record"""
    modified_at: NotRequired[Nullable[datetime]]
    r"""The last modified date of the pay group record"""
    remote_was_deleted: NotRequired[Nullable[bool]]
    r"""Indicates if the pay group was deleted in the remote system"""
    

class UnifiedHrisPaygroupOutput(BaseModel):
    pay_group_name: OptionalNullable[str] = UNSET
    r"""The name of the pay group"""
    field_mappings: OptionalNullable[UnifiedHrisPaygroupOutputFieldMappings] = UNSET
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""
    id: OptionalNullable[str] = UNSET
    r"""The UUID of the pay group record"""
    remote_id: OptionalNullable[str] = UNSET
    r"""The remote ID of the pay group in the context of the 3rd Party"""
    remote_data: OptionalNullable[UnifiedHrisPaygroupOutputRemoteData] = UNSET
    r"""The remote data of the pay group in the context of the 3rd Party"""
    remote_created_at: OptionalNullable[datetime] = UNSET
    r"""The date when the pay group was created in the 3rd party system"""
    created_at: OptionalNullable[datetime] = UNSET
    r"""The created date of the pay group record"""
    modified_at: OptionalNullable[datetime] = UNSET
    r"""The last modified date of the pay group record"""
    remote_was_deleted: OptionalNullable[bool] = UNSET
    r"""Indicates if the pay group was deleted in the remote system"""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["pay_group_name", "field_mappings", "id", "remote_id", "remote_data", "remote_created_at", "created_at", "modified_at", "remote_was_deleted"]
        nullable_fields = ["pay_group_name", "field_mappings", "id", "remote_id", "remote_data", "remote_created_at", "created_at", "modified_at", "remote_was_deleted"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        
