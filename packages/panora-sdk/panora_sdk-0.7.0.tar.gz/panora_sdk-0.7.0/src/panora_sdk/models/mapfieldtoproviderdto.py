"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from panora_sdk.types import BaseModel, Nullable, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import TypedDict
from typing_extensions import Annotated


class MapFieldToProviderDtoTypedDict(TypedDict):
    attribute_id: Nullable[str]
    r"""The attribute ID"""
    source_custom_field_id: Nullable[str]
    r"""The source custom field ID"""
    source_provider: Nullable[str]
    r"""The source provider"""
    linked_user_id: Nullable[str]
    r"""The linked user ID"""
    

class MapFieldToProviderDto(BaseModel):
    attribute_id: Annotated[Nullable[str], pydantic.Field(alias="attributeId")]
    r"""The attribute ID"""
    source_custom_field_id: Nullable[str]
    r"""The source custom field ID"""
    source_provider: Nullable[str]
    r"""The source provider"""
    linked_user_id: Nullable[str]
    r"""The linked user ID"""
    
    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = []
        nullable_fields = ["attributeId", "source_custom_field_id", "source_provider", "linked_user_id"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields
                or (
                    k in optional_fields
                    and k in nullable_fields
                    and (
                        self.__pydantic_fields_set__.intersection({n})
                        or k in null_default_fields
                    )  # pylint: disable=no-member
                )
            ):
                m[k] = val

        return m
        
