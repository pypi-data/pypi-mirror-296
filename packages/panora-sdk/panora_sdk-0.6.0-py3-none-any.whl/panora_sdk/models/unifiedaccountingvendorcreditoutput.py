"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .lineitem import LineItem, LineItemTypedDict
from datetime import datetime
from panora_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List, Optional, TypedDict
from typing_extensions import NotRequired


class UnifiedAccountingVendorcreditOutputFieldMappingsTypedDict(TypedDict):
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""


class UnifiedAccountingVendorcreditOutputFieldMappings(BaseModel):
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""


class UnifiedAccountingVendorcreditOutputRemoteDataTypedDict(TypedDict):
    r"""The remote data of the vendor credit in the context of the 3rd Party"""


class UnifiedAccountingVendorcreditOutputRemoteData(BaseModel):
    r"""The remote data of the vendor credit in the context of the 3rd Party"""


class UnifiedAccountingVendorcreditOutputTypedDict(TypedDict):
    number: NotRequired[Nullable[str]]
    r"""The number of the vendor credit"""
    transaction_date: NotRequired[Nullable[datetime]]
    r"""The date of the transaction"""
    vendor: NotRequired[Nullable[str]]
    r"""The UUID of the vendor associated with the credit"""
    total_amount: NotRequired[Nullable[str]]
    r"""The total amount of the vendor credit"""
    currency: NotRequired[Nullable[str]]
    r"""The currency of the vendor credit"""
    exchange_rate: NotRequired[Nullable[str]]
    r"""The exchange rate applied to the vendor credit"""
    company_id: NotRequired[Nullable[str]]
    r"""The UUID of the associated company"""
    tracking_categories: NotRequired[Nullable[List[str]]]
    r"""The UUID of the tracking categories associated with the vendor credit"""
    accounting_period_id: NotRequired[Nullable[str]]
    r"""The UUID of the associated accounting period"""
    line_items: NotRequired[List[LineItemTypedDict]]
    r"""The line items associated with this vendor credit"""
    field_mappings: NotRequired[
        Nullable[UnifiedAccountingVendorcreditOutputFieldMappingsTypedDict]
    ]
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""
    id: NotRequired[Nullable[str]]
    r"""The UUID of the vendor credit record"""
    remote_id: NotRequired[Nullable[str]]
    r"""The remote ID of the vendor credit"""
    created_at: NotRequired[datetime]
    r"""The created date of the vendor credit"""
    modified_at: NotRequired[datetime]
    r"""The last modified date of the vendor credit"""
    remote_updated_at: NotRequired[Nullable[datetime]]
    r"""The date when the vendor credit was last updated in the remote system"""
    remote_data: NotRequired[
        Nullable[UnifiedAccountingVendorcreditOutputRemoteDataTypedDict]
    ]
    r"""The remote data of the vendor credit in the context of the 3rd Party"""


class UnifiedAccountingVendorcreditOutput(BaseModel):
    number: OptionalNullable[str] = UNSET
    r"""The number of the vendor credit"""

    transaction_date: OptionalNullable[datetime] = UNSET
    r"""The date of the transaction"""

    vendor: OptionalNullable[str] = UNSET
    r"""The UUID of the vendor associated with the credit"""

    total_amount: OptionalNullable[str] = UNSET
    r"""The total amount of the vendor credit"""

    currency: OptionalNullable[str] = UNSET
    r"""The currency of the vendor credit"""

    exchange_rate: OptionalNullable[str] = UNSET
    r"""The exchange rate applied to the vendor credit"""

    company_id: OptionalNullable[str] = UNSET
    r"""The UUID of the associated company"""

    tracking_categories: OptionalNullable[List[str]] = UNSET
    r"""The UUID of the tracking categories associated with the vendor credit"""

    accounting_period_id: OptionalNullable[str] = UNSET
    r"""The UUID of the associated accounting period"""

    line_items: Optional[List[LineItem]] = None
    r"""The line items associated with this vendor credit"""

    field_mappings: OptionalNullable[
        UnifiedAccountingVendorcreditOutputFieldMappings
    ] = UNSET
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""

    id: OptionalNullable[str] = UNSET
    r"""The UUID of the vendor credit record"""

    remote_id: OptionalNullable[str] = UNSET
    r"""The remote ID of the vendor credit"""

    created_at: Optional[datetime] = None
    r"""The created date of the vendor credit"""

    modified_at: Optional[datetime] = None
    r"""The last modified date of the vendor credit"""

    remote_updated_at: OptionalNullable[datetime] = UNSET
    r"""The date when the vendor credit was last updated in the remote system"""

    remote_data: OptionalNullable[UnifiedAccountingVendorcreditOutputRemoteData] = UNSET
    r"""The remote data of the vendor credit in the context of the 3rd Party"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "number",
            "transaction_date",
            "vendor",
            "total_amount",
            "currency",
            "exchange_rate",
            "company_id",
            "tracking_categories",
            "accounting_period_id",
            "line_items",
            "field_mappings",
            "id",
            "remote_id",
            "created_at",
            "modified_at",
            "remote_updated_at",
            "remote_data",
        ]
        nullable_fields = [
            "number",
            "transaction_date",
            "vendor",
            "total_amount",
            "currency",
            "exchange_rate",
            "company_id",
            "tracking_categories",
            "accounting_period_id",
            "field_mappings",
            "id",
            "remote_id",
            "remote_updated_at",
            "remote_data",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
