"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from panora_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import TypedDict
from typing_extensions import NotRequired


class UnifiedHrisTimeoffOutputFieldMappingsTypedDict(TypedDict):
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""


class UnifiedHrisTimeoffOutputFieldMappings(BaseModel):
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""


class UnifiedHrisTimeoffOutputRemoteDataTypedDict(TypedDict):
    r"""The remote data of the time off in the context of the 3rd Party"""


class UnifiedHrisTimeoffOutputRemoteData(BaseModel):
    r"""The remote data of the time off in the context of the 3rd Party"""


class UnifiedHrisTimeoffOutputTypedDict(TypedDict):
    employee: NotRequired[Nullable[str]]
    r"""The UUID of the employee taking time off"""
    approver: NotRequired[Nullable[str]]
    r"""The UUID of the approver for the time off request"""
    status: NotRequired[Nullable[str]]
    r"""The status of the time off request"""
    employee_note: NotRequired[Nullable[str]]
    r"""A note from the employee about the time off request"""
    units: NotRequired[Nullable[str]]
    r"""The units used for the time off (e.g., Days, Hours)"""
    amount: NotRequired[Nullable[float]]
    r"""The amount of time off requested"""
    request_type: NotRequired[Nullable[str]]
    r"""The type of time off request"""
    start_time: NotRequired[Nullable[datetime]]
    r"""The start time of the time off"""
    end_time: NotRequired[Nullable[datetime]]
    r"""The end time of the time off"""
    field_mappings: NotRequired[
        Nullable[UnifiedHrisTimeoffOutputFieldMappingsTypedDict]
    ]
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""
    id: NotRequired[Nullable[str]]
    r"""The UUID of the time off record"""
    remote_id: NotRequired[Nullable[str]]
    r"""The remote ID of the time off in the context of the 3rd Party"""
    remote_data: NotRequired[Nullable[UnifiedHrisTimeoffOutputRemoteDataTypedDict]]
    r"""The remote data of the time off in the context of the 3rd Party"""
    remote_created_at: NotRequired[Nullable[datetime]]
    r"""The date when the time off was created in the 3rd party system"""
    created_at: NotRequired[Nullable[datetime]]
    r"""The created date of the time off record"""
    modified_at: NotRequired[Nullable[datetime]]
    r"""The last modified date of the time off record"""
    remote_was_deleted: NotRequired[Nullable[bool]]
    r"""Indicates if the time off was deleted in the remote system"""


class UnifiedHrisTimeoffOutput(BaseModel):
    employee: OptionalNullable[str] = UNSET
    r"""The UUID of the employee taking time off"""

    approver: OptionalNullable[str] = UNSET
    r"""The UUID of the approver for the time off request"""

    status: OptionalNullable[str] = UNSET
    r"""The status of the time off request"""

    employee_note: OptionalNullable[str] = UNSET
    r"""A note from the employee about the time off request"""

    units: OptionalNullable[str] = UNSET
    r"""The units used for the time off (e.g., Days, Hours)"""

    amount: OptionalNullable[float] = UNSET
    r"""The amount of time off requested"""

    request_type: OptionalNullable[str] = UNSET
    r"""The type of time off request"""

    start_time: OptionalNullable[datetime] = UNSET
    r"""The start time of the time off"""

    end_time: OptionalNullable[datetime] = UNSET
    r"""The end time of the time off"""

    field_mappings: OptionalNullable[UnifiedHrisTimeoffOutputFieldMappings] = UNSET
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""

    id: OptionalNullable[str] = UNSET
    r"""The UUID of the time off record"""

    remote_id: OptionalNullable[str] = UNSET
    r"""The remote ID of the time off in the context of the 3rd Party"""

    remote_data: OptionalNullable[UnifiedHrisTimeoffOutputRemoteData] = UNSET
    r"""The remote data of the time off in the context of the 3rd Party"""

    remote_created_at: OptionalNullable[datetime] = UNSET
    r"""The date when the time off was created in the 3rd party system"""

    created_at: OptionalNullable[datetime] = UNSET
    r"""The created date of the time off record"""

    modified_at: OptionalNullable[datetime] = UNSET
    r"""The last modified date of the time off record"""

    remote_was_deleted: OptionalNullable[bool] = UNSET
    r"""Indicates if the time off was deleted in the remote system"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "employee",
            "approver",
            "status",
            "employee_note",
            "units",
            "amount",
            "request_type",
            "start_time",
            "end_time",
            "field_mappings",
            "id",
            "remote_id",
            "remote_data",
            "remote_created_at",
            "created_at",
            "modified_at",
            "remote_was_deleted",
        ]
        nullable_fields = [
            "employee",
            "approver",
            "status",
            "employee_note",
            "units",
            "amount",
            "request_type",
            "start_time",
            "end_time",
            "field_mappings",
            "id",
            "remote_id",
            "remote_data",
            "remote_created_at",
            "created_at",
            "modified_at",
            "remote_was_deleted",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
