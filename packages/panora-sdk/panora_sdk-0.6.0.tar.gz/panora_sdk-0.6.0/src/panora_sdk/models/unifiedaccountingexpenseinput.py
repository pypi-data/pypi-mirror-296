"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .lineitem import LineItem, LineItemTypedDict
from datetime import datetime
from panora_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import List, Optional, TypedDict
from typing_extensions import NotRequired


class UnifiedAccountingExpenseInputFieldMappingsTypedDict(TypedDict):
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""


class UnifiedAccountingExpenseInputFieldMappings(BaseModel):
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""


class UnifiedAccountingExpenseInputTypedDict(TypedDict):
    transaction_date: NotRequired[Nullable[datetime]]
    r"""The date of the expense transaction"""
    total_amount: NotRequired[Nullable[float]]
    r"""The total amount of the expense"""
    sub_total: NotRequired[Nullable[float]]
    r"""The sub-total amount of the expense (before tax)"""
    total_tax_amount: NotRequired[Nullable[float]]
    r"""The total tax amount of the expense"""
    currency: NotRequired[Nullable[str]]
    r"""The currency of the expense"""
    exchange_rate: NotRequired[Nullable[str]]
    r"""The exchange rate applied to the expense"""
    memo: NotRequired[Nullable[str]]
    r"""A memo or description for the expense"""
    account_id: NotRequired[Nullable[str]]
    r"""The UUID of the associated account"""
    contact_id: NotRequired[Nullable[str]]
    r"""The UUID of the associated contact"""
    company_info_id: NotRequired[Nullable[str]]
    r"""The UUID of the associated company info"""
    tracking_categories: NotRequired[Nullable[List[str]]]
    r"""The UUIDs of the tracking categories associated with the expense"""
    line_items: NotRequired[List[LineItemTypedDict]]
    r"""The line items associated with this expense"""
    field_mappings: NotRequired[
        Nullable[UnifiedAccountingExpenseInputFieldMappingsTypedDict]
    ]
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""


class UnifiedAccountingExpenseInput(BaseModel):
    transaction_date: OptionalNullable[datetime] = UNSET
    r"""The date of the expense transaction"""

    total_amount: OptionalNullable[float] = UNSET
    r"""The total amount of the expense"""

    sub_total: OptionalNullable[float] = UNSET
    r"""The sub-total amount of the expense (before tax)"""

    total_tax_amount: OptionalNullable[float] = UNSET
    r"""The total tax amount of the expense"""

    currency: OptionalNullable[str] = UNSET
    r"""The currency of the expense"""

    exchange_rate: OptionalNullable[str] = UNSET
    r"""The exchange rate applied to the expense"""

    memo: OptionalNullable[str] = UNSET
    r"""A memo or description for the expense"""

    account_id: OptionalNullable[str] = UNSET
    r"""The UUID of the associated account"""

    contact_id: OptionalNullable[str] = UNSET
    r"""The UUID of the associated contact"""

    company_info_id: OptionalNullable[str] = UNSET
    r"""The UUID of the associated company info"""

    tracking_categories: OptionalNullable[List[str]] = UNSET
    r"""The UUIDs of the tracking categories associated with the expense"""

    line_items: Optional[List[LineItem]] = None
    r"""The line items associated with this expense"""

    field_mappings: OptionalNullable[UnifiedAccountingExpenseInputFieldMappings] = UNSET
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "transaction_date",
            "total_amount",
            "sub_total",
            "total_tax_amount",
            "currency",
            "exchange_rate",
            "memo",
            "account_id",
            "contact_id",
            "company_info_id",
            "tracking_categories",
            "line_items",
            "field_mappings",
        ]
        nullable_fields = [
            "transaction_date",
            "total_amount",
            "sub_total",
            "total_tax_amount",
            "currency",
            "exchange_rate",
            "memo",
            "account_id",
            "contact_id",
            "company_info_id",
            "tracking_categories",
            "field_mappings",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
