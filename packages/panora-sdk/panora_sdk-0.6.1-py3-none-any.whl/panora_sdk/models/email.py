"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from panora_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import TypedDict
from typing_extensions import NotRequired


class OwnerType(str, Enum):
    r"""The owner type of an email"""

    COMPANY = "COMPANY"
    CONTACT = "CONTACT"


class EmailTypedDict(TypedDict):
    email_address: Nullable[str]
    r"""The email address"""
    email_address_type: Nullable[str]
    r"""The email address type. Authorized values are either PERSONAL or WORK."""
    owner_type: NotRequired[Nullable[OwnerType]]
    r"""The owner type of an email"""


class Email(BaseModel):
    email_address: Nullable[str]
    r"""The email address"""

    email_address_type: Nullable[str]
    r"""The email address type. Authorized values are either PERSONAL or WORK."""

    owner_type: OptionalNullable[OwnerType] = UNSET
    r"""The owner type of an email"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["owner_type"]
        nullable_fields = ["email_address", "email_address_type", "owner_type"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
