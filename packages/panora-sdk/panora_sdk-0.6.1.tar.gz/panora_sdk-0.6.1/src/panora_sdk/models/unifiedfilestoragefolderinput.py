"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from panora_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import Any, Dict, TypedDict
from typing_extensions import NotRequired


class UnifiedFilestorageFolderInputTypedDict(TypedDict):
    name: Nullable[str]
    r"""The name of the folder"""
    size: Nullable[str]
    r"""The size of the folder"""
    folder_url: Nullable[str]
    r"""The url of the folder"""
    description: str
    r"""The description of the folder"""
    drive_id: Nullable[str]
    r"""The UUID of the drive tied to the folder"""
    parent_folder_id: Nullable[str]
    r"""The UUID of the parent folder"""
    shared_link: Nullable[str]
    r"""The UUID of the shared link tied to the folder"""
    permission: Nullable[str]
    r"""The UUID of the permission tied to the folder"""
    field_mappings: NotRequired[Nullable[Dict[str, Any]]]
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""


class UnifiedFilestorageFolderInput(BaseModel):
    name: Nullable[str]
    r"""The name of the folder"""

    size: Nullable[str]
    r"""The size of the folder"""

    folder_url: Nullable[str]
    r"""The url of the folder"""

    description: str
    r"""The description of the folder"""

    drive_id: Nullable[str]
    r"""The UUID of the drive tied to the folder"""

    parent_folder_id: Nullable[str]
    r"""The UUID of the parent folder"""

    shared_link: Nullable[str]
    r"""The UUID of the shared link tied to the folder"""

    permission: Nullable[str]
    r"""The UUID of the permission tied to the folder"""

    field_mappings: OptionalNullable[Dict[str, Any]] = UNSET
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["field_mappings"]
        nullable_fields = [
            "name",
            "size",
            "folder_url",
            "drive_id",
            "parent_folder_id",
            "shared_link",
            "permission",
            "field_mappings",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
