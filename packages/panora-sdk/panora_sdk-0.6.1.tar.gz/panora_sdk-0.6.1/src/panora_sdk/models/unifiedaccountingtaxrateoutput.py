"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from panora_sdk.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
from pydantic import model_serializer
from typing import TypedDict
from typing_extensions import NotRequired


class UnifiedAccountingTaxrateOutputFieldMappingsTypedDict(TypedDict):
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""


class UnifiedAccountingTaxrateOutputFieldMappings(BaseModel):
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""


class UnifiedAccountingTaxrateOutputRemoteDataTypedDict(TypedDict):
    r"""The remote data of the tax rate in the context of the 3rd Party"""


class UnifiedAccountingTaxrateOutputRemoteData(BaseModel):
    r"""The remote data of the tax rate in the context of the 3rd Party"""


class UnifiedAccountingTaxrateOutputTypedDict(TypedDict):
    description: NotRequired[Nullable[str]]
    r"""The description of the tax rate"""
    total_tax_ratge: NotRequired[Nullable[float]]
    r"""The total tax rate in basis points (e.g., 2000 for 20%)"""
    effective_tax_rate: NotRequired[Nullable[float]]
    r"""The effective tax rate in basis points (e.g., 1900 for 19%)"""
    company_id: NotRequired[Nullable[str]]
    r"""The UUID of the associated company"""
    field_mappings: NotRequired[
        Nullable[UnifiedAccountingTaxrateOutputFieldMappingsTypedDict]
    ]
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""
    id: NotRequired[Nullable[str]]
    r"""The UUID of the tax rate record"""
    remote_id: NotRequired[Nullable[str]]
    r"""The remote ID of the tax rate in the context of the 3rd Party"""
    remote_data: NotRequired[
        Nullable[UnifiedAccountingTaxrateOutputRemoteDataTypedDict]
    ]
    r"""The remote data of the tax rate in the context of the 3rd Party"""
    created_at: NotRequired[Nullable[datetime]]
    r"""The created date of the tax rate record"""
    modified_at: NotRequired[Nullable[datetime]]
    r"""The last modified date of the tax rate record"""


class UnifiedAccountingTaxrateOutput(BaseModel):
    description: OptionalNullable[str] = UNSET
    r"""The description of the tax rate"""

    total_tax_ratge: OptionalNullable[float] = UNSET
    r"""The total tax rate in basis points (e.g., 2000 for 20%)"""

    effective_tax_rate: OptionalNullable[float] = UNSET
    r"""The effective tax rate in basis points (e.g., 1900 for 19%)"""

    company_id: OptionalNullable[str] = UNSET
    r"""The UUID of the associated company"""

    field_mappings: OptionalNullable[UnifiedAccountingTaxrateOutputFieldMappings] = (
        UNSET
    )
    r"""The custom field mappings of the object between the remote 3rd party & Panora"""

    id: OptionalNullable[str] = UNSET
    r"""The UUID of the tax rate record"""

    remote_id: OptionalNullable[str] = UNSET
    r"""The remote ID of the tax rate in the context of the 3rd Party"""

    remote_data: OptionalNullable[UnifiedAccountingTaxrateOutputRemoteData] = UNSET
    r"""The remote data of the tax rate in the context of the 3rd Party"""

    created_at: OptionalNullable[datetime] = UNSET
    r"""The created date of the tax rate record"""

    modified_at: OptionalNullable[datetime] = UNSET
    r"""The last modified date of the tax rate record"""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "description",
            "total_tax_ratge",
            "effective_tax_rate",
            "company_id",
            "field_mappings",
            "id",
            "remote_id",
            "remote_data",
            "created_at",
            "modified_at",
        ]
        nullable_fields = [
            "description",
            "total_tax_ratge",
            "effective_tax_rate",
            "company_id",
            "field_mappings",
            "id",
            "remote_id",
            "remote_data",
            "created_at",
            "modified_at",
        ]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in self.model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
