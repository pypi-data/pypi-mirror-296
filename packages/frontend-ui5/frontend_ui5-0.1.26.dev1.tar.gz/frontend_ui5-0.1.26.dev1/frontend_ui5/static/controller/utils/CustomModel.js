"use strict";sap.ui.define(["sap/base/Log","sap/base/assert","sap/ui/model/json/JSONModel","./BackendConnector","./Formatters","./Misc","./MockConnector"],function(t,e,n,i,s,o,a){"use strict";function r(t){return t&&t.__esModule&&typeof t.default!=="undefined"?t.default:t}const c=r(i);const h=s["dateTimeReviver"];const l=o["equals"];const d=r(a);const u=n.extend("demo.spa.controller.utils.CustomModel",{constructor:function e(i){n.prototype.constructor.call(this,i,true);this.initialData={};this.logger=t.getLogger(u.prototype.getMetadata().getName());this.id=u.modelCounter;u.modelCounter++;this.setUpConnector();this.initialData={...i}},reset:function t(){this.setData({...this.initialData});this.updateBindings(true)},setUpConnector:function t(){const e=new URLSearchParams(window.location.search);const n=e.get("useMockConnector")=="true";if(n){this.connector=new d}else{this.connector=new c}},attachModelChangedHandler:function t(e){this.attachEvent(`customModel${this.id}changed`,e)},attachModelChangedHandlerOnce:function t(e){this.attachEventOnce(`customModel${this.id}changed`,e)},create:function t(e){let n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:()=>null;this.checkEntity(e);this.connector.create(e).then(t=>{if(t instanceof Response&&t.ok){t.text().then(t=>{const i=JSON.parse(t,h);this._create(i);n();this.fireModelChangedEvent(e._type)}).catch(t=>{this._failureMessageHandler.bind(this)(t);n()})}else{this._failureMessageHandler.bind(this)(t);n()}}).catch(t=>{this._failureMessageHandler.bind(this)(t);n()})},delete:function t(e){let n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:()=>null;this.checkEntity(e);this.connector.delete(e).then(t=>{if(t instanceof Response&&t.ok){this._delete(e);this.fireModelChangedEvent(e._type)}else{this._failureMessageHandler.bind(this)(t)}n()}).catch(t=>{this._failureMessageHandler.bind(this)(t);n()})},fetch:function t(e){let n=arguments.length>1&&arguments[1]!==undefined?arguments[1]:()=>null;for(const t of e){this.connector.getAll(t).then(t=>{if(t instanceof Response){return t.text()}else{throw t}}).then(e=>{const n=JSON.parse(e,h);this.setProperty(`/${t}_list`,n.results);this.logger.debug(`Fetched ${t}_list data: ${n.results.length} entries`);this.updateBindings(true);this.fireModelChangedEvent(t)}).catch(t=>{this._failureMessageHandler.bind(this)(t);n()})}},fireModelChangedEvent:function t(e){this.fireEvent(`customModel${this.id}changed`,{entityName:e})},get:function t(e,n){const i=this._get({id:n,_type:e});return i?Object.assign({},i):null},setFailureMessageHandler:function t(e){this._failureMessageHandler=e},update:function t(n){let i=arguments.length>1&&arguments[1]!==undefined?arguments[1]:()=>null;this.checkEntity(n);const s=this.get(n._type,n.id);if(l(n,s)){this.logger.debug(`${JSON.stringify(n)} equals ${JSON.stringify(this._get(n))}`);i();return}this.connector.update(n).then(t=>{if(t instanceof Response&&t.ok){t.text().then(t=>{const s=JSON.parse(t,h);e(l(s,n),"The updated entity doesn't match the response: "+t+" \n\n"+JSON.stringify(n));this._update(s);this.fireModelChangedEvent(n._type);i()}).catch(t=>{this._failureMessageHandler.bind(this)(t);i()})}else{this._failureMessageHandler.bind(this)(t);i()}}).catch(t=>{this._failureMessageHandler.bind(this)(t);i()})},_create:function t(e){const n=`${e._type}_list`;const i=this.getProperty("/"+n);this.setProperty("/"+n,[...i,e])},_delete:function t(e){const n=`${e._type}_list`;const i=this.getProperty("/"+n).filter(t=>t.id!==e.id);this.setProperty("/"+n,i)},_failureMessageHandler:function t(e){this.logger.error(String(e))},_get:function t(e){const n=`${e._type}_list`;const i=this.getProperty("/"+n).find(t=>t.id===e.id);return i||null},_update:function t(e){Object.assign(this._get(e),e);this.updateBindings(true)},checkEntity:function t(n){const i=`${n._type}_list`;e(Boolean(n._type),`Entity type not set: ${JSON.stringify(n)}`);e(Boolean(this.getProperty("/"+i)),`Collection for ${n._type} not found in model.`+" ### "+JSON.stringify(this.getData()))}});u.modelCounter=0;return u});
//# sourceMappingURL=CustomModel.js.map