"use strict";sap.ui.define(["canvas-confetti","sap/base/assert","sap/m/library","sap/m/MessageToast","sap/ui/Device","./BaseController","./utils/Comparators","./utils/Cookies","./utils/Formatters","./utils/Time"],function(t,e,n,i,s,o,a,r,l,d){"use strict";function p(t){return t&&t.__esModule&&typeof t.default!=="undefined"?t.default:t}const c=p(t);const h=n["getLocale"];const g=n["getLocaleData"];const m=p(o);const u=a["comparePersons"];const f=r["getCookie"];const y=r["getCSRFCookie"];const D=r["setCookie"];const S=l["adjustDate"];const T=d["dateFitsInSlots"];const P=d["dateToNextMonday"];const I=d["dateToPreviousMonday"];const C=d["dateToPreviousSunday"];const F=d["findBetterStartDate"];const A=d["hasConflictingAppointments"];const M=m.extend("demo.spa.controller.Calendar",{constructor:function t(){m.prototype.constructor.apply(this,arguments);this.comparePersons=u;this.appointmentTypeGreen="Type08";this.appointmentTypeOrange="Type01";this.appointmentTypeRed="Type02";this.lastTappedEndDate=new Date((new Date).toISOString().split("T")[0]+"T11:00:00Z");this.lastTappedStartDate=new Date((new Date).toISOString().split("T")[0]+"T10:00:00Z");this.magicButtonTimeout=7500;this.mousePosition={x:0,y:0};this.timeoutCount=0},_:function t(){this.onInit()},formatAppointmentText:async function t(e,n,i){const s=this.formatDatePair(e,n);const o=await this.getBundleText("calendar.participantsAbbr");return s+`\n(${i.length} ${o})`},formatAppointmentType:function t(e,n,i){let s=this.appointmentTypeGreen;if(!T(e,n)){s=this.appointmentTypeOrange}if(A(e,i)){s=this.appointmentTypeRed}return s},formatDatePair:function t(e,n){const i=t=>t.toLocaleTimeString("de").slice(0,5);if(n.getTime()-e.getTime()<=36e5){return`${i(e)} - ${i(n)}`}return`${i(e)} -\n${i(n)}`},getPersonSelected:function t(e){if(this.getFrontendModel().getProperty("/appointmentForm/participants").includes(e)){return true}return false},getSlotType:function t(e){return e?"Type08":"Type09"},idsToPersonNames:function t(e){if(!Array.isArray(e)){e=[e]}const n=this.getUserDataModel().getProperty("/person_list");const i=n.filter(t=>e.includes(t.id));i.sort(u);let s=i.map(t=>t.first_name+" "+t.last_name).join(", ");s=s.replaceAll(" ,",",").replaceAll("  "," ").trim();return s},onAppointmentImprovePress:function t(){if(this.getFrontendModel().getProperty("/improveAppointmentPressed")){i.show("Tippe für einen Verbesserungsvorschlag auf einen Termin");this.setTimerForImproveAppointment()}},onCalendarItemChange:function t(e){const n=e.getParameter("appointment").getKey();const s=this.type==="appointments"?"appointment":"slot";const o=this.getUserDataModel().get(s,n);o.start_date=e.getParameter("startDate");o.end_date=e.getParameter("endDate");if(this.type==="availability"&&!this.validateSlot(o)){void this.getBundleText("calendar.slotOverlap").then(t=>i.show(t));return}this.getUserDataModel().update(o)},onCalendarItemCreate:function t(e){if(this.type==="availability"){this.handleCreateSlot(e)}else{this.handleCreateAppointment(e)}},onCalendarItemCreateButtonPress:function t(){if(this.type==="availability"){this.handleCreateBtnSlotPress()}else{this.handleCreateBtnAppointmentPress()}},onCalendarItemSelect:function t(e){if(this.type==="availability"){this.handleSelectSlot(e)}else{this.handleSelectAppointment(e)}},onCancelDialog:function t(){this.calendarItemDialog.close()},onCellPress:function t(e){const n=S(e.getParameter("startDate"));const i=S(e.getParameter("endDate"));this.lastTappedStartDate=n;this.lastTappedEndDate=i},onChoosePersonDialogOk:function t(){this.personDialog.destroy();this.personDialog=null},onDeleteDialog:function t(){this.calendarItemDialog.setBusy(true);const n=this.type==="appointments"?"/appointmentForm/id":"/availabilityForm/id";const i=this.type==="appointments"?"appointment":"slot";const s={_type:i,id:this.getFrontendModel().getProperty(n)};e(Boolean(s.id),"No id to delete found");this.getUserDataModel().delete(s,()=>{this.calendarItemDialog.setBusy(false);this.calendarItemDialog.close();this.getFrontendModel().setProperty(n,"")})},onFullDayToggleBtnPress:function t(){D("CALENDAR_SHOW_24_HOURS",String(this.getFrontendModel().getProperty("/show24hCalendar")))},onInit:function t(){m.prototype.onInit.call(this);this.type=this.getView().getId().includes("availability")?"availability":"appointments";this.calendar=this.byId("idCalendar");this.attachRouteMatchedEvent();this.getUserDataModel().attachModelChangedHandler(()=>this.applyFilter());this.adjustViewForSmallScreens();this.initCalendarSettings();this.setCalenderViewChangeHandlers();this.initMouseObserver()},onPersonSelectionChange:function t(e){const n=e.getSource().getSelectedItems();const i=n.map(t=>t.getCustomData()[0].getValue());this.getFrontendModel().setProperty("/appointmentForm/participants",i)},onPreferredPress:function t(e){const n=e.getSource().getKey();if(n=="yes"){this.getFrontendModel().setProperty("/availabilityForm/is_preferred",true)}else{this.getFrontendModel().setProperty("/availabilityForm/is_preferred",false)}},onRefreshPress:function t(){this.getUserDataModel().fetch(["appointment","person","slot"])},onSaveBtnPress:function t(){this.calendarItemDialog.setBusy(true);const e=()=>{this.calendarItemDialog.setBusy(false);this.calendarItemDialog.close()};let n;if(this.type==="appointments"){n=this.formDataToAppointment();if(!n.participants.length){void this.getBundleText("calendar.noParticipants").then(t=>i.show(t));e();return}const t=this.getFrontendModel().getProperty("/appointmentTitleSuggestions");if(!t.includes(n.title)){t.push(n.title)}}else{n=this.formDataToSlot();if(!this.validateSlot(n)){void this.getBundleText("calendar.slotOverlap").then(t=>i.show(t));e();return}}if(n.id){this.getUserDataModel().update(n,()=>e())}else{this.getUserDataModel().create(n,()=>e())}},onSwitchToAppointmentsPress:function t(){const e=this.getFrontendModel().getProperty("/lastChosenPerson");void this.getRouter().getHashChanger().setHash("appointments/"+e)},onSwitchToAvailabilityPress:function t(){const e=this.getFrontendModel().getProperty("/lastChosenPerson");void this.getRouter().getHashChanger().setHash("availability/"+e)},openCalendarItemDialog:function t(){if(!y()){void this.noCSRFTokenMessageBox();return}else if(this.calendarItemDialog){this.calendarItemDialog.open()}else{const t=this.type==="appointments"?"demo.spa.view.AppointmentDialog":"demo.spa.view.AvailabilityDialog";this.loadFragment({name:t}).then(t=>{this.calendarItemDialog=t;this.calendarItemDialog.open();this.calendarItemDialog.attachAfterOpen(()=>{this.setAppointmentDialogFocus()})}).catch(t=>{this.logger.error(String(t))})}},openPersonDialog:function t(){if(this.personDialog){this.personDialog.open()}else{this.loadFragment({name:"demo.spa.view.ChoosePersonDialog"}).then(t=>{this.personDialog=t;this.personDialog.open()}).catch(t=>{this.logger.error(String(t))})}},validateCalendarItemForm:function t(e,n,s,o){const a=new Date(e+"T"+n+"Z").getTime();const r=new Date(e+"T"+s+"Z").getTime();if(o&&o.length===0){i.show("Wähle mindestens einen Teilnehmer aus.");return false}if(isNaN(a)||isNaN(r)){return false}return true},adjustCalendarStartDay:function t(){const e=this.getCalendarViewOffset(this.getCalendarViewName());const n=this.calendar.getStartDate();const i=this.calendar.getFirstDayOfWeek();if(e==5){if(i==0&&n.getDay()==0){this.calendar.setStartDate(P(n))}else{this.calendar.setStartDate(I(n))}}else if(e==7){if(i==0){this.calendar.setStartDate(C(n))}else{this.calendar.setStartDate(I(n))}}D("CALENDAR_START_DATE",this.calendar.getStartDate().toISOString())},adjustViewForSmallScreens:function t(){if(s.resize.width<=900){const t=this.byId("idDayView");this.calendar.setSelectedView(t)}else if(s.resize.width<=1200){const t=this.byId("idWorkWeekView");this.calendar.setSelectedView(t)}},applyFilter:function t(){let e=arguments.length>0&&arguments[0]!==undefined?arguments[0]:false;if(this.type==="appointments"){this.filterAppointments(e)}else{this.filterSlots()}},attachRouteMatchedEvent:function t(){this.getRouter().attachRouteMatched(t=>{const e=t.getParameter("name");if(["APPOINTMENTS INDIVIDUAL","AVAILABILITY INDIVIDUAL"].includes(e)){this.initCalendarSettings();const n=t.getParameter("arguments").personId;this.getFrontendModel().setProperty("/lastChosenPerson",n);if(!this.idsToPersonNames(n)){setTimeout(()=>{if(!this.idsToPersonNames(n)){const t=this.type==="appointments"?"APPOINTMENTS":"AVAILABILITY";this.getRouter().navTo(t);this.getRouter().fireEvent("navigateBackToValidRoute")}else{this.getFrontendModel().updateBindings(true)}},750);this.applyFilter()}else{this.applyFilter()}if(e.startsWith("APPOINTMENTS")){this.getFrontendModel().setProperty("/expandAppointmentNavListItem",true);this.getFrontendModel().setProperty("/expandAvailabilityNavListItem",false);this.getFrontendModel().setProperty("/selectedCalendarType","appointments")}else{this.getFrontendModel().setProperty("/expandAppointmentNavListItem",false);this.getFrontendModel().setProperty("/expandAvailabilityNavListItem",true);this.getFrontendModel().setProperty("/selectedCalendarType","availability")}}else if(["APPOINTMENTS","AVAILABILITY"].includes(e)){this.initCalendarSettings();this.getFrontendModel().setProperty("/lastChosenPerson",null);this.applyFilter()}})},deactivateImproveAppointment:function t(){this.timeoutCount--;if(this.timeoutCount<=0){this.getFrontendModel().setProperty("/improveAppointmentPressed",false);this.timeoutCount=0}},filterAppointments:function t(e){let n=[...this.getUserDataModel().getProperty("/appointment_list")];if(e){this.getFrontendModel().setProperty("/filteredAppointments",n);return}else{const t=this.getFrontendModel().getProperty("/lastChosenPerson");const e=this.idsToPersonNames(t);if(e){n=n.filter(e=>e.participants.includes(t));this.getFrontendModel().setProperty("/filteredAppointments",n)}else{this.getFrontendModel().setProperty("/filteredAppointments",n)}}},filterSlots:function t(){let e=[...this.getUserDataModel().getProperty("/slot_list")];const n=this.getFrontendModel().getProperty("/lastChosenPerson");const i=this.idsToPersonNames(n);if(i){e=e.filter(t=>t.person==n);this.getFrontendModel().setProperty("/filteredSlots",e)}},findBetterStartDate:function t(e){const n=this.getUserDataModel().getProperty("/appointment_list");const i=this.getUserDataModel().getProperty("/slot_list");const s=this.calendar.getStartDate();const o=this.getCalendarViewOffset(this.getCalendarViewName());const a=new Date(s.getTime()+o*24*3600*1e3);return F(e,n,i,s,a)},formDataToAppointment:function t(){const e=this.getFrontendModel().getProperty("/appointmentForm");const n=this.byId("idDateInput");const i=S(n.getDateValue());const s=i.toISOString().split("T")[0];const o=S(new Date(s+"T"+e.startTime+"Z"),"add");const a=S(new Date(s+"T"+e.endTime+"Z"),"add");if(o.getTime()>=a.getTime()){a.setDate(a.getDate()+1)}return{_type:"appointment",id:e.id,title:e.title,participants:e.participants,start_date:o,end_date:a}},formDataToSlot:function t(){const e=this.getFrontendModel().getProperty("/availabilityForm");const n=this.byId("idDateInput");const i=S(n.getDateValue());const s=i.toISOString().split("T")[0];const o=S(new Date(s+"T"+e.startTime+"Z"),"add");const a=S(new Date(s+"T"+e.endTime+"Z"),"add");if(o.getTime()>=a.getTime()){a.setDate(a.getDate()+1)}return{_type:"slot",id:e.id,person:e.person,start_date:o,end_date:a,is_preferred:e.is_preferred}},getCalendarViewName:function t(){return this.byId(this.calendar.getSelectedView()).getKey()},getCalendarViewOffset:function t(e){switch(e){case"WeekView":return 7;case"WorkWeekView":return 5;case"DayView":return 1;default:new Error("Unknown calendar view: "+e)}},handleCreateAppointment:function t(e){const n=S(e.getParameter("startDate"));const i=S(e.getParameter("endDate"));const s=this.getFrontendModel().getProperty("/appointmentForm");const o=this.getFrontendModel().getProperty("/lastChosenPerson");s.participants=o?[o]:[];s.id=null;s.title="";s.date=n.toISOString().substring(0,10);s.startTime=n.toISOString().substring(11,16);s.endTime=i.toISOString().substring(11,16);this.getFrontendModel().setProperty("/appointmentForm",s);this.openCalendarItemDialog()},handleCreateBtnAppointmentPress:function t(){const e=this.getFrontendModel().getProperty("/appointmentForm");const n=this.getFrontendModel().getProperty("/lastChosenPerson");e.id=null;e.title="";e.date=this.lastTappedStartDate.toISOString().substring(0,10);e.startTime=this.lastTappedStartDate.toISOString().substring(11,16);e.endTime=this.lastTappedEndDate.toISOString().substring(11,16);e.participants=n?[n]:[];this.getFrontendModel().setProperty("/appointmentForm",e);this.openCalendarItemDialog()},handleCreateBtnSlotPress:function t(){const e=this.getFrontendModel().getProperty("/availabilityForm");const n=this.getFrontendModel().getProperty("/lastChosenPerson");e.id=null;e.date=this.lastTappedStartDate.toISOString().substring(0,10);e.startTime=this.lastTappedStartDate.toISOString().substring(11,16);e.endTime=this.lastTappedEndDate.toISOString().substring(11,16);e.person=n;this.getFrontendModel().setProperty("/availabilityForm",e);this.openCalendarItemDialog()},handleCreateSlot:function t(e){const n=e.getParameter("startDate");const i=e.getParameter("endDate");const s=this.getFrontendModel().getProperty("/lastChosenPerson");const o={_type:"slot",id:null,person:s,start_date:n,end_date:i,is_preferred:true};this.getUserDataModel().create(o)},handleSelectAppointment:function t(n){const i=n.getParameter("appointment");if(i){if(this.getFrontendModel().getProperty("/improveAppointmentPressed")){this.improveAppointment(i);this.setTimerForImproveAppointment();return}const t=S(i.getStartDate());const n=S(i.getEndDate());const s=this.getFrontendModel().getProperty("/appointmentForm");const o=i.getKey();const a=this.getUserDataModel().get("appointment",o);e(Boolean(a),"Appointment not found");s.participants=a.participants;s.id=o;s.title=i.getTitle();s.date=t.toISOString().substring(0,10);s.startTime=t.toISOString().substring(11,16);s.endTime=n.toISOString().substring(11,16);this.getFrontendModel().setProperty("/appointmentForm",s);this.openCalendarItemDialog()}},handleSelectSlot:function t(n){const i=n.getParameter("appointment");if(i){const t=S(i.getStartDate());const n=S(i.getEndDate());const s=this.getFrontendModel().getProperty("/availabilityForm");const o=i.getKey();const a=this.getUserDataModel().get("slot",o);e(Boolean(a),"Slot not found");s.person=a.person;s.id=o;s.date=t.toISOString().substring(0,10);s.startTime=t.toISOString().substring(11,16);s.endTime=n.toISOString().substring(11,16);s.is_preferred=a.is_preferred;this.getFrontendModel().setProperty("/availabilityForm",s);this.openCalendarItemDialog()}},improveAppointment:function t(e){const n=this.getUserDataModel().get("appointment",e.getKey());const s=this.findBetterStartDate(n);if(!s){i.show("Es wurde kein besserer Termin gefunden.");return}else{this.moveAppointmentToBetterStartDate(n,s)}},initCalendarSettings:function t(){const e=this.byId("idWeekView");e.setFirstDayOfWeek(g().getFirstDayOfWeek());this.calendar.setFirstDayOfWeek(g().getFirstDayOfWeek());const n=f("CALENDAR_VIEW");if(n){this.calendar.getViews().forEach(t=>{if(t.getKey()===n){this.calendar.setSelectedView(t)}})}const i=f("CALENDAR_SHOW_24_HOURS");if(i){this.getFrontendModel().setProperty("/show24hCalendar",i==="true")}const s=f("CALENDAR_START_DATE");if(s){this.calendar.setStartDate(new Date(s))}this.getFrontendModel().setProperty("/selectedCalendarType",this.type)},initMouseObserver:function t(){document.addEventListener("mousemove",t=>{this.mousePosition.x=t.clientX/window.innerWidth;this.mousePosition.y=t.clientY/window.innerHeight})},moveAppointmentToBetterStartDate:function t(e,n){const s={...this.mousePosition};const o=new Date(n.getTime()+(e.end_date.getTime()-e.start_date.getTime()));e.start_date=n;e.end_date=o;const a=h().getLanguage();const r=()=>{const t=e.start_date.toLocaleString(a,{weekday:"long",hour:"2-digit",minute:"2-digit",hour12:false});void c({particleCount:20,spread:360,ticks:15,origin:s});i.show(`Termin nach ${t} verschoben`)};this.getUserDataModel().update(e,()=>r())},setAppointmentDialogFocus:function t(){const e=this.byId("idSubjectInput");if(e){e.focus()}},setCalenderViewChangeHandlers:function t(){this.calendar.attachViewChange(()=>{this.adjustCalendarStartDay();if(this.calendar.getSelectedView()){D("CALENDAR_VIEW",this.getCalendarViewName())}});this.calendar.attachStartDateChange(()=>{D("CALENDAR_START_DATE",this.calendar.getStartDate().toISOString())})},setTimerForImproveAppointment:function t(){this.timeoutCount++;setTimeout(()=>{this.deactivateImproveAppointment()},this.magicButtonTimeout)},validateSlot:function t(e){let n=this.getUserDataModel().getProperty("/slot_list");n=n.filter(t=>t.id!==e.id&&t.person===e.person);for(const t of n){if(e.start_date>=t.start_date&&e.start_date<t.end_date||e.end_date>t.start_date&&e.end_date<=t.end_date||e.start_date<=t.start_date&&e.end_date>=t.end_date){return false}}return true}});return M});
//# sourceMappingURL=Calendar.controller.js.map