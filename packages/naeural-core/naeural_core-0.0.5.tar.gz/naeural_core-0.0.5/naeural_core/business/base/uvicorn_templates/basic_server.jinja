# AUTOGENERATED FILE
from fastapi import FastAPI, Request, HTTPException
from fastapi.responses import FileResponse
from fastapi.staticfiles import StaticFiles
from starlette.exceptions import HTTPException as StarletteHTTPException
from pathlib import Path
import json
import re
from os import path as file_path

from naeural_core.utils.uvicorn_fast_api_ipc_manager import UvicornPluginComms
eng = UvicornPluginComms(port={{ manager_port }}, auth={{ manager_auth }})
app = FastAPI(
  title={{ api_title }},
  summary={{ api_summary }},
  description={{ api_description }},
  version={{ api_version }},
)

STATIC_DIR = "{{ static_directory }}"

{% for item in node_comm_params %}
{% if item['method'] is not none %}@app.{{ item['method'] }}("/{{ item['name'] }}"){% endif %}
async def {{ item['name'] }}({% if item['method']=='post' %}request: Request, {% endif %}{% for arg in item['args'] %}{{ arg }}{% if not loop.last %}, {% endif %}{% endfor %}):
  {% if item['method']=='post' %}
  try:
    body = await request.json()
  except json.JSONDecodeError:
    body = None
  result = await eng.call_plugin("{{ item['name'] }}"{% for param in item['params'] %}, {{ param }}{% endfor %}, body)
  {% else %}
  result = await eng.call_plugin("{{ item['name'] }}"{% for param in item['params'] %}, {{ param }}{% endfor %})
  {% endif %}
  return result
{% endfor %}

{% for item in html_files %}
@app.{{ item['method'] }}('{{ item['route'] }}')
async def html_route{{ loop.index }}():
  return FileResponse(file_path.join(STATIC_DIR, '{{ item['name'] }}'))

{% endfor %}


@app.exception_handler(StarletteHTTPException)
async def custom_404_handler(request: Request, exc: StarletteHTTPException):
    if exc.status_code == 404:
        # Regex pattern to match files with specific extensions
        pattern = re.compile(r".*\.(js|png|jpg|css|jpeg|gif|svg|ico)$")

        if pattern.match(request.url.path):
            # Construct the file path
            file_path = Path(STATIC_DIR) / request.url.path.strip("/")
            if file_path.exists() and file_path.is_file():
                return FileResponse(file_path)

    # If not matched or file doesn't exist, return the original 404 response
    raise HTTPException(status_code=404, detail="Not Found")

app.mount(f"/{STATIC_DIR}", StaticFiles(directory=STATIC_DIR), name="static")
