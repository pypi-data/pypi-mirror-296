{"version":3,"file":"Trinket.C8FSbdkC.js","sources":["../../../../../../node_modules/big.js/big.mjs","../../../../../../src/lib/origin/math/APT_to_Octas.RPC.js","../../../../../../src/lib/trinkets/Amount_Field/Screenplays/Octas_string_is_permitted.js","../../../../../../src/lib/trinkets/Amount_Field/Trinket.svelte"],"sourcesContent":["/*\r\n *  big.js v6.2.1\r\n *  A small, fast, easy-to-use library for arbitrary-precision decimal arithmetic.\r\n *  Copyright (c) 2022 Michael Mclaughlin\r\n *  https://github.com/MikeMcl/big.js/LICENCE.md\r\n */\r\n\r\n\r\n/************************************** EDITABLE DEFAULTS *****************************************/\r\n\r\n\r\n  // The default values below must be integers within the stated ranges.\r\n\r\n  /*\r\n   * The maximum number of decimal places (DP) of the results of operations involving division:\r\n   * div and sqrt, and pow with negative exponents.\r\n   */\r\nvar DP = 20,          // 0 to MAX_DP\r\n\r\n  /*\r\n   * The rounding mode (RM) used when rounding to the above decimal places.\r\n   *\r\n   *  0  Towards zero (i.e. truncate, no rounding).       (ROUND_DOWN)\r\n   *  1  To nearest neighbour. If equidistant, round up.  (ROUND_HALF_UP)\r\n   *  2  To nearest neighbour. If equidistant, to even.   (ROUND_HALF_EVEN)\r\n   *  3  Away from zero.                                  (ROUND_UP)\r\n   */\r\n  RM = 1,             // 0, 1, 2 or 3\r\n\r\n  // The maximum value of DP and Big.DP.\r\n  MAX_DP = 1E6,       // 0 to 1000000\r\n\r\n  // The maximum magnitude of the exponent argument to the pow method.\r\n  MAX_POWER = 1E6,    // 1 to 1000000\r\n\r\n  /*\r\n   * The negative exponent (NE) at and beneath which toString returns exponential notation.\r\n   * (JavaScript numbers: -7)\r\n   * -1000000 is the minimum recommended exponent value of a Big.\r\n   */\r\n  NE = -7,            // 0 to -1000000\r\n\r\n  /*\r\n   * The positive exponent (PE) at and above which toString returns exponential notation.\r\n   * (JavaScript numbers: 21)\r\n   * 1000000 is the maximum recommended exponent value of a Big, but this limit is not enforced.\r\n   */\r\n  PE = 21,            // 0 to 1000000\r\n\r\n  /*\r\n   * When true, an error will be thrown if a primitive number is passed to the Big constructor,\r\n   * or if valueOf is called, or if toNumber is called on a Big which cannot be converted to a\r\n   * primitive number without a loss of precision.\r\n   */\r\n  STRICT = false,     // true or false\r\n\r\n\r\n/**************************************************************************************************/\r\n\r\n\r\n  // Error messages.\r\n  NAME = '[big.js] ',\r\n  INVALID = NAME + 'Invalid ',\r\n  INVALID_DP = INVALID + 'decimal places',\r\n  INVALID_RM = INVALID + 'rounding mode',\r\n  DIV_BY_ZERO = NAME + 'Division by zero',\r\n\r\n  // The shared prototype object.\r\n  P = {},\r\n  UNDEFINED = void 0,\r\n  NUMERIC = /^-?(\\d+(\\.\\d*)?|\\.\\d+)(e[+-]?\\d+)?$/i;\r\n\r\n\r\n/*\r\n * Create and return a Big constructor.\r\n */\r\nfunction _Big_() {\r\n\r\n  /*\r\n   * The Big constructor and exported function.\r\n   * Create and return a new instance of a Big number object.\r\n   *\r\n   * n {number|string|Big} A numeric value.\r\n   */\r\n  function Big(n) {\r\n    var x = this;\r\n\r\n    // Enable constructor usage without new.\r\n    if (!(x instanceof Big)) return n === UNDEFINED ? _Big_() : new Big(n);\r\n\r\n    // Duplicate.\r\n    if (n instanceof Big) {\r\n      x.s = n.s;\r\n      x.e = n.e;\r\n      x.c = n.c.slice();\r\n    } else {\r\n      if (typeof n !== 'string') {\r\n        if (Big.strict === true && typeof n !== 'bigint') {\r\n          throw TypeError(INVALID + 'value');\r\n        }\r\n\r\n        // Minus zero?\r\n        n = n === 0 && 1 / n < 0 ? '-0' : String(n);\r\n      }\r\n\r\n      parse(x, n);\r\n    }\r\n\r\n    // Retain a reference to this Big constructor.\r\n    // Shadow Big.prototype.constructor which points to Object.\r\n    x.constructor = Big;\r\n  }\r\n\r\n  Big.prototype = P;\r\n  Big.DP = DP;\r\n  Big.RM = RM;\r\n  Big.NE = NE;\r\n  Big.PE = PE;\r\n  Big.strict = STRICT;\r\n  Big.roundDown = 0;\r\n  Big.roundHalfUp = 1;\r\n  Big.roundHalfEven = 2;\r\n  Big.roundUp = 3;\r\n\r\n  return Big;\r\n}\r\n\r\n\r\n/*\r\n * Parse the number or string value passed to a Big constructor.\r\n *\r\n * x {Big} A Big number instance.\r\n * n {number|string} A numeric value.\r\n */\r\nfunction parse(x, n) {\r\n  var e, i, nl;\r\n\r\n  if (!NUMERIC.test(n)) {\r\n    throw Error(INVALID + 'number');\r\n  }\r\n\r\n  // Determine sign.\r\n  x.s = n.charAt(0) == '-' ? (n = n.slice(1), -1) : 1;\r\n\r\n  // Decimal point?\r\n  if ((e = n.indexOf('.')) > -1) n = n.replace('.', '');\r\n\r\n  // Exponential form?\r\n  if ((i = n.search(/e/i)) > 0) {\r\n\r\n    // Determine exponent.\r\n    if (e < 0) e = i;\r\n    e += +n.slice(i + 1);\r\n    n = n.substring(0, i);\r\n  } else if (e < 0) {\r\n\r\n    // Integer.\r\n    e = n.length;\r\n  }\r\n\r\n  nl = n.length;\r\n\r\n  // Determine leading zeros.\r\n  for (i = 0; i < nl && n.charAt(i) == '0';) ++i;\r\n\r\n  if (i == nl) {\r\n\r\n    // Zero.\r\n    x.c = [x.e = 0];\r\n  } else {\r\n\r\n    // Determine trailing zeros.\r\n    for (; nl > 0 && n.charAt(--nl) == '0';);\r\n    x.e = e - i - 1;\r\n    x.c = [];\r\n\r\n    // Convert string to array of digits without leading/trailing zeros.\r\n    for (e = 0; i <= nl;) x.c[e++] = +n.charAt(i++);\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Round Big x to a maximum of sd significant digits using rounding mode rm.\r\n *\r\n * x {Big} The Big to round.\r\n * sd {number} Significant digits: integer, 0 to MAX_DP inclusive.\r\n * rm {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n * [more] {boolean} Whether the result of division was truncated.\r\n */\r\nfunction round(x, sd, rm, more) {\r\n  var xc = x.c;\r\n\r\n  if (rm === UNDEFINED) rm = x.constructor.RM;\r\n  if (rm !== 0 && rm !== 1 && rm !== 2 && rm !== 3) {\r\n    throw Error(INVALID_RM);\r\n  }\r\n\r\n  if (sd < 1) {\r\n    more =\r\n      rm === 3 && (more || !!xc[0]) || sd === 0 && (\r\n      rm === 1 && xc[0] >= 5 ||\r\n      rm === 2 && (xc[0] > 5 || xc[0] === 5 && (more || xc[1] !== UNDEFINED))\r\n    );\r\n\r\n    xc.length = 1;\r\n\r\n    if (more) {\r\n\r\n      // 1, 0.1, 0.01, 0.001, 0.0001 etc.\r\n      x.e = x.e - sd + 1;\r\n      xc[0] = 1;\r\n    } else {\r\n\r\n      // Zero.\r\n      xc[0] = x.e = 0;\r\n    }\r\n  } else if (sd < xc.length) {\r\n\r\n    // xc[sd] is the digit after the digit that may be rounded up.\r\n    more =\r\n      rm === 1 && xc[sd] >= 5 ||\r\n      rm === 2 && (xc[sd] > 5 || xc[sd] === 5 &&\r\n        (more || xc[sd + 1] !== UNDEFINED || xc[sd - 1] & 1)) ||\r\n      rm === 3 && (more || !!xc[0]);\r\n\r\n    // Remove any digits after the required precision.\r\n    xc.length = sd;\r\n\r\n    // Round up?\r\n    if (more) {\r\n\r\n      // Rounding up may mean the previous digit has to be rounded up.\r\n      for (; ++xc[--sd] > 9;) {\r\n        xc[sd] = 0;\r\n        if (sd === 0) {\r\n          ++x.e;\r\n          xc.unshift(1);\r\n          break;\r\n        }\r\n      }\r\n    }\r\n\r\n    // Remove trailing zeros.\r\n    for (sd = xc.length; !xc[--sd];) xc.pop();\r\n  }\r\n\r\n  return x;\r\n}\r\n\r\n\r\n/*\r\n * Return a string representing the value of Big x in normal or exponential notation.\r\n * Handles P.toExponential, P.toFixed, P.toJSON, P.toPrecision, P.toString and P.valueOf.\r\n */\r\nfunction stringify(x, doExponential, isNonzero) {\r\n  var e = x.e,\r\n    s = x.c.join(''),\r\n    n = s.length;\r\n\r\n  // Exponential notation?\r\n  if (doExponential) {\r\n    s = s.charAt(0) + (n > 1 ? '.' + s.slice(1) : '') + (e < 0 ? 'e' : 'e+') + e;\r\n\r\n  // Normal notation.\r\n  } else if (e < 0) {\r\n    for (; ++e;) s = '0' + s;\r\n    s = '0.' + s;\r\n  } else if (e > 0) {\r\n    if (++e > n) {\r\n      for (e -= n; e--;) s += '0';\r\n    } else if (e < n) {\r\n      s = s.slice(0, e) + '.' + s.slice(e);\r\n    }\r\n  } else if (n > 1) {\r\n    s = s.charAt(0) + '.' + s.slice(1);\r\n  }\r\n\r\n  return x.s < 0 && isNonzero ? '-' + s : s;\r\n}\r\n\r\n\r\n// Prototype/instance methods\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the absolute value of this Big.\r\n */\r\nP.abs = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = 1;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return 1 if the value of this Big is greater than the value of Big y,\r\n *       -1 if the value of this Big is less than the value of Big y, or\r\n *        0 if they have the same value.\r\n */\r\nP.cmp = function (y) {\r\n  var isneg,\r\n    x = this,\r\n    xc = x.c,\r\n    yc = (y = new x.constructor(y)).c,\r\n    i = x.s,\r\n    j = y.s,\r\n    k = x.e,\r\n    l = y.e;\r\n\r\n  // Either zero?\r\n  if (!xc[0] || !yc[0]) return !xc[0] ? !yc[0] ? 0 : -j : i;\r\n\r\n  // Signs differ?\r\n  if (i != j) return i;\r\n\r\n  isneg = i < 0;\r\n\r\n  // Compare exponents.\r\n  if (k != l) return k > l ^ isneg ? 1 : -1;\r\n\r\n  j = (k = xc.length) < (l = yc.length) ? k : l;\r\n\r\n  // Compare digit by digit.\r\n  for (i = -1; ++i < j;) {\r\n    if (xc[i] != yc[i]) return xc[i] > yc[i] ^ isneg ? 1 : -1;\r\n  }\r\n\r\n  // Compare lengths.\r\n  return k == l ? 0 : k > l ^ isneg ? 1 : -1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big divided by the value of Big y, rounded,\r\n * if necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */\r\nP.div = function (y) {\r\n  var x = this,\r\n    Big = x.constructor,\r\n    a = x.c,                  // dividend\r\n    b = (y = new Big(y)).c,   // divisor\r\n    k = x.s == y.s ? 1 : -1,\r\n    dp = Big.DP;\r\n\r\n  if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n    throw Error(INVALID_DP);\r\n  }\r\n\r\n  // Divisor is zero?\r\n  if (!b[0]) {\r\n    throw Error(DIV_BY_ZERO);\r\n  }\r\n\r\n  // Dividend is 0? Return +-0.\r\n  if (!a[0]) {\r\n    y.s = k;\r\n    y.c = [y.e = 0];\r\n    return y;\r\n  }\r\n\r\n  var bl, bt, n, cmp, ri,\r\n    bz = b.slice(),\r\n    ai = bl = b.length,\r\n    al = a.length,\r\n    r = a.slice(0, bl),   // remainder\r\n    rl = r.length,\r\n    q = y,                // quotient\r\n    qc = q.c = [],\r\n    qi = 0,\r\n    p = dp + (q.e = x.e - y.e) + 1;    // precision of the result\r\n\r\n  q.s = k;\r\n  k = p < 0 ? 0 : p;\r\n\r\n  // Create version of divisor with leading zero.\r\n  bz.unshift(0);\r\n\r\n  // Add zeros to make remainder as long as divisor.\r\n  for (; rl++ < bl;) r.push(0);\r\n\r\n  do {\r\n\r\n    // n is how many times the divisor goes into current remainder.\r\n    for (n = 0; n < 10; n++) {\r\n\r\n      // Compare divisor and remainder.\r\n      if (bl != (rl = r.length)) {\r\n        cmp = bl > rl ? 1 : -1;\r\n      } else {\r\n        for (ri = -1, cmp = 0; ++ri < bl;) {\r\n          if (b[ri] != r[ri]) {\r\n            cmp = b[ri] > r[ri] ? 1 : -1;\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      // If divisor < remainder, subtract divisor from remainder.\r\n      if (cmp < 0) {\r\n\r\n        // Remainder can't be more than 1 digit longer than divisor.\r\n        // Equalise lengths using divisor with extra leading zero?\r\n        for (bt = rl == bl ? b : bz; rl;) {\r\n          if (r[--rl] < bt[rl]) {\r\n            ri = rl;\r\n            for (; ri && !r[--ri];) r[ri] = 9;\r\n            --r[ri];\r\n            r[rl] += 10;\r\n          }\r\n          r[rl] -= bt[rl];\r\n        }\r\n\r\n        for (; !r[0];) r.shift();\r\n      } else {\r\n        break;\r\n      }\r\n    }\r\n\r\n    // Add the digit n to the result array.\r\n    qc[qi++] = cmp ? n : ++n;\r\n\r\n    // Update the remainder.\r\n    if (r[0] && cmp) r[rl] = a[ai] || 0;\r\n    else r = [a[ai]];\r\n\r\n  } while ((ai++ < al || r[0] !== UNDEFINED) && k--);\r\n\r\n  // Leading zero? Do not remove if result is simply zero (qi == 1).\r\n  if (!qc[0] && qi != 1) {\r\n\r\n    // There can't be more than one zero.\r\n    qc.shift();\r\n    q.e--;\r\n    p--;\r\n  }\r\n\r\n  // Round?\r\n  if (qi > p) round(q, p, Big.RM, r[0] !== UNDEFINED);\r\n\r\n  return q;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is equal to the value of Big y, otherwise return false.\r\n */\r\nP.eq = function (y) {\r\n  return this.cmp(y) === 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is greater than the value of Big y, otherwise return\r\n * false.\r\n */\r\nP.gt = function (y) {\r\n  return this.cmp(y) > 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is greater than or equal to the value of Big y, otherwise\r\n * return false.\r\n */\r\nP.gte = function (y) {\r\n  return this.cmp(y) > -1;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is less than the value of Big y, otherwise return false.\r\n */\r\nP.lt = function (y) {\r\n  return this.cmp(y) < 0;\r\n};\r\n\r\n\r\n/*\r\n * Return true if the value of this Big is less than or equal to the value of Big y, otherwise\r\n * return false.\r\n */\r\nP.lte = function (y) {\r\n  return this.cmp(y) < 1;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big minus the value of Big y.\r\n */\r\nP.minus = P.sub = function (y) {\r\n  var i, j, t, xlty,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  // Signs differ?\r\n  if (a != b) {\r\n    y.s = -b;\r\n    return x.plus(y);\r\n  }\r\n\r\n  var xc = x.c.slice(),\r\n    xe = x.e,\r\n    yc = y.c,\r\n    ye = y.e;\r\n\r\n  // Either zero?\r\n  if (!xc[0] || !yc[0]) {\r\n    if (yc[0]) {\r\n      y.s = -b;\r\n    } else if (xc[0]) {\r\n      y = new Big(x);\r\n    } else {\r\n      y.s = 1;\r\n    }\r\n    return y;\r\n  }\r\n\r\n  // Determine which is the bigger number. Prepend zeros to equalise exponents.\r\n  if (a = xe - ye) {\r\n\r\n    if (xlty = a < 0) {\r\n      a = -a;\r\n      t = xc;\r\n    } else {\r\n      ye = xe;\r\n      t = yc;\r\n    }\r\n\r\n    t.reverse();\r\n    for (b = a; b--;) t.push(0);\r\n    t.reverse();\r\n  } else {\r\n\r\n    // Exponents equal. Check digit by digit.\r\n    j = ((xlty = xc.length < yc.length) ? xc : yc).length;\r\n\r\n    for (a = b = 0; b < j; b++) {\r\n      if (xc[b] != yc[b]) {\r\n        xlty = xc[b] < yc[b];\r\n        break;\r\n      }\r\n    }\r\n  }\r\n\r\n  // x < y? Point xc to the array of the bigger number.\r\n  if (xlty) {\r\n    t = xc;\r\n    xc = yc;\r\n    yc = t;\r\n    y.s = -y.s;\r\n  }\r\n\r\n  /*\r\n   * Append zeros to xc if shorter. No need to add zeros to yc if shorter as subtraction only\r\n   * needs to start at yc.length.\r\n   */\r\n  if ((b = (j = yc.length) - (i = xc.length)) > 0) for (; b--;) xc[i++] = 0;\r\n\r\n  // Subtract yc from xc.\r\n  for (b = i; j > a;) {\r\n    if (xc[--j] < yc[j]) {\r\n      for (i = j; i && !xc[--i];) xc[i] = 9;\r\n      --xc[i];\r\n      xc[j] += 10;\r\n    }\r\n\r\n    xc[j] -= yc[j];\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (; xc[--b] === 0;) xc.pop();\r\n\r\n  // Remove leading zeros and adjust exponent accordingly.\r\n  for (; xc[0] === 0;) {\r\n    xc.shift();\r\n    --ye;\r\n  }\r\n\r\n  if (!xc[0]) {\r\n\r\n    // n - n = +0\r\n    y.s = 1;\r\n\r\n    // Result must be zero.\r\n    xc = [ye = 0];\r\n  }\r\n\r\n  y.c = xc;\r\n  y.e = ye;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big modulo the value of Big y.\r\n */\r\nP.mod = function (y) {\r\n  var ygtx,\r\n    x = this,\r\n    Big = x.constructor,\r\n    a = x.s,\r\n    b = (y = new Big(y)).s;\r\n\r\n  if (!y.c[0]) {\r\n    throw Error(DIV_BY_ZERO);\r\n  }\r\n\r\n  x.s = y.s = 1;\r\n  ygtx = y.cmp(x) == 1;\r\n  x.s = a;\r\n  y.s = b;\r\n\r\n  if (ygtx) return new Big(x);\r\n\r\n  a = Big.DP;\r\n  b = Big.RM;\r\n  Big.DP = Big.RM = 0;\r\n  x = x.div(y);\r\n  Big.DP = a;\r\n  Big.RM = b;\r\n\r\n  return this.minus(x.times(y));\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big negated.\r\n */\r\nP.neg = function () {\r\n  var x = new this.constructor(this);\r\n  x.s = -x.s;\r\n  return x;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big plus the value of Big y.\r\n */\r\nP.plus = P.add = function (y) {\r\n  var e, k, t,\r\n    x = this,\r\n    Big = x.constructor;\r\n\r\n  y = new Big(y);\r\n\r\n  // Signs differ?\r\n  if (x.s != y.s) {\r\n    y.s = -y.s;\r\n    return x.minus(y);\r\n  }\r\n\r\n  var xe = x.e,\r\n    xc = x.c,\r\n    ye = y.e,\r\n    yc = y.c;\r\n\r\n  // Either zero?\r\n  if (!xc[0] || !yc[0]) {\r\n    if (!yc[0]) {\r\n      if (xc[0]) {\r\n        y = new Big(x);\r\n      } else {\r\n        y.s = x.s;\r\n      }\r\n    }\r\n    return y;\r\n  }\r\n\r\n  xc = xc.slice();\r\n\r\n  // Prepend zeros to equalise exponents.\r\n  // Note: reverse faster than unshifts.\r\n  if (e = xe - ye) {\r\n    if (e > 0) {\r\n      ye = xe;\r\n      t = yc;\r\n    } else {\r\n      e = -e;\r\n      t = xc;\r\n    }\r\n\r\n    t.reverse();\r\n    for (; e--;) t.push(0);\r\n    t.reverse();\r\n  }\r\n\r\n  // Point xc to the longer array.\r\n  if (xc.length - yc.length < 0) {\r\n    t = yc;\r\n    yc = xc;\r\n    xc = t;\r\n  }\r\n\r\n  e = yc.length;\r\n\r\n  // Only start adding at yc.length - 1 as the further digits of xc can be left as they are.\r\n  for (k = 0; e; xc[e] %= 10) k = (xc[--e] = xc[e] + yc[e] + k) / 10 | 0;\r\n\r\n  // No need to check for zero, as +x + +y != 0 && -x + -y != 0\r\n\r\n  if (k) {\r\n    xc.unshift(k);\r\n    ++ye;\r\n  }\r\n\r\n  // Remove trailing zeros.\r\n  for (e = xc.length; xc[--e] === 0;) xc.pop();\r\n\r\n  y.c = xc;\r\n  y.e = ye;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a Big whose value is the value of this Big raised to the power n.\r\n * If n is negative, round to a maximum of Big.DP decimal places using rounding\r\n * mode Big.RM.\r\n *\r\n * n {number} Integer, -MAX_POWER to MAX_POWER inclusive.\r\n */\r\nP.pow = function (n) {\r\n  var x = this,\r\n    one = new x.constructor('1'),\r\n    y = one,\r\n    isneg = n < 0;\r\n\r\n  if (n !== ~~n || n < -MAX_POWER || n > MAX_POWER) {\r\n    throw Error(INVALID + 'exponent');\r\n  }\r\n\r\n  if (isneg) n = -n;\r\n\r\n  for (;;) {\r\n    if (n & 1) y = y.times(x);\r\n    n >>= 1;\r\n    if (!n) break;\r\n    x = x.times(x);\r\n  }\r\n\r\n  return isneg ? one.div(y) : y;\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big rounded to a maximum precision of sd\r\n * significant digits using rounding mode rm, or Big.RM if rm is not specified.\r\n *\r\n * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n */\r\nP.prec = function (sd, rm) {\r\n  if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n    throw Error(INVALID + 'precision');\r\n  }\r\n  return round(new this.constructor(this), sd, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big rounded to a maximum of dp decimal places\r\n * using rounding mode rm, or Big.RM if rm is not specified.\r\n * If dp is negative, round to an integer which is a multiple of 10**-dp.\r\n * If dp is not specified, round to 0 decimal places.\r\n *\r\n * dp? {number} Integer, -MAX_DP to MAX_DP inclusive.\r\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n */\r\nP.round = function (dp, rm) {\r\n  if (dp === UNDEFINED) dp = 0;\r\n  else if (dp !== ~~dp || dp < -MAX_DP || dp > MAX_DP) {\r\n    throw Error(INVALID_DP);\r\n  }\r\n  return round(new this.constructor(this), dp + this.e + 1, rm);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the square root of the value of this Big, rounded, if\r\n * necessary, to a maximum of Big.DP decimal places using rounding mode Big.RM.\r\n */\r\nP.sqrt = function () {\r\n  var r, c, t,\r\n    x = this,\r\n    Big = x.constructor,\r\n    s = x.s,\r\n    e = x.e,\r\n    half = new Big('0.5');\r\n\r\n  // Zero?\r\n  if (!x.c[0]) return new Big(x);\r\n\r\n  // Negative?\r\n  if (s < 0) {\r\n    throw Error(NAME + 'No square root');\r\n  }\r\n\r\n  // Estimate.\r\n  s = Math.sqrt(x + '');\r\n\r\n  // Math.sqrt underflow/overflow?\r\n  // Re-estimate: pass x coefficient to Math.sqrt as integer, then adjust the result exponent.\r\n  if (s === 0 || s === 1 / 0) {\r\n    c = x.c.join('');\r\n    if (!(c.length + e & 1)) c += '0';\r\n    s = Math.sqrt(c);\r\n    e = ((e + 1) / 2 | 0) - (e < 0 || e & 1);\r\n    r = new Big((s == 1 / 0 ? '5e' : (s = s.toExponential()).slice(0, s.indexOf('e') + 1)) + e);\r\n  } else {\r\n    r = new Big(s + '');\r\n  }\r\n\r\n  e = r.e + (Big.DP += 4);\r\n\r\n  // Newton-Raphson iteration.\r\n  do {\r\n    t = r;\r\n    r = half.times(t.plus(x.div(t)));\r\n  } while (t.c.slice(0, e).join('') !== r.c.slice(0, e).join(''));\r\n\r\n  return round(r, (Big.DP -= 4) + r.e + 1, Big.RM);\r\n};\r\n\r\n\r\n/*\r\n * Return a new Big whose value is the value of this Big times the value of Big y.\r\n */\r\nP.times = P.mul = function (y) {\r\n  var c,\r\n    x = this,\r\n    Big = x.constructor,\r\n    xc = x.c,\r\n    yc = (y = new Big(y)).c,\r\n    a = xc.length,\r\n    b = yc.length,\r\n    i = x.e,\r\n    j = y.e;\r\n\r\n  // Determine sign of result.\r\n  y.s = x.s == y.s ? 1 : -1;\r\n\r\n  // Return signed 0 if either 0.\r\n  if (!xc[0] || !yc[0]) {\r\n    y.c = [y.e = 0];\r\n    return y;\r\n  }\r\n\r\n  // Initialise exponent of result as x.e + y.e.\r\n  y.e = i + j;\r\n\r\n  // If array xc has fewer digits than yc, swap xc and yc, and lengths.\r\n  if (a < b) {\r\n    c = xc;\r\n    xc = yc;\r\n    yc = c;\r\n    j = a;\r\n    a = b;\r\n    b = j;\r\n  }\r\n\r\n  // Initialise coefficient array of result with zeros.\r\n  for (c = new Array(j = a + b); j--;) c[j] = 0;\r\n\r\n  // Multiply.\r\n\r\n  // i is initially xc.length.\r\n  for (i = b; i--;) {\r\n    b = 0;\r\n\r\n    // a is yc.length.\r\n    for (j = a + i; j > i;) {\r\n\r\n      // Current sum of products at this digit position, plus carry.\r\n      b = c[j] + yc[i] * xc[j - i - 1] + b;\r\n      c[j--] = b % 10;\r\n\r\n      // carry\r\n      b = b / 10 | 0;\r\n    }\r\n\r\n    c[j] = b;\r\n  }\r\n\r\n  // Increment result exponent if there is a final carry, otherwise remove leading zero.\r\n  if (b) ++y.e;\r\n  else c.shift();\r\n\r\n  // Remove trailing zeros.\r\n  for (i = c.length; !c[--i];) c.pop();\r\n  y.c = c;\r\n\r\n  return y;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big in exponential notation rounded to dp fixed\r\n * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n *\r\n * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n */\r\nP.toExponential = function (dp, rm) {\r\n  var x = this,\r\n    n = x.c[0];\r\n\r\n  if (dp !== UNDEFINED) {\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n    x = round(new x.constructor(x), ++dp, rm);\r\n    for (; x.c.length < dp;) x.c.push(0);\r\n  }\r\n\r\n  return stringify(x, true, !!n);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big in normal notation rounded to dp fixed\r\n * decimal places using rounding mode rm, or Big.RM if rm is not specified.\r\n *\r\n * dp? {number} Decimal places: integer, 0 to MAX_DP inclusive.\r\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n *\r\n * (-0).toFixed(0) is '0', but (-0.1).toFixed(0) is '-0'.\r\n * (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.\r\n */\r\nP.toFixed = function (dp, rm) {\r\n  var x = this,\r\n    n = x.c[0];\r\n\r\n  if (dp !== UNDEFINED) {\r\n    if (dp !== ~~dp || dp < 0 || dp > MAX_DP) {\r\n      throw Error(INVALID_DP);\r\n    }\r\n    x = round(new x.constructor(x), dp + x.e + 1, rm);\r\n\r\n    // x.e may have changed if the value is rounded up.\r\n    for (dp = dp + x.e + 1; x.c.length < dp;) x.c.push(0);\r\n  }\r\n\r\n  return stringify(x, false, !!n);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Omit the sign for negative zero.\r\n */\r\nP[Symbol.for('nodejs.util.inspect.custom')] = P.toJSON = P.toString = function () {\r\n  var x = this,\r\n    Big = x.constructor;\r\n  return stringify(x, x.e <= Big.NE || x.e >= Big.PE, !!x.c[0]);\r\n};\r\n\r\n\r\n/*\r\n * Return the value of this Big as a primitve number.\r\n */\r\nP.toNumber = function () {\r\n  var n = Number(stringify(this, true, true));\r\n  if (this.constructor.strict === true && !this.eq(n.toString())) {\r\n    throw Error(NAME + 'Imprecise conversion');\r\n  }\r\n  return n;\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big rounded to sd significant digits using\r\n * rounding mode rm, or Big.RM if rm is not specified.\r\n * Use exponential notation if sd is less than the number of digits necessary to represent\r\n * the integer part of the value in normal notation.\r\n *\r\n * sd {number} Significant digits: integer, 1 to MAX_DP inclusive.\r\n * rm? {number} Rounding mode: 0 (down), 1 (half-up), 2 (half-even) or 3 (up).\r\n */\r\nP.toPrecision = function (sd, rm) {\r\n  var x = this,\r\n    Big = x.constructor,\r\n    n = x.c[0];\r\n\r\n  if (sd !== UNDEFINED) {\r\n    if (sd !== ~~sd || sd < 1 || sd > MAX_DP) {\r\n      throw Error(INVALID + 'precision');\r\n    }\r\n    x = round(new Big(x), sd, rm);\r\n    for (; x.c.length < sd;) x.c.push(0);\r\n  }\r\n\r\n  return stringify(x, sd <= x.e || x.e <= Big.NE || x.e >= Big.PE, !!n);\r\n};\r\n\r\n\r\n/*\r\n * Return a string representing the value of this Big.\r\n * Return exponential notation if this Big has a positive exponent equal to or greater than\r\n * Big.PE, or a negative exponent equal to or less than Big.NE.\r\n * Include the sign for negative zero.\r\n */\r\nP.valueOf = function () {\r\n  var x = this,\r\n    Big = x.constructor;\r\n  if (Big.strict === true) {\r\n    throw Error(NAME + 'valueOf disallowed');\r\n  }\r\n  return stringify(x, x.e <= Big.NE || x.e >= Big.PE, true);\r\n};\r\n\r\n\r\n// Export\r\n\r\n\r\nexport var Big = _Big_();\r\n\r\n/// <reference types=\"https://raw.githubusercontent.com/DefinitelyTyped/DefinitelyTyped/master/types/big.js/index.d.ts\" />\r\nexport default Big;\r\n","\n\n\n\n\n// https://aptos.dev/en/build/apis/fullnode-rest-api-reference#tag/general/get/\n\n/*\n\timport { ask_convert_APT_to_Octas } from '$lib/origin/math/APT_to_Octas.RPC.js'\n\tconst { enhanced, Octas } = await ask_convert_APT_to_Octas ({ APT })\n*/\n\nimport { ask_for_freight } from '$lib/Versies/Trucks'\n\nexport const ask_convert_APT_to_Octas = async ({ APT }) => {\n\tconst freight = ask_for_freight ();\n\t\n\tconst proceeds = await fetch (freight.origin_address + \"/math/APT_to_Octas\",  {\n\t\tmethod: 'PATCH',\n\t\theaders: {\n\t\t\t'Content-Type': 'application/json'\n\t\t},\n\t\tbody: JSON.stringify ({\n\t\t\tAPT\n\t\t})\n\t});\n\tconst enhanced = await proceeds.json ()\n\t\n\t// console.info ({ enhanced })\n\t\n\treturn {\n\t\tenhanced,\n\t\t// Octas\n\t};\n}","\n\n\nconst numerals = \"0123456789\"\nexport const Octas_string_is_permitted = (Octas_string) => {\n\tif (typeof Octas_string !== \"string\") {\n\t\treturn \"no\"\n\t}\n\t\n\tif (Octas_string.length === 0) {\n\t\treturn \"no\"\n\t}\n\t\n\tfor (let E = 0; E < Octas_string.length; E++) {\t\t\n\t\tif (numerals.includes (Octas_string [E]) !== true) {\n\t\t\treturn \"no\"\n\t\t} \n\t}\n\t\n\treturn \"yes\"\n}","\n\n\n<script>\n\n/*\t\n\timport Amount_Field from '$lib/trinkets/Amount_Field/Trinket.svelte'\n\t\n\tconst on_amount_change = ({ \n\t\teffects,\n\t\tactual_amount_of_Octas\n\t}) => {\n\t\tif (effects.problems === \"\") {\n\t\t\t\n\t\t}\n\t}\n\t\n\t<Amount_Field \n\t\ton_change={ on_amount_change }\n\t/>\n*/\n\n//\\\n//\nimport Problem_Alert from '$lib/trinkets/Alerts/Problem.svelte'\n//\nimport { onMount, onDestroy } from 'svelte';\nimport Big from 'big.js'\nimport { ask_convert_APT_to_Octas } from '$lib/origin/math/APT_to_Octas.RPC.js'\nimport { Octas_string_is_permitted } from './Screenplays/Octas_string_is_permitted.js'\n//\nimport { has_field } from 'procedures/object/has_field'\n//\n///\n\nimport { parse_with_commas } from '$lib/taverns/numbers/parse_with_commas'\n\t\n\nexport let on_change = () => {}\nexport let verify = () => {}\nexport let after_mount = () => {}\n\nimport { build_truck } from '$lib/trucks'\nconst trucks = {}\n\n$: amount = \"1\"\n$: currency = \"APT\"\n$: actual_amount_of_Octas = \"\"\n\nlet effects = {\n\tsci_note_estimate_of_Octas: \"\",\t\n\tproblem: \"\"\n}\n\n$: {\n\tlet _amount = amount;\n\teffect_change ()\n}\n$: {\n\tlet _currency = currency;\n\teffect_change ()\n}\n$: {\n\tlet _actual_amount_of_Octas = actual_amount_of_Octas;\n\tcalculate_exponent ()\n}\n\nconst Octas_from_APT = async () => {\n\tlet proceeds = \"\"\n\t\n\ttry {\n\t\tconst { enhanced } = await ask_convert_APT_to_Octas ({\n\t\t\tAPT: amount.toString ()\n\t\t})\n\t\tif (enhanced.victory === \"yes\") {\n\t\t\tactual_amount_of_Octas = enhanced.Octas;\n\t\t\ton_change ({\n\t\t\t\teffects,\n\t\t\t\tactual_amount_of_Octas,\n\t\t\t\t\n\t\t\t\tamount,\n\t\t\t\tcurrency\n\t\t\t})\n\t\t\treturn;\n\t\t}\n\t\telse {\n\t\t\tif (has_field (enhanced, \"note\")) {\n\t\t\t\teffects.problem = enhanced.note;\n\t\t\t}\n\t\t\telse {\n\t\t\t\teffects.problem = verify ({\n\t\t\t\t\tmerch,\n\t\t\t\t\teffects\n\t\t\t\t})\n\t\t\t}\n\t\t}\n\t}\n\tcatch (exception) {\n\t\teffects.problem = exception.message;\n\t}\n\t\n\tactual_amount_of_Octas = \"\"\n\t\n\ton_change ({\n\t\teffects,\n\t\tactual_amount_of_Octas,\n\t\t\n\t\tamount,\n\t\tcurrency\n\t})\n}\n\n\n\nconst effect_change = async () => {\n\teffects.problem = \"\"\n\tactual_amount_of_Octas = \"\" \n\t\n\tawait new Promise (resolve => {\n\t\tsetTimeout (() => {\n\t\t\tresolve ()\n\t\t}, 200)\n\t})\n\t\n\ttry {\n\t\tif (currency === \"APT\") {\n\t\t\tawait Octas_from_APT ();\t\t\t\t\n\t\t\treturn;\n\t\t}\n\t\tif (currency === \"Octas\") {\n\t\t\tconst Octas_as_string = amount.toString ();\n\t\t\tif (Octas_string_is_permitted (Octas_as_string) !== \"yes\") {\n\t\t\t\teffects.problem = `Octas needs to be a natural number. (1, 2, 3, 4, 5, ...)`\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t\n\t\t\tactual_amount_of_Octas = Octas_as_string;\n\t\t\t\n\t\t\ton_change ({\n\t\t\t\teffects,\n\t\t\t\tactual_amount_of_Octas,\n\t\t\t\t\n\t\t\t\tamount,\n\t\t\t\tcurrency\n\t\t\t})\n\t\t\treturn;\n\t\t}\n\t\t\n\t\teffects.problem = `Currency \"${currency}\" was not accounted for.`\n\t\treturn;\n\t}\n\tcatch (exception) {\n\t\teffects.problem = exception.message;\n\t}\n\t\n\ton_change ({\n\t\teffects,\n\t\tactual_amount_of_Octas,\n\t\t\n\t\tamount,\n\t\tcurrency\n\t})\n}\n\nlet prepared = \"no\"\nonMount (async () => {\n\tawait after_mount ();\n\t\n\teffect_change ()\n\t\n\tprepared = \"yes\"\n})\n\nonDestroy (() => {})\n\nconst calculate_exponent = () => {1\n\t// console.log ({ calculate_exponent })\n\n\ttry {\n\t\tlet exponent = parseFloat (actual_amount_of_Octas).toExponential () \n\t\tif (exponent === \"NaN\") {\n\t\t\treturn \"\"\n\t\t}\n\t\t\n\t\t// console.log ({ exponent })\n\t\t\n\t\treturn exponent;\n\t}\n\tcatch (exception) {\n\t\tconsole.error (exception)\n\t}\n\n\treturn \"\"\n}\n\n\n/*\t\n\tobserve, unobserve\n\t\n\tconst resizeObserver = new ResizeObserver ((entries) => {\n\t\trequestAnimationFrame (() => {\n\t\t\tfor (const entry of entries) {\n\t\t\t\n\t\t\t}\n\t\t});\n\t});\n\tresizeObserver.observe (divElem);\n\tresizeObserver.unobserve (divElem);\n\t\n\t<boat\t\n\t\tbind:this={ boat }\n\t\tstyle={parse_styles({\n\t\t\t\n\t\t\t\n\t\t})}\n\t/>\n\t\n\tboat.on (({ width }) => {\n\t\tconst styles = {}\n\t\t\n\t\tif (width < 300) {\n\t\t\tstyles [\"display\"] = \"block\"\n\t\t}\n\t\t\n\t\treturn styles;\n\t})\n*/\n\n\n\n</script>\n\n{#if prepared === \"yes\"}\n<div>\n\t<label class=\"label\">\n\t\t<aside class=\"alert variant-filled-warning\">\n\t\t\t<div class=\"alert-message\"\n\t\t\t\tstyle=\"\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\"\n\t\t\t>\n\t\t\t\t<p><b>Caution</b>, Please make sure \"<b>Actual Amount</b>\" is the intended amount.\n\t\t\t\t<p>It's calculated from the number provided and is the amount used.</p>\n\t\t\t</div>\n\t\t</aside>\n\t\t\n\t\t<div \n\t\t\tclass=\"input-group input-group-divider grid-cols-[auto_1fr_auto]\"\n\t\t\tstyle=\"padding: 2px\"\n\t\t>\n\t\t\t<select \n\t\t\t\tcurrency_chooser\n\t\t\t\n\t\t\t\tbind:value={ currency }\n\t\t\t\t\n\t\t\t\tclass=\"input-group-shim\"\n\t\t\t\tstyle=\"\n\t\t\t\t\twidth: 100px;\n\t\t\t\t\tborder-top-left-radius: 20px;\n\t\t\t\t\tborder-bottom-left-radius: 20px;\t\n\t\t\t\t\ttext-align: center;\n\t\t\t\t\"\n\t\t\t>\n\t\t\t\t<option>APT</option>\n\t\t\t\t<option>Octas</option>\n\t\t\t</select>\n\t\t\t<input \n\t\t\t\tamount_field\n\t\t\t\t\n\t\t\t\tbind:value={ amount }\n\t\t\t\t\n\t\t\t\tstyle=\"padding: 10px; border: 0\"\n\t\t\t\tclass=\"input\" \n\t\t\t\t\n\t\t\t\ttype=\"text\" \n\t\t\t\tplaceholder=\"Amount of Octas\" \n\t\t\t/>\n\t\t</div>\n\t</label>\n\n\t\n\t<div\n\t\tstyle=\"\n\n\t\t\t\n\t\t\t// display: flex;\n\t\t\t// flex-wrap: wrap;\n\t\t\t// justify-content: space-between;\n\t\t\t// flex-direction: wrap;\n\t\t\t\n\t\t\twidth: 100%;\n\t\t\tmargin: 4px 0;\n\t\t\"\n\t>\n\t\t<span \n\t\t\tclass=\"badge variant-soft\"\n\t\t\tstyle=\"\n\t\t\t\t// display: grid;\n\t\t\t\t// grid-template-columns: repeat(auto-fit, minmax(6cm, 1fr));\n\t\t\t\t// gap: 4px;\n\t\t\t\t\n\t\t\t\t// flex: 1 1 50%;\n\t\t\t\t\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-wrap: wrap;\n\t\t\t\tjustify-content: space-between;\n\t\t\t\n\t\t\t\tposition: relative;\n\t\t\t\tfont-size: 1.2em;\n\t\t\t\twhite-space: break-spaces;\n\t\t\t\tpadding: 0.25cm 0.5cm;\n\t\t\t\"\n\t\t>\n\t\t\t<span>Sci Note Estimate</span>\n\t\t\t<div>\n\t\t\t\t<span \n\t\t\t\t\tstyle=\"\n\t\t\t\t\t\tfont-size: 1em;\n\t\t\t\t\t\twhite-space: preserve;\n\t\t\t\t\t\tword-wrap: anywhere;\n\t\t\t\t\t\tmargin: 4px;\n\t\t\t\t\t\"\n\t\t\t\t>{ calculate_exponent (actual_amount_of_Octas) }</span>\n\t\t\t\t<span \n\t\t\t\t\tclass=\"badge variant-filled-surface\"\n\t\t\t\t\tstyle=\"\n\t\t\t\t\t\tfont-size: 1.1em;\n\t\t\t\t\t\"\n\t\t\t\t>Octas</span>\n\t\t\t</div>\n\t\t</span>\n\t\t\n\t\t<div style=\"height: 6px; width: 6px\"></div>\n\t\t\n\t\t<span \n\t\t\tclass=\"badge variant-soft\"\n\t\t\tstyle=\"\n\t\t\t\t// display: grid;\n\t\t\t\t// grid-template-columns: repeat(auto-fit, minmax(6cm, 1fr));\n\t\t\t\t// gap: 4px;\n\t\t\t\t\n\t\t\t\t// flex: 1 1 50%;\n\t\t\t\t\n\t\t\t\tdisplay: flex;\n\t\t\t\tflex-wrap: wrap;\n\t\t\t\tjustify-content: space-between;\n\t\t\t\n\t\t\t\tposition: relative;\n\t\t\t\tfont-size: 1.2em;\n\t\t\t\twhite-space: break-spaces;\n\t\t\t\tpadding: 0.25cm 0.5cm;\n\t\t\t\"\n\t\t>\n\t\t\t<span><b>Actual Amount</b></span>\n\t\t\t<div>\n\t\t\t\t<span \n\t\t\t\t\tmonitor=\"actual amount of octas\"\n\t\t\t\t\tstyle=\"\n\t\t\t\t\t\tfont-size: 1em;\n\t\t\t\t\t\twhite-space: preserve;\n\t\t\t\t\t\tword-wrap: anywhere;\n\t\t\t\t\t\tmargin: 4px;\n\t\t\t\t\t\"\n\t\t\t\t>{ parse_with_commas (actual_amount_of_Octas) }</span>\n\t\t\t\t<span \n\t\t\t\t\tclass=\"badge variant-filled-surface\"\n\t\t\t\t\tstyle=\"\n\t\t\t\t\t\tfont-size: 1.1em;\n\t\t\t\t\t\"\n\t\t\t\t>Octas</span>\n\t\t\t</div>\n\t\t</span>\n\t</div>\n\t\n\t<Problem_Alert \n\t\ttext={ effects.problem }\n\t/>\n</div>\n{/if}"],"names":["MAX_DP","MAX_POWER","NAME","INVALID","INVALID_DP","INVALID_RM","DIV_BY_ZERO","P","UNDEFINED","round","x","sd","rm","more","xc","stringify","doExponential","isNonzero","n","e","y","yc","i","j","k","l","isneg","Big","a","b","dp","bl","bt","cmp","ri","bz","ai","al","r","rl","q","qc","qi","p","t","xlty","xe","ye","ygtx","one","c","s","half","ask_convert_APT_to_Octas","APT","freight","ask_for_freight","numerals","Octas_string_is_permitted","Octas_string","E","span1","span5","problem_alert","Problem","target","anchor","insert_hydration","div6","append_hydration","label","t5","div1","select","option0","option1","t8","t9","div5","span3","t11","div2","t13","t15","t16","span7","t18","div4","t20","ctx","current","dirty","t12_value","set_data","t12","problem_alert_changes","effects","actual_amount_of_Octas","amount","has_field","enhanced","exception","$$invalidate","resolve","Octas_as_string","after_mount","effect_change","exponent","select_change_handler","input_input_handler","$$self","currency"],"mappings":"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","x_google_ignoreList":[0]}