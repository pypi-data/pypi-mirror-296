{"version":3,"file":"parse_with_commas.BiYKGtV3.js","sources":["../../../../../../src/lib/taverns/numbers/parse_with_commas.js"],"sourcesContent":["\n/*\n\timport { parse_with_commas } from '$lib/taverns/numbers/parse_with_commas'\n\tparse_with_commas (1234512345)\n*/\n\nexport const parse_with_commas = (number, choices = {}) => {\n\tconst with_line_breaks = choices.with_line_breaks || \"no\"\t\n\t\n    let [ integerPart, decimalPart ] = number.toString().split('.');\n\n\tconst parse_integer_part = (part) => {\n        let result = '';\n        let length = part.length;\n\n        for (let i = length - 1; i >= 0; i--) {\n            let position_from_end = length - i;\n            result = part [i] + result;\n\n\t\t\tif (with_line_breaks === \"yes\") {\n\t\t\t\tif (with_line_breaks === \"yes\" && position_from_end % 25 === 0 && i !== 0) {\n\t\t\t\t\tresult = '\\n' + result;\n\t\t\t\t}\n\t\t\t\telse if (position_from_end % 5 === 0 && i !== 0) {\n\t\t\t\t\tresult = ' ' + result;\n\t\t\t\t}\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif (position_from_end % 5 === 0 && i !== 0) {\n\t\t\t\t\tresult = ',' + result;\n\t\t\t\t}\n\t\t\t}\n\n            \n\t\t\t\n\t\t\t\n        }\n\n        return result;\n    }\n\n\n\t//\n\t//\t.123456 = .12345,6\n\t//\t.1234567 = .1234567\t\n\t//\n\tconst parse_decimal_part = (part) => {\n        if (!part) return '';\n\n        // Add trailing zeros if less than 5 digits\n        // part = part.padEnd(5, '0');\n\n        // Format the decimal part with commas every 3 digits from the end\n        let result = '';\n        let length = part.length;\n\n        for (let i = 0; i <= part.length - 1; i++) {\n            let position_from_end = i + 1;\n\n            result = result + part [i];\n\n            if (position_from_end % 5 === 0 && i !== 0) {\n                result = result + ',';\n            }\n        }\n\n        return result;\n    }\n\n    // Parse both integer and decimal parts\n    let parsed_integer_part = parse_integer_part (integerPart);\n    let parsed_decimal_part = parse_decimal_part (decimalPart);\n\tif (parsed_decimal_part === '') {\n\t\treturn parsed_integer_part;\n\t}\n\n    // Combine integer and decimal parts\n    return `${ parsed_integer_part }.${ parsed_decimal_part }`;\n}\n\n"],"names":["parse_with_commas","number","choices","with_line_breaks","integerPart","decimalPart","parse_integer_part","part","result","length","i","position_from_end","parse_decimal_part","parsed_integer_part","parsed_decimal_part"],"mappings":"AAMY,MAACA,EAAoB,CAACC,EAAQC,EAAU,KAAO,CAC1D,MAAMC,EAAmBD,EAAQ,kBAAoB,KAElD,GAAI,CAAEE,EAAaC,GAAgBJ,EAAO,WAAW,MAAM,GAAG,EAEjE,MAAMK,EAAsBC,GAAS,CAC9B,IAAIC,EAAS,GACTC,EAASF,EAAK,OAElB,QAASG,EAAID,EAAS,EAAGC,GAAK,EAAGA,IAAK,CAClC,IAAIC,EAAoBF,EAASC,EACjCF,EAASD,EAAMG,CAAC,EAAIF,EAEzBL,IAAqB,MACpBA,IAAqB,OAASQ,EAAoB,KAAO,GAAKD,IAAM,EACvEF,EAAS;AAAA,EAAOA,EAERG,EAAoB,IAAM,GAAKD,IAAM,IAC7CF,EAAS,IAAMA,GAIZG,EAAoB,IAAM,GAAKD,IAAM,IACxCF,EAAS,IAAMA,EAOX,CAED,OAAOA,CACV,EAOEI,EAAsBL,GAAS,CAC9B,GAAI,CAACA,EAAM,MAAO,GAMlB,IAAIC,EAAS,GACAD,EAAK,OAElB,QAASG,EAAI,EAAGA,GAAKH,EAAK,OAAS,EAAGG,IAAK,CACvC,IAAIC,EAAoBD,EAAI,EAE5BF,EAASA,EAASD,EAAMG,CAAC,EAErBC,EAAoB,IAAM,GAAKD,IAAM,IACrCF,EAASA,EAAS,IAEzB,CAED,OAAOA,CACV,EAGD,IAAIK,EAAsBP,EAAoBF,CAAW,EACrDU,EAAsBF,EAAoBP,CAAW,EAC5D,OAAIS,IAAwB,GACpBD,EAIE,GAAIA,CAAmB,IAAMC,CAAqB,EAC7D"}