{"version":3,"file":"_isIndex.B0qwFrvp.js","sources":["../../../../../../node_modules/lodash/_baseAssignValue.js","../../../../../../node_modules/lodash/_assignValue.js","../../../../../../node_modules/lodash/_isIndex.js"],"sourcesContent":["var defineProperty = require('./_defineProperty');\n\n/**\n * The base implementation of `assignValue` and `assignMergeValue` without\n * value checks.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction baseAssignValue(object, key, value) {\n  if (key == '__proto__' && defineProperty) {\n    defineProperty(object, key, {\n      'configurable': true,\n      'enumerable': true,\n      'value': value,\n      'writable': true\n    });\n  } else {\n    object[key] = value;\n  }\n}\n\nmodule.exports = baseAssignValue;\n","var baseAssignValue = require('./_baseAssignValue'),\n    eq = require('./eq');\n\n/** Used for built-in method references. */\nvar objectProto = Object.prototype;\n\n/** Used to check objects for own properties. */\nvar hasOwnProperty = objectProto.hasOwnProperty;\n\n/**\n * Assigns `value` to `key` of `object` if the existing value is not equivalent\n * using [`SameValueZero`](http://ecma-international.org/ecma-262/7.0/#sec-samevaluezero)\n * for equality comparisons.\n *\n * @private\n * @param {Object} object The object to modify.\n * @param {string} key The key of the property to assign.\n * @param {*} value The value to assign.\n */\nfunction assignValue(object, key, value) {\n  var objValue = object[key];\n  if (!(hasOwnProperty.call(object, key) && eq(objValue, value)) ||\n      (value === undefined && !(key in object))) {\n    baseAssignValue(object, key, value);\n  }\n}\n\nmodule.exports = assignValue;\n","/** Used as references for various `Number` constants. */\nvar MAX_SAFE_INTEGER = 9007199254740991;\n\n/** Used to detect unsigned integer values. */\nvar reIsUint = /^(?:0|[1-9]\\d*)$/;\n\n/**\n * Checks if `value` is a valid array-like index.\n *\n * @private\n * @param {*} value The value to check.\n * @param {number} [length=MAX_SAFE_INTEGER] The upper bounds of a valid index.\n * @returns {boolean} Returns `true` if `value` is a valid index, else `false`.\n */\nfunction isIndex(value, length) {\n  var type = typeof value;\n  length = length == null ? MAX_SAFE_INTEGER : length;\n\n  return !!length &&\n    (type == 'number' ||\n      (type != 'symbol' && reIsUint.test(value))) &&\n        (value > -1 && value % 1 == 0 && value < length);\n}\n\nmodule.exports = isIndex;\n"],"names":["defineProperty","require$$0","baseAssignValue","object","key","value","_baseAssignValue","eq","require$$1","objectProto","hasOwnProperty","assignValue","objValue","_assignValue","MAX_SAFE_INTEGER","reIsUint","isIndex","length","type","_isIndex"],"mappings":"qDAAA,IAAIA,EAAiBC,EAWrB,SAASC,EAAgBC,EAAQC,EAAKC,EAAO,CACvCD,GAAO,aAAeJ,EACxBA,EAAeG,EAAQC,EAAK,CAC1B,aAAgB,GAChB,WAAc,GACd,MAASC,EACT,SAAY,EAClB,CAAK,EAEDF,EAAOC,CAAG,EAAIC,CAElB,CAEA,IAAAC,EAAiBJ,ECxBbA,EAAkBD,EAClBM,EAAKC,EAGLC,EAAc,OAAO,UAGrBC,EAAiBD,EAAY,eAYjC,SAASE,EAAYR,EAAQC,EAAKC,EAAO,CACvC,IAAIO,EAAWT,EAAOC,CAAG,GACrB,EAAEM,EAAe,KAAKP,EAAQC,CAAG,GAAKG,EAAGK,EAAUP,CAAK,IACvDA,IAAU,QAAa,EAAED,KAAOD,KACnCD,EAAgBC,EAAQC,EAAKC,CAAK,CAEtC,CAEA,IAAAQ,EAAiBF,EC1BbG,EAAmB,iBAGnBC,EAAW,mBAUf,SAASC,EAAQX,EAAOY,EAAQ,CAC9B,IAAIC,EAAO,OAAOb,EAClB,OAAAY,EAASA,GAAiBH,EAEnB,CAAC,CAACG,IACNC,GAAQ,UACNA,GAAQ,UAAYH,EAAS,KAAKV,CAAK,IACrCA,EAAQ,IAAMA,EAAQ,GAAK,GAAKA,EAAQY,CACjD,CAEA,IAAAE,EAAiBH","x_google_ignoreList":[0,1,2]}