from .abstract_configurator import AbstractConfigurator as AbstractConfigurator, CONFIGURABLE_TYPE_LIST as CONFIGURABLE_TYPE_LIST, ENTRYPOINT_TYPE as ENTRYPOINT_TYPE
from _typeshed import Incomplete
from optilog.blackbox import ExecutionConstraints as ExecutionConstraints

class SMACScenario(AbstractConfigurator):
    """Handles the creation of all the needed files to use the SMAC AC tool over a configurable function.

    .. warning:: 
        Version 2.0 of SMAC3 dropped support for CLI. At the moment
        you must use version 1.4 of SMAC to run the scenarios
        generated by OptiLog.
        See `https://github.com/automl/SMAC3#important-changes-in-v20 <https://github.com/automl/SMAC3#important-changes-in-v20>`_.
    """
    scenario_kwargs: Incomplete
    def __init__(self, entrypoint: ENTRYPOINT_TYPE, constraints: ExecutionConstraints, run_obj: str, global_cfg: CONFIGURABLE_TYPE_LIST = [], data_kwarg: str = None, seed_kwarg: str = None, input_data: str = None, quality_regex: str = None, cost_for_crash: float = ..., **scenario_kwargs) -> None:
        """
        :param entrypoint: |entrypoint-param|
        :param global_cfg: |calls-params|
        :param input_data: |input-param|
        :param constraints: |constraints-param|
        :param run_obj: |run-param|
        :param data_kwarg: |data-param|
        :param seed_kwarg: |seed-param|
        :param quality_regex: |quality-param|
        :param cost_crash: Cost assigned in case of crash or timeout.
        :param dict \\*\\*scenario_kwargs: SMAC scenario parameters as they appear in         `SMAC's official documentation <https://automl.github.io/SMAC3/master/options.html#scenario>`_.         Will be directly written to the SMAC scenario file.
        """
