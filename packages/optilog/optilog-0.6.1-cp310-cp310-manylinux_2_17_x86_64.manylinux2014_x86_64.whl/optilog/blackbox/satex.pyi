from _typeshed import Incomplete

__version__: str
DOCKER_NS: str
REGISTRY_URL: str
on_linux: Incomplete

def color(s, color, mode: int = 1): ...
def red(s): ...
def green(s): ...
def yellow(s): ...
def error(msg, exit: bool = True) -> None: ...
def warn(msg) -> None: ...
def info(msg) -> None: ...
def in_repository(): ...

IN_REPOSITORY: Incomplete

def fetch_registry(args, opener): ...

cache_validity: Incomplete
cache_dir: Incomplete
cache_file: Incomplete

def is_cache_valid(args): ...
def refresh_cache(args, force: bool = False) -> None: ...
def get_registry(args): ...
def make_name(reg, cfg, entry, solver): ...
def is_no_pattern(spec): ...

re_image_name: Incomplete

def valid_name(name): ...

class Repository:
    images: Incomplete
    names: Incomplete
    def __init__(self, args) -> None: ...

class ImageManager:
    repo: Incomplete
    name: Incomplete
    entry: Incomplete
    solver: Incomplete
    setup: Incomplete
    registry: Incomplete
    vars: Incomplete
    def __init__(self, name, repo) -> None: ...
    @property
    def solver_name(self): ...
    @property
    def status(self): ...

def get_list(args): ...
def print_list(args) -> None: ...
def print_info(args) -> None: ...
def check_cmd(argv): ...
def check_sudo(): ...
def docker_call(): ...
def check_docker(): ...
def prepare_image(args, docker_argv, image) -> None: ...
def easy_volume(v): ...
def get_docker_volumes(args): ...
def docker_runs(args, images, docker_args=(), image_args=()): ...
def run_images(args) -> None: ...
def runraw_images(args): ...
def run_shell(args) -> None: ...
def extract(args) -> None: ...

FROM_UPTODATE: Incomplete

def docker_uptodate_image(args, docker_argv, image) -> None: ...
def docker_build(args, docker_argv, tag, root, build_args={}, Dockerfile: Incomplete | None = None) -> None: ...
def build_images(args) -> None: ...
def test_images(args): ...
def push_images(args) -> None: ...
def mrproper(args) -> None: ...
def dependencies(args) -> None: ...
def download_src(args): ...
def print_version(args) -> None: ...
def main(redirected: bool = False): ...
