from .expressions import *
from _typeshed import Incomplete as Incomplete

class Problem:
    """
    A general class to represent problems that can be solved or manipulated.
    It assumes the conjunction of expressions.
    """
    mapping: Incomplete
    constraints: Incomplete
    name: Incomplete
    def __init__(self, expr: Incomplete | None = None, name: Incomplete | None = None) -> None: ...
    def add_var(self, var) -> None: ...
    def has_variable(self, variable) -> None: ...
    def evaluate(self, interpretation) -> None: ...
    def add_constr(self, constraint) -> None: ...
    def to_cnf_dimacs(self) -> None: ...
    def represent(self) -> None: ...
