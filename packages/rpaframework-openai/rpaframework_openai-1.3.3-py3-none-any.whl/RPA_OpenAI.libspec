<?xml version="1.0" encoding="UTF-8"?>
<keywordspec name="RPA.OpenAI" type="LIBRARY" format="REST" scope="GLOBAL" generated="2024-09-17T13:50:51+00:00" specversion="5" source="./RPA/OpenAI.py" lineno="6">
<version/>
<doc>Library to support `OpenAI &lt;https://openai.com&gt;`_ and `Azure OpenAI &lt;https://learn.microsoft.com/en-us/azure/cognitive-services/openai/overview&gt;`_ services.

Library is **not** included in the `rpaframework` package, so in order to use it
you have to add `rpaframework-openai` with the desired version in your
*conda.yaml* file.

**Robot Framework example usage**

.. code-block:: robotframework

    *** Settings ***
    Library    RPA.Robocorp.Vault
    Library    RPA.OpenAI

    *** Tasks ***
    Create a text completion
        ${secrets}   Get Secret   secret_name=OpenAI
        Authorize To OpenAI   api_key=${secrets}[key]
        ${completion}    Completion Create
        ...     Write a tagline for an ice cream shop
        ...     temperature=0.6
        Log   ${completion}

**Python example usage**

.. code-block:: python

    from RPA.Robocorp.Vault import Vault
    from RPA.OpenAI import OpenAI

    secrets = Vault().get_secret("OpenAI")
    baselib = OpenAI()
    baselib.authorize_to_openai(secrets["key"])

    result = baselib.completion_create(
        Create a tagline for icecream shop',
        temperature=0.6,
    )
    print(result)</doc>
<tags>
</tags>
<inits>
</inits>
<keywords>
<kw name="Authorize To Azure Openai" lineno="55">
<arguments repr="api_key: str, api_base: str, api_type: str | None = azure, api_version: str | None = 2023-05-15">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="api_key: str">
<name>api_key</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="api_base: str">
<name>api_base</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="api_type: str | None = azure">
<name>api_type</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>azure</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="api_version: str | None = 2023-05-15">
<name>api_version</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>2023-05-15</default>
</arg>
</arguments>
<doc>Keyword for authorize to Azure OpenAI.

:param api_key: Your Azure OpenAI API key
:param api_base: Your Endpoint URL. Example: https://docs-test-001.openai.azure.com/
:param api_type: "azure"
:param api_version: "2023-05-15"

Robot Framework example:

.. code-block:: robotframework

    ${secrets}   Get Secret   secret_name=AzureOpenAI
    Authorize To Azure Openai
    ...    api_key=${secrets}[api_key]
    ...    api_base=${secrets}[api_base]
    ...    api_type=azure
    ...    api_version=2023-05-15

Python example:

.. code-block:: python

    secrets = Vault().get_secret("AzureOpenAI")
    baselib = OpenAI()
    baselib.authorize_to_azure_openai(
        secrets["api_key"],
        secrets["api_base"],
        "azure",
        "2023-05-15"
    )</doc>
<shortdoc>Keyword for authorize to Azure OpenAI.</shortdoc>
</kw>
<kw name="Authorize To Openai" lineno="100">
<arguments repr="api_key: str">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="api_key: str">
<name>api_key</name>
<type name="str" typedoc="string">str</type>
</arg>
</arguments>
<doc>Keyword for authorize to OpenAI with your API key obtained from your account.

:param api_key: Your OpenAI API key

Robot Framework example:

.. code-block:: robotframework

    ${secrets}   Get Secret   secret_name=OpenAI
    Authorize To OpenAI   api_key=${secrets}[key]

Python example:

.. code-block:: python

    secrets = Vault().get_secret("OpenAI")
    baselib = OpenAI()
    baselib.authorize_to_openai(secrets["key"])</doc>
<shortdoc>Keyword for authorize to OpenAI with your API key obtained from your account.</shortdoc>
</kw>
<kw name="Chat Completion Create" lineno="197">
<arguments repr="user_content: str | None = None, conversation: List | None = None, model: str | None = gpt-3.5-turbo, system_content: str | None = None, temperature: int | None = 1, top_probability: int | None = 1, frequency_penalty: int | None = 0, presence_penalty: int | None = 0">
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="user_content: str | None = None">
<name>user_content</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="conversation: List | None = None">
<name>conversation</name>
<type name="Union" union="true">List | None<type name="List" typedoc="list">List</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="model: str | None = gpt-3.5-turbo">
<name>model</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>gpt-3.5-turbo</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="system_content: str | None = None">
<name>system_content</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>None</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="temperature: int | None = 1">
<name>temperature</name>
<type name="Union" union="true">int | None<type name="int" typedoc="integer">int</type><type name="None" typedoc="None">None</type></type>
<default>1</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="top_probability: int | None = 1">
<name>top_probability</name>
<type name="Union" union="true">int | None<type name="int" typedoc="integer">int</type><type name="None" typedoc="None">None</type></type>
<default>1</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="frequency_penalty: int | None = 0">
<name>frequency_penalty</name>
<type name="Union" union="true">int | None<type name="int" typedoc="integer">int</type><type name="None" typedoc="None">None</type></type>
<default>0</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="presence_penalty: int | None = 0">
<name>presence_penalty</name>
<type name="Union" union="true">int | None<type name="int" typedoc="integer">int</type><type name="None" typedoc="None">None</type></type>
<default>0</default>
</arg>
</arguments>
<doc>Keyword for creating ChatGPT text completions using OpenAI or Azure OpenAI.
Keyword returns the response as a string and the message history as a list.

**Note**. When using ``Azure OpenAI`` you must provide the ``deployment_name``
as the ``model`` parameter instead of the model ID used with ``OpenAI``.

:param user_content: Text submitted to ChatGPT to generate completions.
:param conversation: List containing the conversation to be continued. Leave
 empty for a new conversation.
:param model: For ``OpenAI`` the ID of the model to use, e.g. ``gpt-4``
 or ``gpt-3.5-turbo``. For ``Azure OpenAI`` the Deployment name,
 e.g. ``myGPT4deployment``.
:param system_content: The system message helps set the behavior of
 the assistant.
:param temperature: What sampling temperature to use between 0 to 2. Higher
 values means the model will take more risks.
:param top_probability: An alternative to sampling with temperature, called
 nucleus sampling, where the model considers the results of the tokens with
 top_p probability mass.
:param frequency_penalty: Number between -2.0 and 2.0. Positive values penalize
 new tokens based on their existing frequency in the text so far.
:param presence_penalty: Number between -2.0 and 2.0. Positive values penalize
 new tokens based on whether they appear in the text so far.

Robot Framework example:

.. code-block:: robotframework

    # Get response without conversation history.
    ${response}   @{chatgpt_conversation}=     Chat Completion Create
    ...    user_content=What is the biggest mammal?
    Log    ${response}

    # Continue the conversation by using the "conversation" argument.
    ${response}   @{chatgpt_conversation}=     Chat Completion Create
    ...    conversation=${chatgpt_conversation}
    ...    user_content=How old can it live?
    Log    ${response}</doc>
<shortdoc>Keyword for creating ChatGPT text completions using OpenAI or Azure OpenAI. Keyword returns the response as a string and the message history as a list.</shortdoc>
</kw>
<kw name="Completion Create" lineno="123">
<arguments repr="prompt: str, model: str | None = text-davinci-003, temperature: int | None = 0.7, max_tokens: int | None = 256, top_probability: int | None = 1, frequency_penalty: int | None = 0, presence_penalty: int | None = 0, result_format: str | None = string">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="prompt: str">
<name>prompt</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="model: str | None = text-davinci-003">
<name>model</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>text-davinci-003</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="temperature: int | None = 0.7">
<name>temperature</name>
<type name="Union" union="true">int | None<type name="int" typedoc="integer">int</type><type name="None" typedoc="None">None</type></type>
<default>0.7</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="max_tokens: int | None = 256">
<name>max_tokens</name>
<type name="Union" union="true">int | None<type name="int" typedoc="integer">int</type><type name="None" typedoc="None">None</type></type>
<default>256</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="top_probability: int | None = 1">
<name>top_probability</name>
<type name="Union" union="true">int | None<type name="int" typedoc="integer">int</type><type name="None" typedoc="None">None</type></type>
<default>1</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="frequency_penalty: int | None = 0">
<name>frequency_penalty</name>
<type name="Union" union="true">int | None<type name="int" typedoc="integer">int</type><type name="None" typedoc="None">None</type></type>
<default>0</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="presence_penalty: int | None = 0">
<name>presence_penalty</name>
<type name="Union" union="true">int | None<type name="int" typedoc="integer">int</type><type name="None" typedoc="None">None</type></type>
<default>0</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="result_format: str | None = string">
<name>result_format</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>string</default>
</arg>
</arguments>
<doc>Keyword for creating text completions in OpenAI and Azure OpenAI.
Keyword returns a text string.

**Note**. When using ``Azure OpenAI`` you must provide the ``deployment_name``
as the ``model`` parameter instead of the model ID used with ``OpenAI``.

:param prompt: Text submitted to OpenAI for creating natural language.
:param model: For ``OpenAI`` the ID of the model to use, e.g. ``text-davinci-003``.
 For ``Azure OpenAI`` the Deployment name, e.g. ``myDavinci3deployment``.
:param temperature: What sampling temperature to use.
    Higher values means the model will take more risks..
:param max_tokens: The maximum number of tokens to generate in the completion..
:param top_probability: Controls diversity via nucleus sampling. 0.5 means half
    of all likelihood-weighted options are considered.
:param frequency_penalty: Number between -2.0 and 2.0. Positive values penalize
    new tokens based on their existing frequency in the text so far.
:param presence_penalty: Number between -2.0 and 2.0. Positive values penalize
    new tokens based on whether they appear in the text so far.
:param result_format: Result format (string / json). Return just a string or
    the default JSON response.

Robot Framework example:

.. code-block:: robotframework

    ${response}  Completion Create
    ...     Write a tagline for an icecream shop.
    ...     temperature=0.6
    Log     ${response}

Python example:

.. code-block:: python

    result = baselib.completion_create(
        'Create a tagline for icecream shop',
        temperature=0.6,
    )
    print(result)</doc>
<shortdoc>Keyword for creating text completions in OpenAI and Azure OpenAI. Keyword returns a text string.</shortdoc>
</kw>
<kw name="Image Create" lineno="283">
<arguments repr="prompt: str, size: str | None = 512x512, num_images: int | None = 1, result_format: str | None = list">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="prompt: str">
<name>prompt</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="size: str | None = 512x512">
<name>size</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>512x512</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="num_images: int | None = 1">
<name>num_images</name>
<type name="Union" union="true">int | None<type name="int" typedoc="integer">int</type><type name="None" typedoc="None">None</type></type>
<default>1</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="result_format: str | None = list">
<name>result_format</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>list</default>
</arg>
</arguments>
<doc>Keyword for creating one or more images using OpenAI.
Keyword returns a list of urls for the images created.

**Note**. Keyword not supported in the ``Azure OpenAI`` service.

:param prompt: A text description of the desired image(s).
    The maximum length is 1000 characters.
:param size: Size of the files to be created. 256x256, 512x512, 1024x1024
:param num_images: The number of images to generate. Must be between 1 and 10.
:param result_format: Result format (list / json).

Robot Framework example:

.. code-block:: robotframework

    ${images}    Image Create
    ...   Cartoon style picture of a cute monkey skateboarding.
    ...   size=256x256
    ...   num_images=2
    FOR    ${url}    IN    @{images}
        Log    ${url}
    END

Python example:

.. code-block:: python

    images = baselib.image_create(
        'Cartoon style picture of a cute monkey skateboarding',
        size='256x256',
        num_images=2,
    )
    for url in images:
        print(url)</doc>
<shortdoc>Keyword for creating one or more images using OpenAI. Keyword returns a list of urls for the images created.</shortdoc>
</kw>
<kw name="Image Create Variation" lineno="343">
<arguments repr="src_image: str, size: str | None = 512x512, num_images: int | None = 1, result_format: str | None = list">
<arg kind="POSITIONAL_OR_NAMED" required="true" repr="src_image: str">
<name>src_image</name>
<type name="str" typedoc="string">str</type>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="size: str | None = 512x512">
<name>size</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>512x512</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="num_images: int | None = 1">
<name>num_images</name>
<type name="Union" union="true">int | None<type name="int" typedoc="integer">int</type><type name="None" typedoc="None">None</type></type>
<default>1</default>
</arg>
<arg kind="POSITIONAL_OR_NAMED" required="false" repr="result_format: str | None = list">
<name>result_format</name>
<type name="Union" union="true">str | None<type name="str" typedoc="string">str</type><type name="None" typedoc="None">None</type></type>
<default>list</default>
</arg>
</arguments>
<doc>Keyword for creating one or more variations of a image. Keyword
returns a list of urls for the images created.
Source file must be a valid PNG file, less than 4MB, and square.

**Note**. Keyword not supported in the ``Azure OpenAI`` service.

:param src_image: The image to use as the basis for the variation(s).
    Must be a valid PNG file, less than 4MB, and square.
:param size: The size of the generated images.
    Must be one of 256x256, 512x512, or 1024x1024.
:param num_images: The number of images to generate. Must be between 1 and 10
:param result_format: Result format (list / json).

Robot Framework example:

.. code-block:: robotframework

    ${variations}   Image Create Variation
    ...     source_image.png
    ...     size=256x256
    ...     num_images=2
    FOR    ${url}    IN    @{variations}
        Log    ${url}
    END

Python example:

.. code-block:: python

    variations = baselib.image_create_variation(
        'source_image.png',
        size='256x256',
        num_images=2,
    )
    for url in variations:
        print(url)</doc>
<shortdoc>Keyword for creating one or more variations of a image. Keyword returns a list of urls for the images created. Source file must be a valid PNG file, less than 4MB, and square.</shortdoc>
</kw>
</keywords>
<datatypes>
</datatypes>
<typedocs>
<type name="integer" type="Standard">
<doc>Conversion is done using Python's [https://docs.python.org/library/functions.html#int|int]
built-in function. Floating point
numbers are accepted only if they can be represented as integers exactly.
For example, ``1.0`` is accepted and ``1.1`` is not.

Starting from RF 4.1, it is possible to use hexadecimal, octal and binary
numbers by prefixing values with ``0x``, ``0o`` and ``0b``, respectively.

Starting from RF 4.1, spaces and underscores can be used as visual separators
for digit grouping purposes.

Examples: ``42``, ``-1``, ``0b1010``, ``10 000 000``, ``0xBAD_C0FFEE``
</doc>
<accepts>
<type>string</type>
<type>float</type>
</accepts>
<usages>
<usage>Chat Completion Create</usage>
<usage>Completion Create</usage>
<usage>Image Create</usage>
<usage>Image Create Variation</usage>
</usages>
</type>
<type name="list" type="Standard">
<doc>Strings must be Python [https://docs.python.org/library/stdtypes.html#list|list]
literals. They are converted to actual lists using the
[https://docs.python.org/library/ast.html#ast.literal_eval|ast.literal_eval]
function. They can contain any values ``ast.literal_eval`` supports, including
lists and other containers.

If the type has nested types like ``list[int]``, items are converted
to those types automatically. This in new in Robot Framework 6.0.

Examples: ``['one', 'two']``, ``[('one', 1), ('two', 2)]``
</doc>
<accepts>
<type>string</type>
<type>Sequence</type>
</accepts>
<usages>
<usage>Chat Completion Create</usage>
</usages>
</type>
<type name="None" type="Standard">
<doc>String ``NONE`` (case-insensitive) is converted to Python ``None`` object.
Other values cause an error.
</doc>
<accepts>
<type>string</type>
</accepts>
<usages>
<usage>Authorize To Azure Openai</usage>
<usage>Chat Completion Create</usage>
<usage>Completion Create</usage>
<usage>Image Create</usage>
<usage>Image Create Variation</usage>
</usages>
</type>
<type name="string" type="Standard">
<doc>All arguments are converted to Unicode strings.</doc>
<accepts>
<type>Any</type>
</accepts>
<usages>
<usage>Authorize To Azure Openai</usage>
<usage>Authorize To Openai</usage>
<usage>Chat Completion Create</usage>
<usage>Completion Create</usage>
<usage>Image Create</usage>
<usage>Image Create Variation</usage>
</usages>
</type>
</typedocs>
</keywordspec>
